webpackJsonp([0,1],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	//client entry point - all components should be in separate files,
	//this will allow webpack to use hotmodule update later
	//and allow for server side to include just the app

	//Only the client side needs es5-shim so only include in bundle not app
	'use strict';

	__webpack_require__(1);
	__webpack_require__(2);

	var React = __webpack_require__(3);
	var app_router = __webpack_require__(163);

	//allow react dev tools work
	window.React = React;

	React.renderComponent(app_router, document.body);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * https://github.com/es-shims/es5-shim
	 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
	 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
	 */

	// vim: ts=4 sts=4 sw=4 expandtab

	// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
	;

	// UMD (Universal Module Definition)
	// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
	(function (root, factory) {
	    'use strict';

	    /* global define, exports, module */
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like enviroments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.returnExports = factory();
	    }
	}(this, function () {

	/**
	 * Brings an environment as close to ECMAScript 5 compliance
	 * as is possible with the facilities of erstwhile engines.
	 *
	 * Annotated ES5: http://es5.github.com/ (specific links below)
	 * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
	 * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
	 */

	// Shortcut to an often accessed properties, in order to avoid multiple
	// dereference that costs universally. This also holds a reference to known-good
	// functions.
	var $Array = Array;
	var ArrayPrototype = $Array.prototype;
	var $Object = Object;
	var ObjectPrototype = $Object.prototype;
	var $Function = Function;
	var FunctionPrototype = $Function.prototype;
	var $String = String;
	var StringPrototype = $String.prototype;
	var $Number = Number;
	var NumberPrototype = $Number.prototype;
	var array_slice = ArrayPrototype.slice;
	var array_splice = ArrayPrototype.splice;
	var array_push = ArrayPrototype.push;
	var array_unshift = ArrayPrototype.unshift;
	var array_concat = ArrayPrototype.concat;
	var array_join = ArrayPrototype.join;
	var call = FunctionPrototype.call;
	var apply = FunctionPrototype.apply;
	var max = Math.max;
	var min = Math.min;

	// Having a toString local variable name breaks in Opera so use to_string.
	var to_string = ObjectPrototype.toString;

	/* global Symbol */
	/* eslint-disable one-var-declaration-per-line, no-redeclare, max-statements-per-line */
	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	var isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, constructorRegex = /^\s*class /, isES6ClassFn = function isES6ClassFn(value) { try { var fnStr = fnToStr.call(value); var singleStripped = fnStr.replace(/\/\/.*\n/g, ''); var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, ''); var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' '); return constructorRegex.test(spaceStripped); } catch (e) { return false; /* not a function */ } }, tryFunctionObject = function tryFunctionObject(value) { try { if (isES6ClassFn(value)) { return false; } fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]', isCallable = function isCallable(value) { if (!value) { return false; } if (typeof value !== 'function' && typeof value !== 'object') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } if (isES6ClassFn(value)) { return false; } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };

	var isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };
	var isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };
	/* eslint-enable one-var-declaration-per-line, no-redeclare, max-statements-per-line */

	/* inlined from http://npmjs.com/define-properties */
	var supportsDescriptors = $Object.defineProperty && (function () {
	    try {
	        var obj = {};
	        $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
	        for (var _ in obj) { return false; }
	        return obj.x === obj;
	    } catch (e) { /* this is ES3 */
	        return false;
	    }
	}());
	var defineProperties = (function (has) {
	  // Define configurable, writable, and non-enumerable props
	  // if they don't exist.
	  var defineProperty;
	  if (supportsDescriptors) {
	      defineProperty = function (object, name, method, forceAssign) {
	          if (!forceAssign && (name in object)) { return; }
	          $Object.defineProperty(object, name, {
	              configurable: true,
	              enumerable: false,
	              writable: true,
	              value: method
	          });
	      };
	  } else {
	      defineProperty = function (object, name, method, forceAssign) {
	          if (!forceAssign && (name in object)) { return; }
	          object[name] = method;
	      };
	  }
	  return function defineProperties(object, map, forceAssign) {
	      for (var name in map) {
	          if (has.call(map, name)) {
	            defineProperty(object, name, map[name], forceAssign);
	          }
	      }
	  };
	}(ObjectPrototype.hasOwnProperty));

	//
	// Util
	// ======
	//

	/* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */
	var isPrimitive = function isPrimitive(input) {
	    var type = typeof input;
	    return input === null || (type !== 'object' && type !== 'function');
	};

	var isActualNaN = $Number.isNaN || function (x) { return x !== x; };

	var ES = {
	    // ES5 9.4
	    // http://es5.github.com/#x9.4
	    // http://jsperf.com/to-integer
	    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */
	    ToInteger: function ToInteger(num) {
	        var n = +num;
	        if (isActualNaN(n)) {
	            n = 0;
	        } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
	            n = (n > 0 || -1) * Math.floor(Math.abs(n));
	        }
	        return n;
	    },

	    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */
	    ToPrimitive: function ToPrimitive(input) {
	        var val, valueOf, toStr;
	        if (isPrimitive(input)) {
	            return input;
	        }
	        valueOf = input.valueOf;
	        if (isCallable(valueOf)) {
	            val = valueOf.call(input);
	            if (isPrimitive(val)) {
	                return val;
	            }
	        }
	        toStr = input.toString;
	        if (isCallable(toStr)) {
	            val = toStr.call(input);
	            if (isPrimitive(val)) {
	                return val;
	            }
	        }
	        throw new TypeError();
	    },

	    // ES5 9.9
	    // http://es5.github.com/#x9.9
	    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */
	    ToObject: function (o) {
	        if (o == null) { // this matches both null and undefined
	            throw new TypeError("can't convert " + o + ' to object');
	        }
	        return $Object(o);
	    },

	    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */
	    ToUint32: function ToUint32(x) {
	        return x >>> 0;
	    }
	};

	//
	// Function
	// ========
	//

	// ES-5 15.3.4.5
	// http://es5.github.com/#x15.3.4.5

	var Empty = function Empty() {};

	defineProperties(FunctionPrototype, {
	    bind: function bind(that) { // .length is 1
	        // 1. Let Target be the this value.
	        var target = this;
	        // 2. If IsCallable(Target) is false, throw a TypeError exception.
	        if (!isCallable(target)) {
	            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
	        }
	        // 3. Let A be a new (possibly empty) internal list of all of the
	        //   argument values provided after thisArg (arg1, arg2 etc), in order.
	        // XXX slicedArgs will stand in for "A" if used
	        var args = array_slice.call(arguments, 1); // for normal call
	        // 4. Let F be a new native ECMAScript object.
	        // 11. Set the [[Prototype]] internal property of F to the standard
	        //   built-in Function prototype object as specified in 15.3.3.1.
	        // 12. Set the [[Call]] internal property of F as described in
	        //   15.3.4.5.1.
	        // 13. Set the [[Construct]] internal property of F as described in
	        //   15.3.4.5.2.
	        // 14. Set the [[HasInstance]] internal property of F as described in
	        //   15.3.4.5.3.
	        var bound;
	        var binder = function () {

	            if (this instanceof bound) {
	                // 15.3.4.5.2 [[Construct]]
	                // When the [[Construct]] internal method of a function object,
	                // F that was created using the bind function is called with a
	                // list of arguments ExtraArgs, the following steps are taken:
	                // 1. Let target be the value of F's [[TargetFunction]]
	                //   internal property.
	                // 2. If target has no [[Construct]] internal method, a
	                //   TypeError exception is thrown.
	                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Construct]] internal
	                //   method of target providing args as the arguments.

	                var result = apply.call(
	                    target,
	                    this,
	                    array_concat.call(args, array_slice.call(arguments))
	                );
	                if ($Object(result) === result) {
	                    return result;
	                }
	                return this;

	            } else {
	                // 15.3.4.5.1 [[Call]]
	                // When the [[Call]] internal method of a function object, F,
	                // which was created using the bind function is called with a
	                // this value and a list of arguments ExtraArgs, the following
	                // steps are taken:
	                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 2. Let boundThis be the value of F's [[BoundThis]] internal
	                //   property.
	                // 3. Let target be the value of F's [[TargetFunction]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Call]] internal method
	                //   of target providing boundThis as the this value and
	                //   providing args as the arguments.

	                // equiv: target.call(this, ...boundArgs, ...args)
	                return apply.call(
	                    target,
	                    that,
	                    array_concat.call(args, array_slice.call(arguments))
	                );

	            }

	        };

	        // 15. If the [[Class]] internal property of Target is "Function", then
	        //     a. Let L be the length property of Target minus the length of A.
	        //     b. Set the length own property of F to either 0 or L, whichever is
	        //       larger.
	        // 16. Else set the length own property of F to 0.

	        var boundLength = max(0, target.length - args.length);

	        // 17. Set the attributes of the length own property of F to the values
	        //   specified in 15.3.5.1.
	        var boundArgs = [];
	        for (var i = 0; i < boundLength; i++) {
	            array_push.call(boundArgs, '$' + i);
	        }

	        // XXX Build a dynamic function with desired amount of arguments is the only
	        // way to set the length property of a function.
	        // In environments where Content Security Policies enabled (Chrome extensions,
	        // for ex.) all use of eval or Function costructor throws an exception.
	        // However in all of these environments Function.prototype.bind exists
	        // and so this code will never be executed.
	        bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);

	        if (target.prototype) {
	            Empty.prototype = target.prototype;
	            bound.prototype = new Empty();
	            // Clean up dangling references.
	            Empty.prototype = null;
	        }

	        // TODO
	        // 18. Set the [[Extensible]] internal property of F to true.

	        // TODO
	        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
	        // 20. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
	        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
	        //   false.
	        // 21. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
	        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
	        //   and false.

	        // TODO
	        // NOTE Function objects created using Function.prototype.bind do not
	        // have a prototype property or the [[Code]], [[FormalParameters]], and
	        // [[Scope]] internal properties.
	        // XXX can't delete prototype in pure-js.

	        // 22. Return F.
	        return bound;
	    }
	});

	// _Please note: Shortcuts are defined after `Function.prototype.bind` as we
	// use it in defining shortcuts.
	var owns = call.bind(ObjectPrototype.hasOwnProperty);
	var toStr = call.bind(ObjectPrototype.toString);
	var arraySlice = call.bind(array_slice);
	var arraySliceApply = apply.bind(array_slice);
	var strSlice = call.bind(StringPrototype.slice);
	var strSplit = call.bind(StringPrototype.split);
	var strIndexOf = call.bind(StringPrototype.indexOf);
	var pushCall = call.bind(array_push);
	var isEnum = call.bind(ObjectPrototype.propertyIsEnumerable);
	var arraySort = call.bind(ArrayPrototype.sort);

	//
	// Array
	// =====
	//

	var isArray = $Array.isArray || function isArray(obj) {
	    return toStr(obj) === '[object Array]';
	};

	// ES5 15.4.4.12
	// http://es5.github.com/#x15.4.4.13
	// Return len+argCount.
	// [bugfix, ielt8]
	// IE < 8 bug: [].unshift(0) === undefined but should be "1"
	var hasUnshiftReturnValueBug = [].unshift(0) !== 1;
	defineProperties(ArrayPrototype, {
	    unshift: function () {
	        array_unshift.apply(this, arguments);
	        return this.length;
	    }
	}, hasUnshiftReturnValueBug);

	// ES5 15.4.3.2
	// http://es5.github.com/#x15.4.3.2
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
	defineProperties($Array, { isArray: isArray });

	// The IsCallable() check in the Array functions
	// has been replaced with a strict check on the
	// internal class of the object to trap cases where
	// the provided function was actually a regular
	// expression literal, which in V8 and
	// JavaScriptCore is a typeof "function".  Only in
	// V8 are regular expression literals permitted as
	// reduce parameters, so it is desirable in the
	// general case for the shim to match the more
	// strict and common behavior of rejecting regular
	// expressions.

	// ES5 15.4.4.18
	// http://es5.github.com/#x15.4.4.18
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach

	// Check failure of by-index access of string characters (IE < 9)
	// and failure of `0 in boxedString` (Rhino)
	var boxedString = $Object('a');
	var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

	var properlyBoxesContext = function properlyBoxed(method) {
	    // Check node 0.6.21 bug where third parameter is not boxed
	    var properlyBoxesNonStrict = true;
	    var properlyBoxesStrict = true;
	    var threwException = false;
	    if (method) {
	        try {
	            method.call('foo', function (_, __, context) {
	                if (typeof context !== 'object') {
	                    properlyBoxesNonStrict = false;
	                }
	            });

	            method.call([1], function () {
	                'use strict';

	                properlyBoxesStrict = typeof this === 'string';
	            }, 'x');
	        } catch (e) {
	            threwException = true;
	        }
	    }
	    return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
	};

	defineProperties(ArrayPrototype, {
	    forEach: function forEach(callbackfn/*, thisArg*/) {
	        var object = ES.ToObject(this);
	        var self = splitString && isString(this) ? strSplit(this, '') : object;
	        var i = -1;
	        var length = ES.ToUint32(self.length);
	        var T;
	        if (arguments.length > 1) {
	          T = arguments[1];
	        }

	        // If no callback function or if callback is not a callable function
	        if (!isCallable(callbackfn)) {
	            throw new TypeError('Array.prototype.forEach callback must be a function');
	        }

	        while (++i < length) {
	            if (i in self) {
	                // Invoke the callback function with call, passing arguments:
	                // context, property value, property key, thisArg object
	                if (typeof T === 'undefined') {
	                    callbackfn(self[i], i, object);
	                } else {
	                    callbackfn.call(T, self[i], i, object);
	                }
	            }
	        }
	    }
	}, !properlyBoxesContext(ArrayPrototype.forEach));

	// ES5 15.4.4.19
	// http://es5.github.com/#x15.4.4.19
	// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
	defineProperties(ArrayPrototype, {
	    map: function map(callbackfn/*, thisArg*/) {
	        var object = ES.ToObject(this);
	        var self = splitString && isString(this) ? strSplit(this, '') : object;
	        var length = ES.ToUint32(self.length);
	        var result = $Array(length);
	        var T;
	        if (arguments.length > 1) {
	            T = arguments[1];
	        }

	        // If no callback function or if callback is not a callable function
	        if (!isCallable(callbackfn)) {
	            throw new TypeError('Array.prototype.map callback must be a function');
	        }

	        for (var i = 0; i < length; i++) {
	            if (i in self) {
	                if (typeof T === 'undefined') {
	                    result[i] = callbackfn(self[i], i, object);
	                } else {
	                    result[i] = callbackfn.call(T, self[i], i, object);
	                }
	            }
	        }
	        return result;
	    }
	}, !properlyBoxesContext(ArrayPrototype.map));

	// ES5 15.4.4.20
	// http://es5.github.com/#x15.4.4.20
	// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
	defineProperties(ArrayPrototype, {
	    filter: function filter(callbackfn/*, thisArg*/) {
	        var object = ES.ToObject(this);
	        var self = splitString && isString(this) ? strSplit(this, '') : object;
	        var length = ES.ToUint32(self.length);
	        var result = [];
	        var value;
	        var T;
	        if (arguments.length > 1) {
	            T = arguments[1];
	        }

	        // If no callback function or if callback is not a callable function
	        if (!isCallable(callbackfn)) {
	            throw new TypeError('Array.prototype.filter callback must be a function');
	        }

	        for (var i = 0; i < length; i++) {
	            if (i in self) {
	                value = self[i];
	                if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {
	                    pushCall(result, value);
	                }
	            }
	        }
	        return result;
	    }
	}, !properlyBoxesContext(ArrayPrototype.filter));

	// ES5 15.4.4.16
	// http://es5.github.com/#x15.4.4.16
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
	defineProperties(ArrayPrototype, {
	    every: function every(callbackfn/*, thisArg*/) {
	        var object = ES.ToObject(this);
	        var self = splitString && isString(this) ? strSplit(this, '') : object;
	        var length = ES.ToUint32(self.length);
	        var T;
	        if (arguments.length > 1) {
	            T = arguments[1];
	        }

	        // If no callback function or if callback is not a callable function
	        if (!isCallable(callbackfn)) {
	            throw new TypeError('Array.prototype.every callback must be a function');
	        }

	        for (var i = 0; i < length; i++) {
	            if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
	                return false;
	            }
	        }
	        return true;
	    }
	}, !properlyBoxesContext(ArrayPrototype.every));

	// ES5 15.4.4.17
	// http://es5.github.com/#x15.4.4.17
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
	defineProperties(ArrayPrototype, {
	    some: function some(callbackfn/*, thisArg */) {
	        var object = ES.ToObject(this);
	        var self = splitString && isString(this) ? strSplit(this, '') : object;
	        var length = ES.ToUint32(self.length);
	        var T;
	        if (arguments.length > 1) {
	            T = arguments[1];
	        }

	        // If no callback function or if callback is not a callable function
	        if (!isCallable(callbackfn)) {
	            throw new TypeError('Array.prototype.some callback must be a function');
	        }

	        for (var i = 0; i < length; i++) {
	            if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
	                return true;
	            }
	        }
	        return false;
	    }
	}, !properlyBoxesContext(ArrayPrototype.some));

	// ES5 15.4.4.21
	// http://es5.github.com/#x15.4.4.21
	// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
	var reduceCoercesToObject = false;
	if (ArrayPrototype.reduce) {
	    reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) {
	        return list;
	    }) === 'object';
	}
	defineProperties(ArrayPrototype, {
	    reduce: function reduce(callbackfn/*, initialValue*/) {
	        var object = ES.ToObject(this);
	        var self = splitString && isString(this) ? strSplit(this, '') : object;
	        var length = ES.ToUint32(self.length);

	        // If no callback function or if callback is not a callable function
	        if (!isCallable(callbackfn)) {
	            throw new TypeError('Array.prototype.reduce callback must be a function');
	        }

	        // no value to return if no initial value and an empty array
	        if (length === 0 && arguments.length === 1) {
	            throw new TypeError('reduce of empty array with no initial value');
	        }

	        var i = 0;
	        var result;
	        if (arguments.length >= 2) {
	            result = arguments[1];
	        } else {
	            do {
	                if (i in self) {
	                    result = self[i++];
	                    break;
	                }

	                // if array contains no values, no initial value to return
	                if (++i >= length) {
	                    throw new TypeError('reduce of empty array with no initial value');
	                }
	            } while (true);
	        }

	        for (; i < length; i++) {
	            if (i in self) {
	                result = callbackfn(result, self[i], i, object);
	            }
	        }

	        return result;
	    }
	}, !reduceCoercesToObject);

	// ES5 15.4.4.22
	// http://es5.github.com/#x15.4.4.22
	// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
	var reduceRightCoercesToObject = false;
	if (ArrayPrototype.reduceRight) {
	    reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) {
	        return list;
	    }) === 'object';
	}
	defineProperties(ArrayPrototype, {
	    reduceRight: function reduceRight(callbackfn/*, initial*/) {
	        var object = ES.ToObject(this);
	        var self = splitString && isString(this) ? strSplit(this, '') : object;
	        var length = ES.ToUint32(self.length);

	        // If no callback function or if callback is not a callable function
	        if (!isCallable(callbackfn)) {
	            throw new TypeError('Array.prototype.reduceRight callback must be a function');
	        }

	        // no value to return if no initial value, empty array
	        if (length === 0 && arguments.length === 1) {
	            throw new TypeError('reduceRight of empty array with no initial value');
	        }

	        var result;
	        var i = length - 1;
	        if (arguments.length >= 2) {
	            result = arguments[1];
	        } else {
	            do {
	                if (i in self) {
	                    result = self[i--];
	                    break;
	                }

	                // if array contains no values, no initial value to return
	                if (--i < 0) {
	                    throw new TypeError('reduceRight of empty array with no initial value');
	                }
	            } while (true);
	        }

	        if (i < 0) {
	            return result;
	        }

	        do {
	            if (i in self) {
	                result = callbackfn(result, self[i], i, object);
	            }
	        } while (i--);

	        return result;
	    }
	}, !reduceRightCoercesToObject);

	// ES5 15.4.4.14
	// http://es5.github.com/#x15.4.4.14
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
	var hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
	defineProperties(ArrayPrototype, {
	    indexOf: function indexOf(searchElement/*, fromIndex */) {
	        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
	        var length = ES.ToUint32(self.length);

	        if (length === 0) {
	            return -1;
	        }

	        var i = 0;
	        if (arguments.length > 1) {
	            i = ES.ToInteger(arguments[1]);
	        }

	        // handle negative indices
	        i = i >= 0 ? i : max(0, length + i);
	        for (; i < length; i++) {
	            if (i in self && self[i] === searchElement) {
	                return i;
	            }
	        }
	        return -1;
	    }
	}, hasFirefox2IndexOfBug);

	// ES5 15.4.4.15
	// http://es5.github.com/#x15.4.4.15
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
	var hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;
	defineProperties(ArrayPrototype, {
	    lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {
	        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
	        var length = ES.ToUint32(self.length);

	        if (length === 0) {
	            return -1;
	        }
	        var i = length - 1;
	        if (arguments.length > 1) {
	            i = min(i, ES.ToInteger(arguments[1]));
	        }
	        // handle negative indices
	        i = i >= 0 ? i : length - Math.abs(i);
	        for (; i >= 0; i--) {
	            if (i in self && searchElement === self[i]) {
	                return i;
	            }
	        }
	        return -1;
	    }
	}, hasFirefox2LastIndexOfBug);

	// ES5 15.4.4.12
	// http://es5.github.com/#x15.4.4.12
	var spliceNoopReturnsEmptyArray = (function () {
	    var a = [1, 2];
	    var result = a.splice();
	    return a.length === 2 && isArray(result) && result.length === 0;
	}());
	defineProperties(ArrayPrototype, {
	    // Safari 5.0 bug where .splice() returns undefined
	    splice: function splice(start, deleteCount) {
	        if (arguments.length === 0) {
	            return [];
	        } else {
	            return array_splice.apply(this, arguments);
	        }
	    }
	}, !spliceNoopReturnsEmptyArray);

	var spliceWorksWithEmptyObject = (function () {
	    var obj = {};
	    ArrayPrototype.splice.call(obj, 0, 0, 1);
	    return obj.length === 1;
	}());
	defineProperties(ArrayPrototype, {
	    splice: function splice(start, deleteCount) {
	        if (arguments.length === 0) { return []; }
	        var args = arguments;
	        this.length = max(ES.ToInteger(this.length), 0);
	        if (arguments.length > 0 && typeof deleteCount !== 'number') {
	            args = arraySlice(arguments);
	            if (args.length < 2) {
	                pushCall(args, this.length - start);
	            } else {
	                args[1] = ES.ToInteger(deleteCount);
	            }
	        }
	        return array_splice.apply(this, args);
	    }
	}, !spliceWorksWithEmptyObject);
	var spliceWorksWithLargeSparseArrays = (function () {
	    // Per https://github.com/es-shims/es5-shim/issues/295
	    // Safari 7/8 breaks with sparse arrays of size 1e5 or greater
	    var arr = new $Array(1e5);
	    // note: the index MUST be 8 or larger or the test will false pass
	    arr[8] = 'x';
	    arr.splice(1, 1);
	    // note: this test must be defined *after* the indexOf shim
	    // per https://github.com/es-shims/es5-shim/issues/313
	    return arr.indexOf('x') === 7;
	}());
	var spliceWorksWithSmallSparseArrays = (function () {
	    // Per https://github.com/es-shims/es5-shim/issues/295
	    // Opera 12.15 breaks on this, no idea why.
	    var n = 256;
	    var arr = [];
	    arr[n] = 'a';
	    arr.splice(n + 1, 0, 'b');
	    return arr[n] === 'a';
	}());
	defineProperties(ArrayPrototype, {
	    splice: function splice(start, deleteCount) {
	        var O = ES.ToObject(this);
	        var A = [];
	        var len = ES.ToUint32(O.length);
	        var relativeStart = ES.ToInteger(start);
	        var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);
	        var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);

	        var k = 0;
	        var from;
	        while (k < actualDeleteCount) {
	            from = $String(actualStart + k);
	            if (owns(O, from)) {
	                A[k] = O[from];
	            }
	            k += 1;
	        }

	        var items = arraySlice(arguments, 2);
	        var itemCount = items.length;
	        var to;
	        if (itemCount < actualDeleteCount) {
	            k = actualStart;
	            var maxK = len - actualDeleteCount;
	            while (k < maxK) {
	                from = $String(k + actualDeleteCount);
	                to = $String(k + itemCount);
	                if (owns(O, from)) {
	                    O[to] = O[from];
	                } else {
	                    delete O[to];
	                }
	                k += 1;
	            }
	            k = len;
	            var minK = len - actualDeleteCount + itemCount;
	            while (k > minK) {
	                delete O[k - 1];
	                k -= 1;
	            }
	        } else if (itemCount > actualDeleteCount) {
	            k = len - actualDeleteCount;
	            while (k > actualStart) {
	                from = $String(k + actualDeleteCount - 1);
	                to = $String(k + itemCount - 1);
	                if (owns(O, from)) {
	                    O[to] = O[from];
	                } else {
	                    delete O[to];
	                }
	                k -= 1;
	            }
	        }
	        k = actualStart;
	        for (var i = 0; i < items.length; ++i) {
	            O[k] = items[i];
	            k += 1;
	        }
	        O.length = len - actualDeleteCount + itemCount;

	        return A;
	    }
	}, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);

	var originalJoin = ArrayPrototype.join;
	var hasStringJoinBug;
	try {
	    hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3';
	} catch (e) {
	    hasStringJoinBug = true;
	}
	if (hasStringJoinBug) {
	    defineProperties(ArrayPrototype, {
	        join: function join(separator) {
	            var sep = typeof separator === 'undefined' ? ',' : separator;
	            return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep);
	        }
	    }, hasStringJoinBug);
	}

	var hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';
	if (hasJoinUndefinedBug) {
	    defineProperties(ArrayPrototype, {
	        join: function join(separator) {
	            var sep = typeof separator === 'undefined' ? ',' : separator;
	            return originalJoin.call(this, sep);
	        }
	    }, hasJoinUndefinedBug);
	}

	var pushShim = function push(item) {
	    var O = ES.ToObject(this);
	    var n = ES.ToUint32(O.length);
	    var i = 0;
	    while (i < arguments.length) {
	        O[n + i] = arguments[i];
	        i += 1;
	    }
	    O.length = n + i;
	    return n + i;
	};

	var pushIsNotGeneric = (function () {
	    var obj = {};
	    var result = Array.prototype.push.call(obj, undefined);
	    return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);
	}());
	defineProperties(ArrayPrototype, {
	    push: function push(item) {
	        if (isArray(this)) {
	            return array_push.apply(this, arguments);
	        }
	        return pushShim.apply(this, arguments);
	    }
	}, pushIsNotGeneric);

	// This fixes a very weird bug in Opera 10.6 when pushing `undefined
	var pushUndefinedIsWeird = (function () {
	    var arr = [];
	    var result = arr.push(undefined);
	    return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);
	}());
	defineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);

	// ES5 15.2.3.14
	// http://es5.github.io/#x15.4.4.10
	// Fix boxed string bug
	defineProperties(ArrayPrototype, {
	    slice: function (start, end) {
	        var arr = isString(this) ? strSplit(this, '') : this;
	        return arraySliceApply(arr, arguments);
	    }
	}, splitString);

	var sortIgnoresNonFunctions = (function () {
	    try {
	        [1, 2].sort(null);
	        [1, 2].sort({});
	        return true;
	    } catch (e) { /**/ }
	    return false;
	}());
	var sortThrowsOnRegex = (function () {
	    // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`
	    try {
	        [1, 2].sort(/a/);
	        return false;
	    } catch (e) { /**/ }
	    return true;
	}());
	var sortIgnoresUndefined = (function () {
	    // applies in IE 8, for one.
	    try {
	        [1, 2].sort(undefined);
	        return true;
	    } catch (e) { /**/ }
	    return false;
	}());
	defineProperties(ArrayPrototype, {
	    sort: function sort(compareFn) {
	        if (typeof compareFn === 'undefined') {
	            return arraySort(this);
	        }
	        if (!isCallable(compareFn)) {
	            throw new TypeError('Array.prototype.sort callback must be a function');
	        }
	        return arraySort(this, compareFn);
	    }
	}, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex);

	//
	// Object
	// ======
	//

	// ES5 15.2.3.14
	// http://es5.github.com/#x15.2.3.14

	// http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
	var hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');
	var hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');
	var hasStringEnumBug = !owns('x', '0');
	var equalsConstructorPrototype = function (o) {
	    var ctor = o.constructor;
	    return ctor && ctor.prototype === o;
	};
	var blacklistedKeys = {
	    $window: true,
	    $console: true,
	    $parent: true,
	    $self: true,
	    $frame: true,
	    $frames: true,
	    $frameElement: true,
	    $webkitIndexedDB: true,
	    $webkitStorageInfo: true,
	    $external: true
	};
	var hasAutomationEqualityBug = (function () {
	    /* globals window */
	    if (typeof window === 'undefined') { return false; }
	    for (var k in window) {
	        try {
	            if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {
	                equalsConstructorPrototype(window[k]);
	            }
	        } catch (e) {
	            return true;
	        }
	    }
	    return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (object) {
	    if (typeof window === 'undefined' || !hasAutomationEqualityBug) { return equalsConstructorPrototype(object); }
	    try {
	        return equalsConstructorPrototype(object);
	    } catch (e) {
	        return false;
	    }
	};
	var dontEnums = [
	    'toString',
	    'toLocaleString',
	    'valueOf',
	    'hasOwnProperty',
	    'isPrototypeOf',
	    'propertyIsEnumerable',
	    'constructor'
	];
	var dontEnumsLength = dontEnums.length;

	// taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js
	// can be replaced with require('is-arguments') if we ever use a build process instead
	var isStandardArguments = function isArguments(value) {
	    return toStr(value) === '[object Arguments]';
	};
	var isLegacyArguments = function isArguments(value) {
	    return value !== null &&
	        typeof value === 'object' &&
	        typeof value.length === 'number' &&
	        value.length >= 0 &&
	        !isArray(value) &&
	        isCallable(value.callee);
	};
	var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;

	defineProperties($Object, {
	    keys: function keys(object) {
	        var isFn = isCallable(object);
	        var isArgs = isArguments(object);
	        var isObject = object !== null && typeof object === 'object';
	        var isStr = isObject && isString(object);

	        if (!isObject && !isFn && !isArgs) {
	            throw new TypeError('Object.keys called on a non-object');
	        }

	        var theKeys = [];
	        var skipProto = hasProtoEnumBug && isFn;
	        if ((isStr && hasStringEnumBug) || isArgs) {
	            for (var i = 0; i < object.length; ++i) {
	                pushCall(theKeys, $String(i));
	            }
	        }

	        if (!isArgs) {
	            for (var name in object) {
	                if (!(skipProto && name === 'prototype') && owns(object, name)) {
	                    pushCall(theKeys, $String(name));
	                }
	            }
	        }

	        if (hasDontEnumBug) {
	            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
	            for (var j = 0; j < dontEnumsLength; j++) {
	                var dontEnum = dontEnums[j];
	                if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {
	                    pushCall(theKeys, dontEnum);
	                }
	            }
	        }
	        return theKeys;
	    }
	});

	var keysWorksWithArguments = $Object.keys && (function () {
	    // Safari 5.0 bug
	    return $Object.keys(arguments).length === 2;
	}(1, 2));
	var keysHasArgumentsLengthBug = $Object.keys && (function () {
	    var argKeys = $Object.keys(arguments);
	    return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;
	}(1));
	var originalKeys = $Object.keys;
	defineProperties($Object, {
	    keys: function keys(object) {
	        if (isArguments(object)) {
	            return originalKeys(arraySlice(object));
	        } else {
	            return originalKeys(object);
	        }
	    }
	}, !keysWorksWithArguments || keysHasArgumentsLengthBug);

	//
	// Date
	// ====
	//

	var hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0;
	var aNegativeTestDate = new Date(-1509842289600292);
	var aPositiveTestDate = new Date(1449662400000);
	var hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT';
	var hasToDateStringFormatBug;
	var hasToStringFormatBug;
	var timeZoneOffset = aNegativeTestDate.getTimezoneOffset();
	if (timeZoneOffset < -720) {
	    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875';
	    hasToStringFormatBug = !(/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
	} else {
	    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875';
	    hasToStringFormatBug = !(/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
	}

	var originalGetFullYear = call.bind(Date.prototype.getFullYear);
	var originalGetMonth = call.bind(Date.prototype.getMonth);
	var originalGetDate = call.bind(Date.prototype.getDate);
	var originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear);
	var originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth);
	var originalGetUTCDate = call.bind(Date.prototype.getUTCDate);
	var originalGetUTCDay = call.bind(Date.prototype.getUTCDay);
	var originalGetUTCHours = call.bind(Date.prototype.getUTCHours);
	var originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes);
	var originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds);
	var originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds);
	var dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	var daysInMonth = function daysInMonth(month, year) {
	    return originalGetDate(new Date(year, month, 0));
	};

	defineProperties(Date.prototype, {
	    getFullYear: function getFullYear() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var year = originalGetFullYear(this);
	        if (year < 0 && originalGetMonth(this) > 11) {
	            return year + 1;
	        }
	        return year;
	    },
	    getMonth: function getMonth() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var year = originalGetFullYear(this);
	        var month = originalGetMonth(this);
	        if (year < 0 && month > 11) {
	            return 0;
	        }
	        return month;
	    },
	    getDate: function getDate() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var year = originalGetFullYear(this);
	        var month = originalGetMonth(this);
	        var date = originalGetDate(this);
	        if (year < 0 && month > 11) {
	            if (month === 12) {
	                return date;
	            }
	            var days = daysInMonth(0, year + 1);
	            return (days - date) + 1;
	        }
	        return date;
	    },
	    getUTCFullYear: function getUTCFullYear() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var year = originalGetUTCFullYear(this);
	        if (year < 0 && originalGetUTCMonth(this) > 11) {
	            return year + 1;
	        }
	        return year;
	    },
	    getUTCMonth: function getUTCMonth() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var year = originalGetUTCFullYear(this);
	        var month = originalGetUTCMonth(this);
	        if (year < 0 && month > 11) {
	            return 0;
	        }
	        return month;
	    },
	    getUTCDate: function getUTCDate() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var year = originalGetUTCFullYear(this);
	        var month = originalGetUTCMonth(this);
	        var date = originalGetUTCDate(this);
	        if (year < 0 && month > 11) {
	            if (month === 12) {
	                return date;
	            }
	            var days = daysInMonth(0, year + 1);
	            return (days - date) + 1;
	        }
	        return date;
	    }
	}, hasNegativeMonthYearBug);

	defineProperties(Date.prototype, {
	    toUTCString: function toUTCString() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var day = originalGetUTCDay(this);
	        var date = originalGetUTCDate(this);
	        var month = originalGetUTCMonth(this);
	        var year = originalGetUTCFullYear(this);
	        var hour = originalGetUTCHours(this);
	        var minute = originalGetUTCMinutes(this);
	        var second = originalGetUTCSeconds(this);
	        return dayName[day] + ', ' +
	            (date < 10 ? '0' + date : date) + ' ' +
	            monthName[month] + ' ' +
	            year + ' ' +
	            (hour < 10 ? '0' + hour : hour) + ':' +
	            (minute < 10 ? '0' + minute : minute) + ':' +
	            (second < 10 ? '0' + second : second) + ' GMT';
	    }
	}, hasNegativeMonthYearBug || hasToUTCStringFormatBug);

	// Opera 12 has `,`
	defineProperties(Date.prototype, {
	    toDateString: function toDateString() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var day = this.getDay();
	        var date = this.getDate();
	        var month = this.getMonth();
	        var year = this.getFullYear();
	        return dayName[day] + ' ' +
	            monthName[month] + ' ' +
	            (date < 10 ? '0' + date : date) + ' ' +
	            year;
	    }
	}, hasNegativeMonthYearBug || hasToDateStringFormatBug);

	// can't use defineProperties here because of toString enumeration issue in IE <= 8
	if (hasNegativeMonthYearBug || hasToStringFormatBug) {
	    Date.prototype.toString = function toString() {
	        if (!this || !(this instanceof Date)) {
	            throw new TypeError('this is not a Date object.');
	        }
	        var day = this.getDay();
	        var date = this.getDate();
	        var month = this.getMonth();
	        var year = this.getFullYear();
	        var hour = this.getHours();
	        var minute = this.getMinutes();
	        var second = this.getSeconds();
	        var timezoneOffset = this.getTimezoneOffset();
	        var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60);
	        var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60);
	        return dayName[day] + ' ' +
	            monthName[month] + ' ' +
	            (date < 10 ? '0' + date : date) + ' ' +
	            year + ' ' +
	            (hour < 10 ? '0' + hour : hour) + ':' +
	            (minute < 10 ? '0' + minute : minute) + ':' +
	            (second < 10 ? '0' + second : second) + ' GMT' +
	            (timezoneOffset > 0 ? '-' : '+') +
	            (hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) +
	            (minutesOffset < 10 ? '0' + minutesOffset : minutesOffset);
	    };
	    if (supportsDescriptors) {
	        $Object.defineProperty(Date.prototype, 'toString', {
	            configurable: true,
	            enumerable: false,
	            writable: true
	        });
	    }
	}

	// ES5 15.9.5.43
	// http://es5.github.com/#x15.9.5.43
	// This function returns a String value represent the instance in time
	// represented by this Date object. The format of the String is the Date Time
	// string format defined in 15.9.1.15. All fields are present in the String.
	// The time zone is always UTC, denoted by the suffix Z. If the time value of
	// this object is not a finite Number a RangeError exception is thrown.
	var negativeDate = -62198755200000;
	var negativeYearString = '-000001';
	var hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;
	var hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';

	var getTime = call.bind(Date.prototype.getTime);

	defineProperties(Date.prototype, {
	    toISOString: function toISOString() {
	        if (!isFinite(this) || !isFinite(getTime(this))) {
	            // Adope Photoshop requires the second check.
	            throw new RangeError('Date.prototype.toISOString called on non-finite value.');
	        }

	        var year = originalGetUTCFullYear(this);

	        var month = originalGetUTCMonth(this);
	        // see https://github.com/es-shims/es5-shim/issues/111
	        year += Math.floor(month / 12);
	        month = (month % 12 + 12) % 12;

	        // the date time string format is specified in 15.9.1.15.
	        var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];
	        year = (
	            (year < 0 ? '-' : (year > 9999 ? '+' : '')) +
	            strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)
	        );

	        for (var i = 0; i < result.length; ++i) {
	          // pad months, days, hours, minutes, and seconds to have two digits.
	          result[i] = strSlice('00' + result[i], -2);
	        }
	        // pad milliseconds to have three digits.
	        return (
	            year + '-' + arraySlice(result, 0, 2).join('-') +
	            'T' + arraySlice(result, 2).join(':') + '.' +
	            strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z'
	        );
	    }
	}, hasNegativeDateBug || hasSafari51DateBug);

	// ES5 15.9.5.44
	// http://es5.github.com/#x15.9.5.44
	// This function provides a String representation of a Date object for use by
	// JSON.stringify (15.12.3).
	var dateToJSONIsSupported = (function () {
	    try {
	        return Date.prototype.toJSON &&
	            new Date(NaN).toJSON() === null &&
	            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&
	            Date.prototype.toJSON.call({ // generic
	                toISOString: function () { return true; }
	            });
	    } catch (e) {
	        return false;
	    }
	}());
	if (!dateToJSONIsSupported) {
	    Date.prototype.toJSON = function toJSON(key) {
	        // When the toJSON method is called with argument key, the following
	        // steps are taken:

	        // 1.  Let O be the result of calling ToObject, giving it the this
	        // value as its argument.
	        // 2. Let tv be ES.ToPrimitive(O, hint Number).
	        var O = $Object(this);
	        var tv = ES.ToPrimitive(O);
	        // 3. If tv is a Number and is not finite, return null.
	        if (typeof tv === 'number' && !isFinite(tv)) {
	            return null;
	        }
	        // 4. Let toISO be the result of calling the [[Get]] internal method of
	        // O with argument "toISOString".
	        var toISO = O.toISOString;
	        // 5. If IsCallable(toISO) is false, throw a TypeError exception.
	        if (!isCallable(toISO)) {
	            throw new TypeError('toISOString property is not callable');
	        }
	        // 6. Return the result of calling the [[Call]] internal method of
	        //  toISO with O as the this value and an empty argument list.
	        return toISO.call(O);

	        // NOTE 1 The argument is ignored.

	        // NOTE 2 The toJSON function is intentionally generic; it does not
	        // require that its this value be a Date object. Therefore, it can be
	        // transferred to other kinds of objects for use as a method. However,
	        // it does require that any such object have a toISOString method. An
	        // object is free to use the argument key to filter its
	        // stringification.
	    };
	}

	// ES5 15.9.4.2
	// http://es5.github.com/#x15.9.4.2
	// based on work shared by Daniel Friesen (dantman)
	// http://gist.github.com/303249
	var supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;
	var acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));
	var doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));
	if (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {
	    // XXX global assignment won't work in embeddings that use
	    // an alternate object for the context.
	    /* global Date: true */
	    /* eslint-disable no-undef */
	    var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;
	    var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());
	    /* eslint-disable no-implicit-globals */
	    Date = (function (NativeDate) {
	    /* eslint-enable no-implicit-globals */
	    /* eslint-enable no-undef */
	        // Date.length === 7
	        var DateShim = function Date(Y, M, D, h, m, s, ms) {
	            var length = arguments.length;
	            var date;
	            if (this instanceof NativeDate) {
	                var seconds = s;
	                var millis = ms;
	                if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {
	                    // work around a Safari 8/9 bug where it treats the seconds as signed
	                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
	                    var sToShift = Math.floor(msToShift / 1e3);
	                    seconds += sToShift;
	                    millis -= sToShift * 1e3;
	                }
	                date = length === 1 && $String(Y) === Y ? // isString(Y)
	                    // We explicitly pass it through parse:
	                    new NativeDate(DateShim.parse(Y)) :
	                    // We have to manually make calls depending on argument
	                    // length here
	                    length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :
	                    length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :
	                    length >= 5 ? new NativeDate(Y, M, D, h, m) :
	                    length >= 4 ? new NativeDate(Y, M, D, h) :
	                    length >= 3 ? new NativeDate(Y, M, D) :
	                    length >= 2 ? new NativeDate(Y, M) :
	                    length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) :
	                                  new NativeDate();
	            } else {
	                date = NativeDate.apply(this, arguments);
	            }
	            if (!isPrimitive(date)) {
	              // Prevent mixups with unfixed Date object
	              defineProperties(date, { constructor: DateShim }, true);
	            }
	            return date;
	        };

	        // 15.9.1.15 Date Time String Format.
	        var isoDateExpression = new RegExp('^' +
	            '(\\d{4}|[+-]\\d{6})' + // four-digit year capture or sign +
	                                      // 6-digit extended year
	            '(?:-(\\d{2})' + // optional month capture
	            '(?:-(\\d{2})' + // optional day capture
	            '(?:' + // capture hours:minutes:seconds.milliseconds
	                'T(\\d{2})' + // hours capture
	                ':(\\d{2})' + // minutes capture
	                '(?:' + // optional :seconds.milliseconds
	                    ':(\\d{2})' + // seconds capture
	                    '(?:(\\.\\d{1,}))?' + // milliseconds capture
	                ')?' +
	            '(' + // capture UTC offset component
	                'Z|' + // UTC capture
	                '(?:' + // offset specifier +/-hours:minutes
	                    '([-+])' + // sign capture
	                    '(\\d{2})' + // hours offset capture
	                    ':(\\d{2})' + // minutes offset capture
	                ')' +
	            ')?)?)?)?' +
	        '$');

	        var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];

	        var dayFromMonth = function dayFromMonth(year, month) {
	            var t = month > 1 ? 1 : 0;
	            return (
	                months[month] +
	                Math.floor((year - 1969 + t) / 4) -
	                Math.floor((year - 1901 + t) / 100) +
	                Math.floor((year - 1601 + t) / 400) +
	                365 * (year - 1970)
	            );
	        };

	        var toUTC = function toUTC(t) {
	            var s = 0;
	            var ms = t;
	            if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {
	                // work around a Safari 8/9 bug where it treats the seconds as signed
	                var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
	                var sToShift = Math.floor(msToShift / 1e3);
	                s += sToShift;
	                ms -= sToShift * 1e3;
	            }
	            return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));
	        };

	        // Copy any custom methods a 3rd party library may have added
	        for (var key in NativeDate) {
	            if (owns(NativeDate, key)) {
	                DateShim[key] = NativeDate[key];
	            }
	        }

	        // Copy "native" methods explicitly; they may be non-enumerable
	        defineProperties(DateShim, {
	            now: NativeDate.now,
	            UTC: NativeDate.UTC
	        }, true);
	        DateShim.prototype = NativeDate.prototype;
	        defineProperties(DateShim.prototype, {
	            constructor: DateShim
	        }, true);

	        // Upgrade Date.parse to handle simplified ISO 8601 strings
	        var parseShim = function parse(string) {
	            var match = isoDateExpression.exec(string);
	            if (match) {
	                // parse months, days, hours, minutes, seconds, and milliseconds
	                // provide default values if necessary
	                // parse the UTC offset component
	                var year = $Number(match[1]),
	                    month = $Number(match[2] || 1) - 1,
	                    day = $Number(match[3] || 1) - 1,
	                    hour = $Number(match[4] || 0),
	                    minute = $Number(match[5] || 0),
	                    second = $Number(match[6] || 0),
	                    millisecond = Math.floor($Number(match[7] || 0) * 1000),
	                    // When time zone is missed, local offset should be used
	                    // (ES 5.1 bug)
	                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112
	                    isLocalTime = Boolean(match[4] && !match[8]),
	                    signOffset = match[9] === '-' ? 1 : -1,
	                    hourOffset = $Number(match[10] || 0),
	                    minuteOffset = $Number(match[11] || 0),
	                    result;
	                var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;
	                if (
	                    hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&
	                    minute < 60 && second < 60 && millisecond < 1000 &&
	                    month > -1 && month < 12 && hourOffset < 24 &&
	                    minuteOffset < 60 && // detect invalid offsets
	                    day > -1 &&
	                    day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))
	                ) {
	                    result = (
	                        (dayFromMonth(year, month) + day) * 24 +
	                        hour +
	                        hourOffset * signOffset
	                    ) * 60;
	                    result = (
	                        (result + minute + minuteOffset * signOffset) * 60 +
	                        second
	                    ) * 1000 + millisecond;
	                    if (isLocalTime) {
	                        result = toUTC(result);
	                    }
	                    if (-8.64e15 <= result && result <= 8.64e15) {
	                        return result;
	                    }
	                }
	                return NaN;
	            }
	            return NativeDate.parse.apply(this, arguments);
	        };
	        defineProperties(DateShim, { parse: parseShim });

	        return DateShim;
	    }(Date));
	    /* global Date: false */
	}

	// ES5 15.9.4.4
	// http://es5.github.com/#x15.9.4.4
	if (!Date.now) {
	    Date.now = function now() {
	        return new Date().getTime();
	    };
	}

	//
	// Number
	// ======
	//

	// ES5.1 15.7.4.5
	// http://es5.github.com/#x15.7.4.5
	var hasToFixedBugs = NumberPrototype.toFixed && (
	  (0.00008).toFixed(3) !== '0.000' ||
	  (0.9).toFixed(0) !== '1' ||
	  (1.255).toFixed(2) !== '1.25' ||
	  (1000000000000000128).toFixed(0) !== '1000000000000000128'
	);

	var toFixedHelpers = {
	  base: 1e7,
	  size: 6,
	  data: [0, 0, 0, 0, 0, 0],
	  multiply: function multiply(n, c) {
	      var i = -1;
	      var c2 = c;
	      while (++i < toFixedHelpers.size) {
	          c2 += n * toFixedHelpers.data[i];
	          toFixedHelpers.data[i] = c2 % toFixedHelpers.base;
	          c2 = Math.floor(c2 / toFixedHelpers.base);
	      }
	  },
	  divide: function divide(n) {
	      var i = toFixedHelpers.size;
	      var c = 0;
	      while (--i >= 0) {
	          c += toFixedHelpers.data[i];
	          toFixedHelpers.data[i] = Math.floor(c / n);
	          c = (c % n) * toFixedHelpers.base;
	      }
	  },
	  numToString: function numToString() {
	      var i = toFixedHelpers.size;
	      var s = '';
	      while (--i >= 0) {
	          if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {
	              var t = $String(toFixedHelpers.data[i]);
	              if (s === '') {
	                  s = t;
	              } else {
	                  s += strSlice('0000000', 0, 7 - t.length) + t;
	              }
	          }
	      }
	      return s;
	  },
	  pow: function pow(x, n, acc) {
	      return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));
	  },
	  log: function log(x) {
	      var n = 0;
	      var x2 = x;
	      while (x2 >= 4096) {
	          n += 12;
	          x2 /= 4096;
	      }
	      while (x2 >= 2) {
	          n += 1;
	          x2 /= 2;
	      }
	      return n;
	  }
	};

	var toFixedShim = function toFixed(fractionDigits) {
	    var f, x, s, m, e, z, j, k;

	    // Test for NaN and round fractionDigits down
	    f = $Number(fractionDigits);
	    f = isActualNaN(f) ? 0 : Math.floor(f);

	    if (f < 0 || f > 20) {
	        throw new RangeError('Number.toFixed called with invalid number of decimals');
	    }

	    x = $Number(this);

	    if (isActualNaN(x)) {
	        return 'NaN';
	    }

	    // If it is too big or small, return the string value of the number
	    if (x <= -1e21 || x >= 1e21) {
	        return $String(x);
	    }

	    s = '';

	    if (x < 0) {
	        s = '-';
	        x = -x;
	    }

	    m = '0';

	    if (x > 1e-21) {
	        // 1e-21 < x < 1e21
	        // -70 < log2(x) < 70
	        e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;
	        z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));
	        z *= 0x10000000000000; // Math.pow(2, 52);
	        e = 52 - e;

	        // -18 < e < 122
	        // x = z / 2 ^ e
	        if (e > 0) {
	            toFixedHelpers.multiply(0, z);
	            j = f;

	            while (j >= 7) {
	                toFixedHelpers.multiply(1e7, 0);
	                j -= 7;
	            }

	            toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);
	            j = e - 1;

	            while (j >= 23) {
	                toFixedHelpers.divide(1 << 23);
	                j -= 23;
	            }

	            toFixedHelpers.divide(1 << j);
	            toFixedHelpers.multiply(1, 1);
	            toFixedHelpers.divide(2);
	            m = toFixedHelpers.numToString();
	        } else {
	            toFixedHelpers.multiply(0, z);
	            toFixedHelpers.multiply(1 << (-e), 0);
	            m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);
	        }
	    }

	    if (f > 0) {
	        k = m.length;

	        if (k <= f) {
	            m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;
	        } else {
	            m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);
	        }
	    } else {
	        m = s + m;
	    }

	    return m;
	};
	defineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);

	var hasToPrecisionUndefinedBug = (function () {
	    try {
	        return 1.0.toPrecision(undefined) === '1';
	    } catch (e) {
	        return true;
	    }
	}());
	var originalToPrecision = NumberPrototype.toPrecision;
	defineProperties(NumberPrototype, {
	    toPrecision: function toPrecision(precision) {
	        return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);
	    }
	}, hasToPrecisionUndefinedBug);

	//
	// String
	// ======
	//

	// ES5 15.5.4.14
	// http://es5.github.com/#x15.5.4.14

	// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
	// Many browsers do not split properly with regular expressions or they
	// do not perform the split correctly under obscure conditions.
	// See http://blog.stevenlevithan.com/archives/cross-browser-split
	// I've tested in many browsers and this seems to cover the deviant ones:
	//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
	//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
	//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
	//       [undefined, "t", undefined, "e", ...]
	//    ''.split(/.?/) should be [], not [""]
	//    '.'.split(/()()/) should be ["."], not ["", "", "."]

	if (
	    'ab'.split(/(?:ab)*/).length !== 2 ||
	    '.'.split(/(.?)(.?)/).length !== 4 ||
	    'tesst'.split(/(s)*/)[1] === 't' ||
	    'test'.split(/(?:)/, -1).length !== 4 ||
	    ''.split(/.?/).length ||
	    '.'.split(/()()/).length > 1
	) {
	    (function () {
	        var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group
	        var maxSafe32BitInt = Math.pow(2, 32) - 1;

	        StringPrototype.split = function (separator, limit) {
	            var string = String(this);
	            if (typeof separator === 'undefined' && limit === 0) {
	                return [];
	            }

	            // If `separator` is not a regex, use native split
	            if (!isRegex(separator)) {
	                return strSplit(this, separator, limit);
	            }

	            var output = [];
	            var flags = (separator.ignoreCase ? 'i' : '') +
	                        (separator.multiline ? 'm' : '') +
	                        (separator.unicode ? 'u' : '') + // in ES6
	                        (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6
	                lastLastIndex = 0,
	                // Make `global` and avoid `lastIndex` issues by working with a copy
	                separator2, match, lastIndex, lastLength;
	            var separatorCopy = new RegExp(separator.source, flags + 'g');
	            if (!compliantExecNpcg) {
	                // Doesn't need flags gy, but they don't hurt
	                separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	            }
	            /* Values for `limit`, per the spec:
	             * If undefined: 4294967295 // maxSafe32BitInt
	             * If 0, Infinity, or NaN: 0
	             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
	             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
	             * If other: Type-convert, then use the above rules
	             */
	            var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);
	            match = separatorCopy.exec(string);
	            while (match) {
	                // `separatorCopy.lastIndex` is not reliable cross-browser
	                lastIndex = match.index + match[0].length;
	                if (lastIndex > lastLastIndex) {
	                    pushCall(output, strSlice(string, lastLastIndex, match.index));
	                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
	                    // nonparticipating capturing groups
	                    if (!compliantExecNpcg && match.length > 1) {
	                        /* eslint-disable no-loop-func */
	                        match[0].replace(separator2, function () {
	                            for (var i = 1; i < arguments.length - 2; i++) {
	                                if (typeof arguments[i] === 'undefined') {
	                                    match[i] = void 0;
	                                }
	                            }
	                        });
	                        /* eslint-enable no-loop-func */
	                    }
	                    if (match.length > 1 && match.index < string.length) {
	                        array_push.apply(output, arraySlice(match, 1));
	                    }
	                    lastLength = match[0].length;
	                    lastLastIndex = lastIndex;
	                    if (output.length >= splitLimit) {
	                        break;
	                    }
	                }
	                if (separatorCopy.lastIndex === match.index) {
	                    separatorCopy.lastIndex++; // Avoid an infinite loop
	                }
	                match = separatorCopy.exec(string);
	            }
	            if (lastLastIndex === string.length) {
	                if (lastLength || !separatorCopy.test('')) {
	                    pushCall(output, '');
	                }
	            } else {
	                pushCall(output, strSlice(string, lastLastIndex));
	            }
	            return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output;
	        };
	    }());

	// [bugfix, chrome]
	// If separator is undefined, then the result array contains just one String,
	// which is the this value (converted to a String). If limit is not undefined,
	// then the output array is truncated so that it contains no more than limit
	// elements.
	// "0".split(undefined, 0) -> []
	} else if ('0'.split(void 0, 0).length) {
	    StringPrototype.split = function split(separator, limit) {
	        if (typeof separator === 'undefined' && limit === 0) { return []; }
	        return strSplit(this, separator, limit);
	    };
	}

	var str_replace = StringPrototype.replace;
	var replaceReportsGroupsCorrectly = (function () {
	    var groups = [];
	    'x'.replace(/x(.)?/g, function (match, group) {
	        pushCall(groups, group);
	    });
	    return groups.length === 1 && typeof groups[0] === 'undefined';
	}());

	if (!replaceReportsGroupsCorrectly) {
	    StringPrototype.replace = function replace(searchValue, replaceValue) {
	        var isFn = isCallable(replaceValue);
	        var hasCapturingGroups = isRegex(searchValue) && (/\)[*?]/).test(searchValue.source);
	        if (!isFn || !hasCapturingGroups) {
	            return str_replace.call(this, searchValue, replaceValue);
	        } else {
	            var wrappedReplaceValue = function (match) {
	                var length = arguments.length;
	                var originalLastIndex = searchValue.lastIndex;
	                searchValue.lastIndex = 0;
	                var args = searchValue.exec(match) || [];
	                searchValue.lastIndex = originalLastIndex;
	                pushCall(args, arguments[length - 2], arguments[length - 1]);
	                return replaceValue.apply(this, args);
	            };
	            return str_replace.call(this, searchValue, wrappedReplaceValue);
	        }
	    };
	}

	// ECMA-262, 3rd B.2.3
	// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
	// non-normative section suggesting uniform semantics and it should be
	// normalized across all browsers
	// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
	var string_substr = StringPrototype.substr;
	var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
	defineProperties(StringPrototype, {
	    substr: function substr(start, length) {
	        var normalizedStart = start;
	        if (start < 0) {
	            normalizedStart = max(this.length + start, 0);
	        }
	        return string_substr.call(this, normalizedStart, length);
	    }
	}, hasNegativeSubstrBug);

	// ES5 15.5.4.20
	// whitespace from: http://es5.github.io/#x15.5.4.20
	var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
	    '\u2029\uFEFF';
	var zeroWidth = '\u200b';
	var wsRegexChars = '[' + ws + ']';
	var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
	var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
	var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
	defineProperties(StringPrototype, {
	    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
	    // http://perfectionkills.com/whitespace-deviations/
	    trim: function trim() {
	        if (typeof this === 'undefined' || this === null) {
	            throw new TypeError("can't convert " + this + ' to object');
	        }
	        return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
	    }
	}, hasTrimWhitespaceBug);
	var trim = call.bind(String.prototype.trim);

	var hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;
	defineProperties(StringPrototype, {
	    lastIndexOf: function lastIndexOf(searchString) {
	        if (typeof this === 'undefined' || this === null) {
	            throw new TypeError("can't convert " + this + ' to object');
	        }
	        var S = $String(this);
	        var searchStr = $String(searchString);
	        var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;
	        var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);
	        var start = min(max(pos, 0), S.length);
	        var searchLen = searchStr.length;
	        var k = start + searchLen;
	        while (k > 0) {
	            k = max(0, k - searchLen);
	            var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);
	            if (index !== -1) {
	                return k + index;
	            }
	        }
	        return -1;
	    }
	}, hasLastIndexBug);

	var originalLastIndexOf = StringPrototype.lastIndexOf;
	defineProperties(StringPrototype, {
	    lastIndexOf: function lastIndexOf(searchString) {
	        return originalLastIndexOf.apply(this, arguments);
	    }
	}, StringPrototype.lastIndexOf.length !== 1);

	// ES-5 15.1.2.2
	/* eslint-disable radix */
	if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
	/* eslint-enable radix */
	    /* global parseInt: true */
	    parseInt = (function (origParseInt) {
	        var hexRegex = /^[\-+]?0[xX]/;
	        return function parseInt(str, radix) {
	            var string = trim(str);
	            var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);
	            return origParseInt(string, defaultedRadix);
	        };
	    }(parseInt));
	}

	// https://es5.github.io/#x15.1.2.3
	if (1 / parseFloat('-0') !== -Infinity) {
	    /* global parseFloat: true */
	    parseFloat = (function (origParseFloat) {
	        return function parseFloat(string) {
	            var inputString = trim(string);
	            var result = origParseFloat(inputString);
	            return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result;
	        };
	    }(parseFloat));
	}

	if (String(new RangeError('test')) !== 'RangeError: test') {
	    var errorToStringShim = function toString() {
	        if (typeof this === 'undefined' || this === null) {
	            throw new TypeError("can't convert " + this + ' to object');
	        }
	        var name = this.name;
	        if (typeof name === 'undefined') {
	            name = 'Error';
	        } else if (typeof name !== 'string') {
	            name = $String(name);
	        }
	        var msg = this.message;
	        if (typeof msg === 'undefined') {
	            msg = '';
	        } else if (typeof msg !== 'string') {
	            msg = $String(msg);
	        }
	        if (!name) {
	            return msg;
	        }
	        if (!msg) {
	            return name;
	        }
	        return name + ': ' + msg;
	    };
	    // can't use defineProperties here because of toString enumeration issue in IE <= 8
	    Error.prototype.toString = errorToStringShim;
	}

	if (supportsDescriptors) {
	    var ensureNonEnumerable = function (obj, prop) {
	        if (isEnum(obj, prop)) {
	            var desc = Object.getOwnPropertyDescriptor(obj, prop);
	            if (desc.configurable) {
	              desc.enumerable = false;
	              Object.defineProperty(obj, prop, desc);
	            }
	        }
	    };
	    ensureNonEnumerable(Error.prototype, 'message');
	    if (Error.prototype.message !== '') {
	      Error.prototype.message = '';
	    }
	    ensureNonEnumerable(Error.prototype, 'name');
	}

	if (String(/a/mig) !== '/a/gim') {
	    var regexToString = function toString() {
	        var str = '/' + this.source + '/';
	        if (this.global) {
	            str += 'g';
	        }
	        if (this.ignoreCase) {
	            str += 'i';
	        }
	        if (this.multiline) {
	            str += 'm';
	        }
	        return str;
	    };
	    // can't use defineProperties here because of toString enumeration issue in IE <= 8
	    RegExp.prototype.toString = regexToString;
	}

	}));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * https://github.com/es-shims/es5-shim
	 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
	 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
	 */

	// vim: ts=4 sts=4 sw=4 expandtab

	// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
	;

	// UMD (Universal Module Definition)
	// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
	(function (root, factory) {
	    'use strict';

	    /* global define, exports, module */
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like enviroments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.returnExports = factory();
	  }
	}(this, function () {

	var call = Function.call;
	var prototypeOfObject = Object.prototype;
	var owns = call.bind(prototypeOfObject.hasOwnProperty);
	var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);
	var toStr = call.bind(prototypeOfObject.toString);

	// If JS engine supports accessors creating shortcuts.
	var defineGetter;
	var defineSetter;
	var lookupGetter;
	var lookupSetter;
	var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
	if (supportsAccessors) {
	    /* eslint-disable no-underscore-dangle */
	    defineGetter = call.bind(prototypeOfObject.__defineGetter__);
	    defineSetter = call.bind(prototypeOfObject.__defineSetter__);
	    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
	    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
	    /* eslint-enable no-underscore-dangle */
	}

	// ES5 15.2.3.2
	// http://es5.github.com/#x15.2.3.2
	if (!Object.getPrototypeOf) {
	    // https://github.com/es-shims/es5-shim/issues#issue/2
	    // http://ejohn.org/blog/objectgetprototypeof/
	    // recommended by fschaefer on github
	    //
	    // sure, and webreflection says ^_^
	    // ... this will nerever possibly return null
	    // ... Opera Mini breaks here with infinite loops
	    Object.getPrototypeOf = function getPrototypeOf(object) {
	        /* eslint-disable no-proto */
	        var proto = object.__proto__;
	        /* eslint-enable no-proto */
	        if (proto || proto === null) {
	            return proto;
	        } else if (toStr(object.constructor) === '[object Function]') {
	            return object.constructor.prototype;
	        } else if (object instanceof Object) {
	          return prototypeOfObject;
	        } else {
	          // Correctly return null for Objects created with `Object.create(null)`
	          // (shammed or native) or `{ __proto__: null}`.  Also returns null for
	          // cross-realm objects on browsers that lack `__proto__` support (like
	          // IE <11), but that's the best we can do.
	          return null;
	        }
	    };
	}

	// ES5 15.2.3.3
	// http://es5.github.com/#x15.2.3.3

	var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {
	    try {
	        object.sentinel = 0;
	        return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;
	    } catch (exception) {
	        return false;
	    }
	};

	// check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
	if (Object.defineProperty) {
	    var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});
	    var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||
	    doesGetOwnPropertyDescriptorWork(document.createElement('div'));
	    if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {
	        var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;
	    }
	}

	if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {
	    var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';

	    /* eslint-disable no-proto */
	    Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
	        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {
	            throw new TypeError(ERR_NON_OBJECT + object);
	        }

	        // make a valiant attempt to use the real getOwnPropertyDescriptor
	        // for I8's DOM elements.
	        if (getOwnPropertyDescriptorFallback) {
	            try {
	                return getOwnPropertyDescriptorFallback.call(Object, object, property);
	            } catch (exception) {
	                // try the shim if the real one doesn't work
	            }
	        }

	        var descriptor;

	        // If object does not owns property return undefined immediately.
	        if (!owns(object, property)) {
	            return descriptor;
	        }

	        // If object has a property then it's for sure `configurable`, and
	        // probably `enumerable`. Detect enumerability though.
	        descriptor = {
	            enumerable: isEnumerable(object, property),
	            configurable: true
	        };

	        // If JS engine supports accessor properties then property may be a
	        // getter or setter.
	        if (supportsAccessors) {
	            // Unfortunately `__lookupGetter__` will return a getter even
	            // if object has own non getter property along with a same named
	            // inherited getter. To avoid misbehavior we temporary remove
	            // `__proto__` so that `__lookupGetter__` will return getter only
	            // if it's owned by an object.
	            var prototype = object.__proto__;
	            var notPrototypeOfObject = object !== prototypeOfObject;
	            // avoid recursion problem, breaking in Opera Mini when
	            // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
	            // or any other Object.prototype accessor
	            if (notPrototypeOfObject) {
	                object.__proto__ = prototypeOfObject;
	            }

	            var getter = lookupGetter(object, property);
	            var setter = lookupSetter(object, property);

	            if (notPrototypeOfObject) {
	                // Once we have getter and setter we can put values back.
	                object.__proto__ = prototype;
	            }

	            if (getter || setter) {
	                if (getter) {
	                    descriptor.get = getter;
	                }
	                if (setter) {
	                    descriptor.set = setter;
	                }
	                // If it was accessor property we're done and return here
	                // in order to avoid adding `value` to the descriptor.
	                return descriptor;
	            }
	        }

	        // If we got this far we know that object has an own property that is
	        // not an accessor so we set it as a value and return descriptor.
	        descriptor.value = object[property];
	        descriptor.writable = true;
	        return descriptor;
	    };
	    /* eslint-enable no-proto */
	}

	// ES5 15.2.3.4
	// http://es5.github.com/#x15.2.3.4
	if (!Object.getOwnPropertyNames) {
	    Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
	        return Object.keys(object);
	    };
	}

	// ES5 15.2.3.5
	// http://es5.github.com/#x15.2.3.5
	if (!Object.create) {

	    // Contributed by Brandon Benvie, October, 2012
	    var createEmpty;
	    var supportsProto = !({ __proto__: null } instanceof Object);
	                        // the following produces false positives
	                        // in Opera Mini => not a reliable check
	                        // Object.prototype.__proto__ === null

	    // Check for document.domain and active x support
	    // No need to use active x approach when document.domain is not set
	    // see https://github.com/es-shims/es5-shim/issues/150
	    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	    /* global ActiveXObject */
	    var shouldUseActiveX = function shouldUseActiveX() {
	        // return early if document.domain not set
	        if (!document.domain) {
	            return false;
	        }

	        try {
	            return !!new ActiveXObject('htmlfile');
	        } catch (exception) {
	            return false;
	        }
	    };

	    // This supports IE8 when document.domain is used
	    // see https://github.com/es-shims/es5-shim/issues/150
	    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	    var getEmptyViaActiveX = function getEmptyViaActiveX() {
	        var empty;
	        var xDoc;

	        xDoc = new ActiveXObject('htmlfile');

			var script = 'script';
	        xDoc.write('<' + script + '></' + script + '>');
	        xDoc.close();

	        empty = xDoc.parentWindow.Object.prototype;
	        xDoc = null;

	        return empty;
	    };

	    // The original implementation using an iframe
	    // before the activex approach was added
	    // see https://github.com/es-shims/es5-shim/issues/150
	    var getEmptyViaIFrame = function getEmptyViaIFrame() {
	        var iframe = document.createElement('iframe');
	        var parent = document.body || document.documentElement;
	        var empty;

	        iframe.style.display = 'none';
	        parent.appendChild(iframe);
	        /* eslint-disable no-script-url */
	        iframe.src = 'javascript:';
	        /* eslint-enable no-script-url */

	        empty = iframe.contentWindow.Object.prototype;
	        parent.removeChild(iframe);
	        iframe = null;

	        return empty;
	    };

	    /* global document */
	    if (supportsProto || typeof document === 'undefined') {
	        createEmpty = function () {
	            return { __proto__: null };
	        };
	    } else {
	        // In old IE __proto__ can't be used to manually set `null`, nor does
	        // any other method exist to make an object that inherits from nothing,
	        // aside from Object.prototype itself. Instead, create a new global
	        // object and *steal* its Object.prototype and strip it bare. This is
	        // used as the prototype to create nullary objects.
	        createEmpty = function () {
	            // Determine which approach to use
	            // see https://github.com/es-shims/es5-shim/issues/150
	            var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();

	            delete empty.constructor;
	            delete empty.hasOwnProperty;
	            delete empty.propertyIsEnumerable;
	            delete empty.isPrototypeOf;
	            delete empty.toLocaleString;
	            delete empty.toString;
	            delete empty.valueOf;

	            var Empty = function Empty() {};
	            Empty.prototype = empty;
	            // short-circuit future calls
	            createEmpty = function () {
	                return new Empty();
	            };
	            return new Empty();
	        };
	    }

	    Object.create = function create(prototype, properties) {

	        var object;
	        var Type = function Type() {}; // An empty constructor.

	        if (prototype === null) {
	            object = createEmpty();
	        } else {
	            if (typeof prototype !== 'object' && typeof prototype !== 'function') {
	                // In the native implementation `parent` can be `null`
	                // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)
	                // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`
	                // like they are in modern browsers. Using `Object.create` on DOM elements
	                // is...err...probably inappropriate, but the native version allows for it.
	                throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome
	            }
	            Type.prototype = prototype;
	            object = new Type();
	            // IE has no built-in implementation of `Object.getPrototypeOf`
	            // neither `__proto__`, but this manually setting `__proto__` will
	            // guarantee that `Object.getPrototypeOf` will work as expected with
	            // objects created using `Object.create`
	            /* eslint-disable no-proto */
	            object.__proto__ = prototype;
	            /* eslint-enable no-proto */
	        }

	        if (properties !== void 0) {
	            Object.defineProperties(object, properties);
	        }

	        return object;
	    };
	}

	// ES5 15.2.3.6
	// http://es5.github.com/#x15.2.3.6

	// Patch for WebKit and IE8 standard mode
	// Designed by hax <hax.github.com>
	// related issue: https://github.com/es-shims/es5-shim/issues#issue/5
	// IE8 Reference:
	//     http://msdn.microsoft.com/en-us/library/dd282900.aspx
	//     http://msdn.microsoft.com/en-us/library/dd229916.aspx
	// WebKit Bugs:
	//     https://bugs.webkit.org/show_bug.cgi?id=36423

	var doesDefinePropertyWork = function doesDefinePropertyWork(object) {
	    try {
	        Object.defineProperty(object, 'sentinel', {});
	        return 'sentinel' in object;
	    } catch (exception) {
	        return false;
	    }
	};

	// check whether defineProperty works if it's given. Otherwise,
	// shim partially.
	if (Object.defineProperty) {
	    var definePropertyWorksOnObject = doesDefinePropertyWork({});
	    var definePropertyWorksOnDom = typeof document === 'undefined' ||
	        doesDefinePropertyWork(document.createElement('div'));
	    if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
	        var definePropertyFallback = Object.defineProperty,
	            definePropertiesFallback = Object.defineProperties;
	    }
	}

	if (!Object.defineProperty || definePropertyFallback) {
	    var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
	    var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
	    var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';

	    Object.defineProperty = function defineProperty(object, property, descriptor) {
	        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {
	            throw new TypeError(ERR_NON_OBJECT_TARGET + object);
	        }
	        if ((typeof descriptor !== 'object' && typeof descriptor !== 'function') || descriptor === null) {
	            throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
	        }
	        // make a valiant attempt to use the real defineProperty
	        // for I8's DOM elements.
	        if (definePropertyFallback) {
	            try {
	                return definePropertyFallback.call(Object, object, property, descriptor);
	            } catch (exception) {
	                // try the shim if the real one doesn't work
	            }
	        }

	        // If it's a data property.
	        if ('value' in descriptor) {
	            // fail silently if 'writable', 'enumerable', or 'configurable'
	            // are requested but not supported
	            /*
	            // alternate approach:
	            if ( // can't implement these features; allow false but not true
	                ('writable' in descriptor && !descriptor.writable) ||
	                ('enumerable' in descriptor && !descriptor.enumerable) ||
	                ('configurable' in descriptor && !descriptor.configurable)
	            ))
	                throw new RangeError(
	                    'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
	                );
	            */

	            if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
	                // As accessors are supported only on engines implementing
	                // `__proto__` we can safely override `__proto__` while defining
	                // a property to make sure that we don't hit an inherited
	                // accessor.
	                /* eslint-disable no-proto */
	                var prototype = object.__proto__;
	                object.__proto__ = prototypeOfObject;
	                // Deleting a property anyway since getter / setter may be
	                // defined on object itself.
	                delete object[property];
	                object[property] = descriptor.value;
	                // Setting original `__proto__` back now.
	                object.__proto__ = prototype;
	                /* eslint-enable no-proto */
	            } else {
	                object[property] = descriptor.value;
	            }
	        } else {
	            if (!supportsAccessors && (('get' in descriptor) || ('set' in descriptor))) {
	                throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
	            }
	            // If we got that far then getters and setters can be defined !!
	            if ('get' in descriptor) {
	                defineGetter(object, property, descriptor.get);
	            }
	            if ('set' in descriptor) {
	                defineSetter(object, property, descriptor.set);
	            }
	        }
	        return object;
	    };
	}

	// ES5 15.2.3.7
	// http://es5.github.com/#x15.2.3.7
	if (!Object.defineProperties || definePropertiesFallback) {
	    Object.defineProperties = function defineProperties(object, properties) {
	        // make a valiant attempt to use the real defineProperties
	        if (definePropertiesFallback) {
	            try {
	                return definePropertiesFallback.call(Object, object, properties);
	            } catch (exception) {
	                // try the shim if the real one doesn't work
	            }
	        }

	        Object.keys(properties).forEach(function (property) {
	            if (property !== '__proto__') {
	                Object.defineProperty(object, property, properties[property]);
	            }
	        });
	        return object;
	    };
	}

	// ES5 15.2.3.8
	// http://es5.github.com/#x15.2.3.8
	if (!Object.seal) {
	    Object.seal = function seal(object) {
	        if (Object(object) !== object) {
	            throw new TypeError('Object.seal can only be called on Objects.');
	        }
	        // this is misleading and breaks feature-detection, but
	        // allows "securable" code to "gracefully" degrade to working
	        // but insecure code.
	        return object;
	    };
	}

	// ES5 15.2.3.9
	// http://es5.github.com/#x15.2.3.9
	if (!Object.freeze) {
	    Object.freeze = function freeze(object) {
	        if (Object(object) !== object) {
	            throw new TypeError('Object.freeze can only be called on Objects.');
	        }
	        // this is misleading and breaks feature-detection, but
	        // allows "securable" code to "gracefully" degrade to working
	        // but insecure code.
	        return object;
	    };
	}

	// detect a Rhino bug and patch it
	try {
	    Object.freeze(function () {});
	} catch (exception) {
	    Object.freeze = (function (freezeObject) {
	        return function freeze(object) {
	            if (typeof object === 'function') {
	                return object;
	            } else {
	                return freezeObject(object);
	            }
	        };
	    }(Object.freeze));
	}

	// ES5 15.2.3.10
	// http://es5.github.com/#x15.2.3.10
	if (!Object.preventExtensions) {
	    Object.preventExtensions = function preventExtensions(object) {
	        if (Object(object) !== object) {
	            throw new TypeError('Object.preventExtensions can only be called on Objects.');
	        }
	        // this is misleading and breaks feature-detection, but
	        // allows "securable" code to "gracefully" degrade to working
	        // but insecure code.
	        return object;
	    };
	}

	// ES5 15.2.3.11
	// http://es5.github.com/#x15.2.3.11
	if (!Object.isSealed) {
	    Object.isSealed = function isSealed(object) {
	        if (Object(object) !== object) {
	            throw new TypeError('Object.isSealed can only be called on Objects.');
	        }
	        return false;
	    };
	}

	// ES5 15.2.3.12
	// http://es5.github.com/#x15.2.3.12
	if (!Object.isFrozen) {
	    Object.isFrozen = function isFrozen(object) {
	        if (Object(object) !== object) {
	            throw new TypeError('Object.isFrozen can only be called on Objects.');
	        }
	        return false;
	    };
	}

	// ES5 15.2.3.13
	// http://es5.github.com/#x15.2.3.13
	if (!Object.isExtensible) {
	    Object.isExtensible = function isExtensible(object) {
	        // 1. If Type(O) is not Object throw a TypeError exception.
	        if (Object(object) !== object) {
	            throw new TypeError('Object.isExtensible can only be called on Objects.');
	        }
	        // 2. Return the Boolean value of the [[Extensible]] internal property of O.
	        var name = '';
	        while (owns(object, name)) {
	            name += '?';
	        }
	        object[name] = true;
	        var returnValue = owns(object, name);
	        delete object[name];
	        return returnValue;
	    };
	}

	}));


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	"use strict";

	var LinkedStateMixin = __webpack_require__(6);
	var React = __webpack_require__(8);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(152);
	var ReactCSSTransitionGroup = __webpack_require__(153);
	var ReactTransitionGroup = __webpack_require__(154);

	var cx = __webpack_require__(160);
	var cloneWithProps = __webpack_require__(156);
	var update = __webpack_require__(161);

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  update: update
	};

	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(144);
	  React.addons.TestUtils = __webpack_require__(162);
	}

	module.exports = React;


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 5 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	"use strict";

	var ReactLink = __webpack_require__(7);
	var ReactStateSetters = __webpack_require__(151);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};

	module.exports = LinkedStateMixin;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	"use strict";

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(8);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule React
	 */

	"use strict";

	var DOMPropertyOperations = __webpack_require__(9);
	var EventPluginUtils = __webpack_require__(17);
	var ReactChildren = __webpack_require__(20);
	var ReactComponent = __webpack_require__(53);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactContext = __webpack_require__(45);
	var ReactCurrentOwner = __webpack_require__(43);
	var ReactDescriptor = __webpack_require__(44);
	var ReactDOM = __webpack_require__(68);
	var ReactDOMComponent = __webpack_require__(69);
	var ReactDefaultInjection = __webpack_require__(79);
	var ReactInstanceHandles = __webpack_require__(23);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(75);
	var ReactPerf = __webpack_require__(46);
	var ReactPropTypes = __webpack_require__(124);
	var ReactServerRendering = __webpack_require__(148);
	var ReactTextComponent = __webpack_require__(25);

	var onlyChild = __webpack_require__(150);
	var warning = __webpack_require__(14);

	ReactDefaultInjection.inject();

	// Specifying arguments isn't necessary since we just use apply anyway, but it
	// makes it clear for those actually consuming this API.
	function createDescriptor(type, props, children) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  return type.apply(null, args);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var _warnedForDeprecation = false;
	}

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactCompositeComponent.createClass,
	  createDescriptor: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        _warnedForDeprecation,
	        'React.createDescriptor is deprecated and will be removed in the ' +
	        'next version of React. Use React.createElement instead.'
	      ) : null);
	      _warnedForDeprecation = true;
	    }
	    return createDescriptor.apply(this, arguments);
	  },
	  createElement: createDescriptor,
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  renderComponent: ReactPerf.measure(
	    'React',
	    'renderComponent',
	    ReactMount.renderComponent
	  ),
	  renderComponentToString: ReactServerRendering.renderComponentToString,
	  renderComponentToStaticMarkup:
	    ReactServerRendering.renderComponentToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidClass: ReactDescriptor.isValidFactory,
	  isValidComponent: ReactDescriptor.isValidDescriptor,
	  withContext: ReactContext.withContext,
	  __internals: {
	    Component: ReactComponent,
	    CurrentOwner: ReactCurrentOwner,
	    DOMComponent: ReactDOMComponent,
	    DOMPropertyOperations: DOMPropertyOperations,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    MultiChild: ReactMultiChild,
	    TextComponent: ReactTextComponent
	  }
	};

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(35);
	  if (ExecutionEnvironment.canUseDOM &&
	      window.top === window.self &&
	      navigator.userAgent.indexOf('Chrome') > -1) {
	    console.debug(
	      'Download the React DevTools for a better development experience: ' +
	      'http://fb.me/react-devtools'
	    );

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i in expectedFeatures) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'http://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	// Version exists only in the open-source version of React, not in Facebook's
	// internal version.
	React.version = '0.11.2';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	"use strict";

	var DOMProperty = __webpack_require__(10);

	var escapeTextForBrowser = __webpack_require__(12);
	var memoizeStringOnly = __webpack_require__(13);
	var warning = __webpack_require__(14);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
	  return escapeTextForBrowser(name) + '="';
	});

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
	      escapeTextForBrowser(id) + '"';
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return escapeTextForBrowser(attributeName);
	      }
	      return processAttributeNameAndPrefix(attributeName) +
	        escapeTextForBrowser(value) + '"';
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return processAttributeNameAndPrefix(name) +
	        escapeTextForBrowser(value) + '"';
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        if (!DOMProperty.hasSideEffects[name] || node[propName] !== value) {
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	"use strict";

	var invariant = __webpack_require__(11);

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;
	      DOMProperty.mustUseProperty[propName] =
	        propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;
	      DOMProperty.hasSideEffects[propName] =
	        propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;
	      DOMProperty.hasBooleanValue[propName] =
	        propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;
	      DOMProperty.hasNumericValue[propName] =
	        propConfig & DOMPropertyInjection.HAS_NUMERIC_VALUE;
	      DOMProperty.hasPositiveNumericValue[propName] =
	        propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        propConfig & DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE;

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule escapeTextForBrowser
	 * @typechecks static-only
	 */

	"use strict";

	var ESCAPE_LOOKUP = {
	  "&": "&amp;",
	  ">": "&gt;",
	  "<": "&lt;",
	  "\"": "&quot;",
	  "'": "&#x27;"
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextForBrowser;


/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	"use strict";

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (cache.hasOwnProperty(string)) {
	      return cache[string];
	    } else {
	      return cache[string] = callback.call(this, string);
	    }
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(15);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {var args=Array.prototype.slice.call(arguments,2);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule emptyFunction
	 */

	var copyProperties = __webpack_require__(16);

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	copyProperties(emptyFunction, {
	  thatReturns: makeEmptyFunction,
	  thatReturnsFalse: makeEmptyFunction(false),
	  thatReturnsTrue: makeEmptyFunction(true),
	  thatReturnsNull: makeEmptyFunction(null),
	  thatReturnsThis: function() { return this; },
	  thatReturnsArgument: function(arg) { return arg; }
	});

	module.exports = emptyFunction;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule copyProperties
	 */

	/**
	 * Copy properties from one or more objects (up to 5) into the first object.
	 * This is a shallow copy. It mutates the first object and also returns it.
	 *
	 * NOTE: `arguments` has a very significant performance penalty, which is why
	 * we don't support unlimited arguments.
	 */
	function copyProperties(obj, a, b, c, d, e, f) {
	  obj = obj || {};

	  if ("production" !== process.env.NODE_ENV) {
	    if (f) {
	      throw new Error('Too many arguments passed to copyProperties');
	    }
	  }

	  var args = [a, b, c, d, e];
	  var ii = 0, v;
	  while (args[ii]) {
	    v = args[ii++];
	    for (var k in v) {
	      obj[k] = v[k];
	    }

	    // IE ignores toString in object iteration.. See:
	    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html
	    if (v.hasOwnProperty && v.hasOwnProperty('toString') &&
	        (typeof v.toString != 'undefined') && (obj.toString !== v.toString)) {
	      obj.toString = v.toString;
	    }
	  }

	  return obj;
	}

	module.exports = copyProperties;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventPluginUtils
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);

	var invariant = __webpack_require__(11);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, executeDispatch) {
	  forEachEventDispatch(event, executeDispatch);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventConstants
	 */

	"use strict";

	var keyMirror = __webpack_require__(19);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactChildren
	 */

	"use strict";

	var PooledClass = __webpack_require__(21);

	var traverseAllChildren = __webpack_require__(22);
	var warning = __webpack_require__(14);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  ("production" !== process.env.NODE_ENV ? warning(
	    keyUnique,
	    'ReactChildren.map(...): Encountered two children with the same key, ' +
	    '`%s`. Child keys must be unique; when two children share a key, only ' +
	    'the first child will be used.',
	    name
	  ) : null);

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return mapResult;
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule PooledClass
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule traverseAllChildren
	 */

	"use strict";

	var ReactInstanceHandles = __webpack_require__(23);
	var ReactTextComponent = __webpack_require__(25);

	var invariant = __webpack_require__(11);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that:
	 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
	 * 2. it('should fail when supplied duplicate key', function() {
	 * 3. That a single child and an array with one item have the same key pattern.
	 * });
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.props && component.props.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.props.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	var traverseAllChildrenImpl =
	  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
	    var subtreeCount = 0;  // Count of children found in the current subtree.
	    if (Array.isArray(children)) {
	      for (var i = 0; i < children.length; i++) {
	        var child = children[i];
	        var nextName = (
	          nameSoFar +
	          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
	          getComponentKey(child, i)
	        );
	        var nextIndex = indexSoFar + subtreeCount;
	        subtreeCount += traverseAllChildrenImpl(
	          child,
	          nextName,
	          nextIndex,
	          callback,
	          traverseContext
	        );
	      }
	    } else {
	      var type = typeof children;
	      var isOnlyChild = nameSoFar === '';
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows
	      var storageName =
	        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
	      if (children == null || type === 'boolean') {
	        // All of the above are perceived as null.
	        callback(traverseContext, null, storageName, indexSoFar);
	        subtreeCount = 1;
	      } else if (children.type && children.type.prototype &&
	                 children.type.prototype.mountComponentIntoNode) {
	        callback(traverseContext, children, storageName, indexSoFar);
	        subtreeCount = 1;
	      } else {
	        if (type === 'object') {
	          ("production" !== process.env.NODE_ENV ? invariant(
	            !children || children.nodeType !== 1,
	            'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	            'elements are not valid children of React components.'
	          ) : invariant(!children || children.nodeType !== 1));
	          for (var key in children) {
	            if (children.hasOwnProperty(key)) {
	              subtreeCount += traverseAllChildrenImpl(
	                children[key],
	                (
	                  nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
	                  wrapUserProvidedKey(key) + SUBSEPARATOR +
	                  getComponentKey(children[key], 0)
	                ),
	                indexSoFar + subtreeCount,
	                callback,
	                traverseContext
	              );
	            }
	          }
	        } else if (type === 'string') {
	          var normalizedText = ReactTextComponent(children);
	          callback(traverseContext, normalizedText, storageName, indexSoFar);
	          subtreeCount += 1;
	        } else if (type === 'number') {
	          var normalizedNumber = ReactTextComponent('' + children);
	          callback(traverseContext, normalizedNumber, storageName, indexSoFar);
	          subtreeCount += 1;
	        }
	      }
	    }
	    return subtreeCount;
	  };

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	"use strict";

	var ReactRootIndex = __webpack_require__(24);

	var invariant = __webpack_require__(11);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  for (var i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	"use strict";

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactTextComponent
	 * @typechecks static-only
	 */

	"use strict";

	var DOMPropertyOperations = __webpack_require__(9);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactComponent = __webpack_require__(53);
	var ReactDescriptor = __webpack_require__(44);

	var escapeTextForBrowser = __webpack_require__(12);
	var mixInto = __webpack_require__(58);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactTextComponent = function(descriptor) {
	  this.construct(descriptor);
	};

	mixInto(ReactTextComponent, ReactComponent.Mixin);
	mixInto(ReactTextComponent, ReactBrowserComponentMixin);
	mixInto(ReactTextComponent, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, mountDepth) {
	    ReactComponent.Mixin.mountComponent.call(
	      this,
	      rootID,
	      transaction,
	      mountDepth
	    );

	    var escapedText = escapeTextForBrowser(this.props);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {object} nextComponent Contains the next text content.
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextComponent, transaction) {
	    var nextProps = nextComponent.props;
	    if (nextProps !== this.props) {
	      this.props = nextProps;
	      ReactComponent.BackendIDOperations.updateTextContentByID(
	        this._rootNodeID,
	        nextProps
	      );
	    }
	  }

	});

	module.exports = ReactDescriptor.createFactory(ReactTextComponent);


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	"use strict";

	var ReactEmptyComponent = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);

	var invariant = __webpack_require__(11);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isMounted(),
	      'getDOMNode(): A component must be mounted to have a DOM node.'
	    ) : invariant(this.isMounted()));
	    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
	      return null;
	    }
	    return ReactMount.getNode(this._rootNodeID);
	  }
	};

	module.exports = ReactBrowserComponentMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIdsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = emptyComponent;
	  }
	};

	/**
	 * @return {ReactComponent} component The injected empty component.
	 */
	function getEmptyComponent() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIdsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIdsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return nullComponentIdsRegistry[id];
	}

	var ReactEmptyComponent = {
	  deregisterNullComponentID: deregisterNullComponentID,
	  getEmptyComponent: getEmptyComponent,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactMount
	 */

	"use strict";

	var DOMProperty = __webpack_require__(10);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(43);
	var ReactDescriptor = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(23);
	var ReactPerf = __webpack_require__(46);

	var containsNode = __webpack_require__(47);
	var getReactRootElementInContainer = __webpack_require__(50);
	var instantiateReactComponent = __webpack_require__(51);
	var invariant = __webpack_require__(11);
	var shouldUpdateReactComponent = __webpack_require__(52);
	var warning = __webpack_require__(14);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounting is the process of initializing a React component by creatings its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.renderComponent(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextComponent,
	      container,
	      callback) {
	    var nextProps = nextComponent.props;
	    ReactMount.scrollMonitor(container, function() {
	      prevComponent.replaceProps(nextProps, callback);
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        container.nodeType === ELEMENT_NODE_TYPE ||
	        container.nodeType === DOC_NODE_TYPE
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      container.nodeType === ELEMENT_NODE_TYPE ||
	      container.nodeType === DOC_NODE_TYPE
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: ReactPerf.measure(
	    'ReactMount',
	    '_renderNewRootComponent',
	    function(
	        nextComponent,
	        container,
	        shouldReuseMarkup) {
	      // Various parts of our code (such as ReactCompositeComponent's
	      // _renderValidatedComponent) assume that calls to render aren't nested;
	      // verify that that's the case.
	      ("production" !== process.env.NODE_ENV ? warning(
	        ReactCurrentOwner.current == null,
	        '_renderNewRootComponent(): Render methods should be a pure function ' +
	        'of props and state; triggering nested component updates from ' +
	        'render is not allowed. If necessary, trigger nested updates in ' +
	        'componentDidUpdate.'
	      ) : null);

	      var componentInstance = instantiateReactComponent(nextComponent);
	      var reactRootID = ReactMount._registerComponent(
	        componentInstance,
	        container
	      );
	      componentInstance.mountComponentIntoNode(
	        reactRootID,
	        container,
	        shouldReuseMarkup
	      );

	      if ("production" !== process.env.NODE_ENV) {
	        // Record the root element in case it later gets transplanted.
	        rootElementsByReactRootID[reactRootID] =
	          getReactRootElementInContainer(container);
	      }

	      return componentInstance;
	    }
	  ),

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactDescriptor} nextDescriptor Component descriptor to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderComponent: function(nextDescriptor, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactDescriptor.isValidDescriptor(nextDescriptor),
	      'renderComponent(): Invalid component descriptor.%s',
	      (
	        ReactDescriptor.isValidFactory(nextDescriptor) ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it first by calling it with props.' :
	        // Check if it quacks like a descriptor
	        typeof nextDescriptor.props !== "undefined" ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactDescriptor.isValidDescriptor(nextDescriptor)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevDescriptor = prevComponent._descriptor;
	      if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextDescriptor,
	          container,
	          callback
	        );
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextDescriptor,
	      container,
	      shouldReuseMarkup
	    );
	    callback && callback.call(component);
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    return ReactMount.renderComponent(constructor(props), container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    instance.unmountComponent();

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          console.warn(
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          );
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting <p> ' +
	      'or <a> tags, or using non-SVG elements in an <svg> parent. Try ' +
	      'inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },


	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  purgeID: purgeID
	};

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPluginHub = __webpack_require__(30);
	var EventPluginRegistry = __webpack_require__(31);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ViewportMetrics = __webpack_require__(38);

	var isEventSupported = __webpack_require__(34);
	var merge = __webpack_require__(40);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = merge(ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      ReactBrowserEventEmitter.ReactEventListener &&
	      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            isListening.hasOwnProperty(dependency) &&
	            isListening[dependency]
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function(){
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventPluginHub
	 */

	"use strict";

	var EventPluginRegistry = __webpack_require__(31);
	var EventPluginUtils = __webpack_require__(17);

	var accumulate = __webpack_require__(32);
	var forEachAccumulated = __webpack_require__(33);
	var invariant = __webpack_require__(11);
	var isEventSupported = __webpack_require__(34);
	var monitorCodeUse = __webpack_require__(36);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var invalid = !InstanceHandle||
	    !InstanceHandle.traverseTwoPhase ||
	    !InstanceHandle.traverseEnterLeave;
	  if (invalid) {
	    throw new Error('InstanceHandle not injected before use!');
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    if ("production" !== process.env.NODE_ENV) {
	      // IE8 has no API for event capturing and the `onScroll` event doesn't
	      // bubble.
	      if (registrationName === 'onScroll' &&
	          !isEventSupported('scroll', true)) {
	        monitorCodeUse('react_no_scroll_event');
	        console.warn('This browser doesn\'t support the `onScroll` event');
	      }
	    }
	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulate(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulate(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule accumulate
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * Accumulates items that must not be null or undefined.
	 *
	 * This is used to conserve memory by avoiding array allocations.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	function accumulate(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulate(...): Accumulated items must be not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  } else {
	    // Both are not empty. Warning: Never call x.concat(y) when you are not
	    // certain that x is an Array (x could be a string with concat method).
	    var currentIsArray = Array.isArray(current);
	    var nextIsArray = Array.isArray(next);
	    if (currentIsArray) {
	      return current.concat(next);
	    } else {
	      if (nextIsArray) {
	        return [current].concat(next);
	      } else {
	        return [current, next];
	      }
	    }
	  }
	}

	module.exports = accumulate;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 33 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule forEachAccumulated
	 */

	"use strict";

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule isEventSupported
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(35);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  typeof window !== 'undefined' &&
	  window.document &&
	  window.document.createElement
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule monitorCodeUse
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * Provides open-source compatible instrumentation for monitoring certain API
	 * uses before we're ready to issue a warning or refactor. It accepts an event
	 * name which may only contain the characters [a-z0-9_] and an optional data
	 * object with further information.
	 */

	function monitorCodeUse(eventName, data) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    eventName && !/[^a-z0-9_]/.test(eventName),
	    'You must provide an eventName using only the characters [a-z0-9_]'
	  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
	}

	module.exports = monitorCodeUse;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	"use strict";

	var EventPluginHub = __webpack_require__(30);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ViewportMetrics
	 */

	"use strict";

	var getUnboundedScrollPosition = __webpack_require__(39);

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function() {
	    var scrollPosition = getUnboundedScrollPosition(window);
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule merge
	 */

	"use strict";

	var mergeInto = __webpack_require__(41);

	/**
	 * Shallow merges two structures into a return value, without mutating either.
	 *
	 * @param {?object} one Optional object with properties to merge from.
	 * @param {?object} two Optional object with properties to merge from.
	 * @return {object} The shallow extension of one by two.
	 */
	var merge = function(one, two) {
	  var result = {};
	  mergeInto(result, one);
	  mergeInto(result, two);
	  return result;
	};

	module.exports = merge;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule mergeInto
	 * @typechecks static-only
	 */

	"use strict";

	var mergeHelpers = __webpack_require__(42);

	var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
	var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

	/**
	 * Shallow merges two structures by mutating the first parameter.
	 *
	 * @param {object|function} one Object to be merged into.
	 * @param {?object} two Optional object with properties to merge from.
	 */
	function mergeInto(one, two) {
	  checkMergeIntoObjectArg(one);
	  if (two != null) {
	    checkMergeObjectArg(two);
	    for (var key in two) {
	      if (!two.hasOwnProperty(key)) {
	        continue;
	      }
	      one[key] = two[key];
	    }
	  }
	}

	module.exports = mergeInto;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule mergeHelpers
	 *
	 * requiresPolyfills: Array.isArray
	 */

	"use strict";

	var invariant = __webpack_require__(11);
	var keyMirror = __webpack_require__(19);

	/**
	 * Maximum number of levels to traverse. Will catch circular structures.
	 * @const
	 */
	var MAX_MERGE_DEPTH = 36;

	/**
	 * We won't worry about edge cases like new String('x') or new Boolean(true).
	 * Functions are considered terminals, and arrays are not.
	 * @param {*} o The item/object/value to test.
	 * @return {boolean} true iff the argument is a terminal.
	 */
	var isTerminal = function(o) {
	  return typeof o !== 'object' || o === null;
	};

	var mergeHelpers = {

	  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

	  isTerminal: isTerminal,

	  /**
	   * Converts null/undefined values into empty object.
	   *
	   * @param {?Object=} arg Argument to be normalized (nullable optional)
	   * @return {!Object}
	   */
	  normalizeMergeArg: function(arg) {
	    return arg === undefined || arg === null ? {} : arg;
	  },

	  /**
	   * If merging Arrays, a merge strategy *must* be supplied. If not, it is
	   * likely the caller's fault. If this function is ever called with anything
	   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.
	   *
	   * @param {*} one Array to merge into.
	   * @param {*} two Array to merge from.
	   */
	  checkMergeArrayArgs: function(one, two) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(one) && Array.isArray(two),
	      'Tried to merge arrays, instead got %s and %s.',
	      one,
	      two
	    ) : invariant(Array.isArray(one) && Array.isArray(two)));
	  },

	  /**
	   * @param {*} one Object to merge into.
	   * @param {*} two Object to merge from.
	   */
	  checkMergeObjectArgs: function(one, two) {
	    mergeHelpers.checkMergeObjectArg(one);
	    mergeHelpers.checkMergeObjectArg(two);
	  },

	  /**
	   * @param {*} arg
	   */
	  checkMergeObjectArg: function(arg) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isTerminal(arg) && !Array.isArray(arg),
	      'Tried to merge an object, instead got %s.',
	      arg
	    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));
	  },

	  /**
	   * @param {*} arg
	   */
	  checkMergeIntoObjectArg: function(arg) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),
	      'Tried to merge into an object, instead got %s.',
	      arg
	    ) : invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg)));
	  },

	  /**
	   * Checks that a merge was not given a circular object or an object that had
	   * too great of depth.
	   *
	   * @param {number} Level of recursion to validate against maximum.
	   */
	  checkMergeLevel: function(level) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      level < MAX_MERGE_DEPTH,
	      'Maximum deep merge depth exceeded. You may be attempting to merge ' +
	      'circular structures in an unsupported way.'
	    ) : invariant(level < MAX_MERGE_DEPTH));
	  },

	  /**
	   * Checks that the supplied merge strategy is valid.
	   *
	   * @param {string} Array merge strategy.
	   */
	  checkArrayStrategy: function(strategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,
	      'You must provide an array strategy to deep merge functions to ' +
	      'instruct the deep merge how to resolve merging two arrays.'
	    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));
	  },

	  /**
	   * Set of possible behaviors of merge algorithms when encountering two Arrays
	   * that must be merged together.
	   * - `clobber`: The left `Array` is ignored.
	   * - `indexByIndex`: The result is achieved by recursively deep merging at
	   *   each index. (not yet supported.)
	   */
	  ArrayStrategies: keyMirror({
	    Clobber: true,
	    IndexByIndex: true
	  })

	};

	module.exports = mergeHelpers;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	"use strict";

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDescriptor
	 */

	"use strict";

	var ReactContext = __webpack_require__(45);
	var ReactCurrentOwner = __webpack_require__(43);

	var merge = __webpack_require__(40);
	var warning = __webpack_require__(14);

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the ' + key + ' property of the component. ' +
	        'Mutate the existing props object instead.'
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} descriptor
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Transfer static properties from the source to the target. Functions are
	 * rebound to have this reflect the original source.
	 */
	function proxyStaticMethods(target, source) {
	  if (typeof source !== 'function') {
	    return;
	  }
	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      var value = source[key];
	      if (typeof value === 'function') {
	        var bound = value.bind(source);
	        // Copy any properties defined on the function, such as `isRequired` on
	        // a PropTypes validator. (mergeInto refuses to work on functions.)
	        for (var k in value) {
	          if (value.hasOwnProperty(k)) {
	            bound[k] = value[k];
	          }
	        }
	        target[key] = bound;
	      } else {
	        target[key] = value;
	      }
	    }
	  }
	}

	/**
	 * Base constructor for all React descriptors. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @internal
	 */
	var ReactDescriptor = function() {};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactDescriptor.prototype);
	}

	ReactDescriptor.createFactory = function(type) {

	  var descriptorPrototype = Object.create(ReactDescriptor.prototype);

	  var factory = function(props, children) {
	    // For consistency we currently allocate a new object for every descriptor.
	    // This protects the descriptor from being mutated by the original props
	    // object being mutated. It also protects the original props object from
	    // being mutated by children arguments and default props. This behavior
	    // comes with a performance cost and could be deprecated in the future.
	    // It could also be optimized with a smarter JSX transform.
	    if (props == null) {
	      props = {};
	    } else if (typeof props === 'object') {
	      props = merge(props);
	    }

	    // Children can be more than one argument, and those are transferred onto
	    // the newly allocated props object.
	    var childrenLength = arguments.length - 1;
	    if (childrenLength === 1) {
	      props.children = children;
	    } else if (childrenLength > 1) {
	      var childArray = Array(childrenLength);
	      for (var i = 0; i < childrenLength; i++) {
	        childArray[i] = arguments[i + 1];
	      }
	      props.children = childArray;
	    }

	    // Initialize the descriptor object
	    var descriptor = Object.create(descriptorPrototype);

	    // Record the component responsible for creating this descriptor.
	    descriptor._owner = ReactCurrentOwner.current;

	    // TODO: Deprecate withContext, and then the context becomes accessible
	    // through the owner.
	    descriptor._context = ReactContext.current;

	    if ("production" !== process.env.NODE_ENV) {
	      // The validation flag and props are currently mutative. We put them on
	      // an external backing store so that we can freeze the whole object.
	      // This can be replaced with a WeakMap once they are implemented in
	      // commonly used development environments.
	      descriptor._store = { validated: false, props: props };

	      // We're not allowed to set props directly on the object so we early
	      // return and rely on the prototype membrane to forward to the backing
	      // store.
	      if (useMutationMembrane) {
	        Object.freeze(descriptor);
	        return descriptor;
	      }
	    }

	    descriptor.props = props;
	    return descriptor;
	  };

	  // Currently we expose the prototype of the descriptor so that
	  // <Foo /> instanceof Foo works. This is controversial pattern.
	  factory.prototype = descriptorPrototype;

	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on descriptors. E.g. <Foo />.type === Foo.type and for
	  // static methods like <Foo />.type.staticMethod();
	  // This should not be named constructor since this may not be the function
	  // that created the descriptor, and it may not even be a constructor.
	  factory.type = type;
	  descriptorPrototype.type = type;

	  proxyStaticMethods(factory, type);

	  // Expose a unique constructor on the prototype is that this works with type
	  // systems that compare constructor properties: <Foo />.constructor === Foo
	  // This may be controversial since it requires a known factory function.
	  descriptorPrototype.constructor = factory;

	  return factory;

	};

	ReactDescriptor.cloneAndReplaceProps = function(oldDescriptor, newProps) {
	  var newDescriptor = Object.create(oldDescriptor.constructor.prototype);
	  // It's important that this property order matches the hidden class of the
	  // original descriptor to maintain perf.
	  newDescriptor._owner = oldDescriptor._owner;
	  newDescriptor._context = oldDescriptor._context;

	  if ("production" !== process.env.NODE_ENV) {
	    newDescriptor._store = {
	      validated: oldDescriptor._store.validated,
	      props: newProps
	    };
	    if (useMutationMembrane) {
	      Object.freeze(newDescriptor);
	      return newDescriptor;
	    }
	  }

	  newDescriptor.props = newProps;
	  return newDescriptor;
	};

	/**
	 * Checks if a value is a valid descriptor constructor.
	 *
	 * @param {*}
	 * @return {boolean}
	 * @public
	 */
	ReactDescriptor.isValidFactory = function(factory) {
	  return typeof factory === 'function' &&
	         factory.prototype instanceof ReactDescriptor;
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactDescriptor.isValidDescriptor = function(object) {
	  return object instanceof ReactDescriptor;
	};

	module.exports = ReactDescriptor;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactContext
	 */

	"use strict";

	var merge = __webpack_require__(40);

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: {},

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'} () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = merge(previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	"use strict";

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      return function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(48);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(49);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    typeof Node === 'function' ? object instanceof Node :
	      typeof object === 'object' &&
	      typeof object.nodeType === 'number' &&
	      typeof object.nodeName === 'string'
	  ));
	}

	module.exports = isNode;


/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	"use strict";

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * Validate a `componentDescriptor`. This should be exposed publicly in a follow
	 * up diff.
	 *
	 * @param {object} descriptor
	 * @return {boolean} Returns true if this is a valid descriptor of a Component.
	 */
	function isValidComponentDescriptor(descriptor) {
	  return (
	    descriptor &&
	    typeof descriptor.type === 'function' &&
	    typeof descriptor.type.prototype.mountComponent === 'function' &&
	    typeof descriptor.type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a `componentDescriptor` create an instance that will actually be
	 * mounted. Currently it just extracts an existing clone from composite
	 * components but this is an implementation detail which will change.
	 *
	 * @param {object} descriptor
	 * @return {object} A new instance of componentDescriptor's constructor.
	 * @protected
	 */
	function instantiateReactComponent(descriptor) {

	  // TODO: Make warning
	  // if (__DEV__) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      isValidComponentDescriptor(descriptor),
	      'Only React Components are valid for mounting.'
	    ) : invariant(isValidComponentDescriptor(descriptor)));
	  // }

	  return new descriptor.type(descriptor);
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	"use strict";

	/**
	 * Given a `prevDescriptor` and `nextDescriptor`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are descriptors. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevDescriptor
	 * @param {?object} nextDescriptor
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevDescriptor, nextDescriptor) {
	  if (prevDescriptor && nextDescriptor &&
	      prevDescriptor.type === nextDescriptor.type && (
	        (prevDescriptor.props && prevDescriptor.props.key) ===
	        (nextDescriptor.props && nextDescriptor.props.key)
	      ) && prevDescriptor._owner === nextDescriptor._owner) {
	    return true;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactComponent
	 */

	"use strict";

	var ReactDescriptor = __webpack_require__(44);
	var ReactOwner = __webpack_require__(54);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(11);
	var keyMirror = __webpack_require__(19);
	var merge = __webpack_require__(40);

	/**
	 * Every React component is in one of these life cycles.
	 */
	var ComponentLifeCycle = keyMirror({
	  /**
	   * Mounted components have a DOM node representation and are capable of
	   * receiving new props.
	   */
	  MOUNTED: null,
	  /**
	   * Unmounted components are inactive and cannot receive new props.
	   */
	  UNMOUNTED: null
	});

	var injected = false;

	/**
	 * Optionally injectable environment dependent cleanup hook. (server vs.
	 * browser etc). Example: A browser system caches DOM nodes based on component
	 * ID and must remove that cache entry when this instance is unmounted.
	 *
	 * @private
	 */
	var unmountIDFromEnvironment = null;

	/**
	 * The "image" of a component tree, is the platform specific (typically
	 * serialized) data that represents a tree of lower level UI building blocks.
	 * On the web, this "image" is HTML markup which describes a construction of
	 * low level `div` and `span` nodes. Other platforms may have different
	 * encoding of this "image". This must be injected.
	 *
	 * @private
	 */
	var mountImageIntoNode = null;

	/**
	 * Components are the basic units of composition in React.
	 *
	 * Every component accepts a set of keyed input parameters known as "props" that
	 * are initialized by the constructor. Once a component is mounted, the props
	 * can be mutated using `setProps` or `replaceProps`.
	 *
	 * Every component is capable of the following operations:
	 *
	 *   `mountComponent`
	 *     Initializes the component, renders markup, and registers event listeners.
	 *
	 *   `receiveComponent`
	 *     Updates the rendered DOM nodes to match the given component.
	 *
	 *   `unmountComponent`
	 *     Releases any resources allocated by this component.
	 *
	 * Components can also be "owned" by other components. Being owned by another
	 * component means being constructed by that component. This is different from
	 * being the child of a component, which means having a DOM representation that
	 * is a child of the DOM representation of that component.
	 *
	 * @class ReactComponent
	 */
	var ReactComponent = {

	  injection: {
	    injectEnvironment: function(ReactComponentEnvironment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
	      unmountIDFromEnvironment =
	        ReactComponentEnvironment.unmountIDFromEnvironment;
	      ReactComponent.BackendIDOperations =
	        ReactComponentEnvironment.BackendIDOperations;
	      injected = true;
	    }
	  },

	  /**
	   * @internal
	   */
	  LifeCycle: ComponentLifeCycle,

	  /**
	   * Injected module that provides ability to mutate individual properties.
	   * Injected into the base class because many different subclasses need access
	   * to this.
	   *
	   * @internal
	   */
	  BackendIDOperations: null,

	  /**
	   * Base functionality for every ReactComponent constructor. Mixed into the
	   * `ReactComponent` prototype, but exposed statically for easy access.
	   *
	   * @lends {ReactComponent.prototype}
	   */
	  Mixin: {

	    /**
	     * Checks whether or not this component is mounted.
	     *
	     * @return {boolean} True if mounted, false otherwise.
	     * @final
	     * @protected
	     */
	    isMounted: function() {
	      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
	    },

	    /**
	     * Sets a subset of the props.
	     *
	     * @param {object} partialProps Subset of the next props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @public
	     */
	    setProps: function(partialProps, callback) {
	      // Merge with the pending descriptor if it exists, otherwise with existing
	      // descriptor props.
	      var descriptor = this._pendingDescriptor || this._descriptor;
	      this.replaceProps(
	        merge(descriptor.props, partialProps),
	        callback
	      );
	    },

	    /**
	     * Replaces all of the props.
	     *
	     * @param {object} props New props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @public
	     */
	    replaceProps: function(props, callback) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'replaceProps(...): Can only update a mounted component.'
	      ) : invariant(this.isMounted()));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this._mountDepth === 0,
	        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
	        'component with a parent. This is an anti-pattern since props will ' +
	        'get reactively updated when rendered. Instead, change the owner\'s ' +
	        '`render` method to pass the correct value as props to the component ' +
	        'where it is created.'
	      ) : invariant(this._mountDepth === 0));
	      // This is a deoptimized path. We optimize for always having a descriptor.
	      // This creates an extra internal descriptor.
	      this._pendingDescriptor = ReactDescriptor.cloneAndReplaceProps(
	        this._pendingDescriptor || this._descriptor,
	        props
	      );
	      ReactUpdates.enqueueUpdate(this, callback);
	    },

	    /**
	     * Schedule a partial update to the props. Only used for internal testing.
	     *
	     * @param {object} partialProps Subset of the next props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @internal
	     */
	    _setPropsInternal: function(partialProps, callback) {
	      // This is a deoptimized path. We optimize for always having a descriptor.
	      // This creates an extra internal descriptor.
	      var descriptor = this._pendingDescriptor || this._descriptor;
	      this._pendingDescriptor = ReactDescriptor.cloneAndReplaceProps(
	        descriptor,
	        merge(descriptor.props, partialProps)
	      );
	      ReactUpdates.enqueueUpdate(this, callback);
	    },

	    /**
	     * Base constructor for all React components.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.construct.call(this, ...)`.
	     *
	     * @param {ReactDescriptor} descriptor
	     * @internal
	     */
	    construct: function(descriptor) {
	      // This is the public exposed props object after it has been processed
	      // with default props. The descriptor's props represents the true internal
	      // state of the props.
	      this.props = descriptor.props;
	      // Record the component responsible for creating this component.
	      // This is accessible through the descriptor but we maintain an extra
	      // field for compatibility with devtools and as a way to make an
	      // incremental update. TODO: Consider deprecating this field.
	      this._owner = descriptor._owner;

	      // All components start unmounted.
	      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

	      // See ReactUpdates.
	      this._pendingCallbacks = null;

	      // We keep the old descriptor and a reference to the pending descriptor
	      // to track updates.
	      this._descriptor = descriptor;
	      this._pendingDescriptor = null;
	    },

	    /**
	     * Initializes the component, renders markup, and registers event listeners.
	     *
	     * NOTE: This does not insert any nodes into the DOM.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
	     *
	     * @param {string} rootID DOM ID of the root node.
	     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	     * @param {number} mountDepth number of components in the owner hierarchy.
	     * @return {?string} Rendered markup to be inserted into the DOM.
	     * @internal
	     */
	    mountComponent: function(rootID, transaction, mountDepth) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !this.isMounted(),
	        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
	        'Make sure to avoid storing components between renders or reusing a ' +
	        'single component instance in multiple places.',
	        rootID
	      ) : invariant(!this.isMounted()));
	      var props = this._descriptor.props;
	      if (props.ref != null) {
	        var owner = this._descriptor._owner;
	        ReactOwner.addComponentAsRefTo(this, props.ref, owner);
	      }
	      this._rootNodeID = rootID;
	      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
	      this._mountDepth = mountDepth;
	      // Effectively: return '';
	    },

	    /**
	     * Releases any resources allocated by `mountComponent`.
	     *
	     * NOTE: This does not remove any nodes from the DOM.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.unmountComponent.call(this)`.
	     *
	     * @internal
	     */
	    unmountComponent: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'unmountComponent(): Can only unmount a mounted component.'
	      ) : invariant(this.isMounted()));
	      var props = this.props;
	      if (props.ref != null) {
	        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);
	      }
	      unmountIDFromEnvironment(this._rootNodeID);
	      this._rootNodeID = null;
	      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
	    },

	    /**
	     * Given a new instance of this component, updates the rendered DOM nodes
	     * as if that instance was rendered instead.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
	     *
	     * @param {object} nextComponent Next set of properties.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    receiveComponent: function(nextDescriptor, transaction) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'receiveComponent(...): Can only update a mounted component.'
	      ) : invariant(this.isMounted()));
	      this._pendingDescriptor = nextDescriptor;
	      this.performUpdateIfNecessary(transaction);
	    },

	    /**
	     * If `_pendingDescriptor` is set, update the component.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    performUpdateIfNecessary: function(transaction) {
	      if (this._pendingDescriptor == null) {
	        return;
	      }
	      var prevDescriptor = this._descriptor;
	      var nextDescriptor = this._pendingDescriptor;
	      this._descriptor = nextDescriptor;
	      this.props = nextDescriptor.props;
	      this._owner = nextDescriptor._owner;
	      this._pendingDescriptor = null;
	      this.updateComponent(transaction, prevDescriptor);
	    },

	    /**
	     * Updates the component's currently mounted representation.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @param {object} prevDescriptor
	     * @internal
	     */
	    updateComponent: function(transaction, prevDescriptor) {
	      var nextDescriptor = this._descriptor;

	      // If either the owner or a `ref` has changed, make sure the newest owner
	      // has stored a reference to `this`, and the previous owner (if different)
	      // has forgotten the reference to `this`. We use the descriptor instead
	      // of the public this.props because the post processing cannot determine
	      // a ref. The ref conceptually lives on the descriptor.

	      // TODO: Should this even be possible? The owner cannot change because
	      // it's forbidden by shouldUpdateReactComponent. The ref can change
	      // if you swap the keys of but not the refs. Reconsider where this check
	      // is made. It probably belongs where the key checking and
	      // instantiateReactComponent is done.

	      if (nextDescriptor._owner !== prevDescriptor._owner ||
	          nextDescriptor.props.ref !== prevDescriptor.props.ref) {
	        if (prevDescriptor.props.ref != null) {
	          ReactOwner.removeComponentAsRefFrom(
	            this, prevDescriptor.props.ref, prevDescriptor._owner
	          );
	        }
	        // Correct, even if the owner is the same, and only the ref has changed.
	        if (nextDescriptor.props.ref != null) {
	          ReactOwner.addComponentAsRefTo(
	            this,
	            nextDescriptor.props.ref,
	            nextDescriptor._owner
	          );
	        }
	      }
	    },

	    /**
	     * Mounts this component and inserts it into the DOM.
	     *
	     * @param {string} rootID DOM ID of the root node.
	     * @param {DOMElement} container DOM element to mount into.
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @final
	     * @internal
	     * @see {ReactMount.renderComponent}
	     */
	    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
	      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	      transaction.perform(
	        this._mountComponentIntoNode,
	        this,
	        rootID,
	        container,
	        transaction,
	        shouldReuseMarkup
	      );
	      ReactUpdates.ReactReconcileTransaction.release(transaction);
	    },

	    /**
	     * @param {string} rootID DOM ID of the root node.
	     * @param {DOMElement} container DOM element to mount into.
	     * @param {ReactReconcileTransaction} transaction
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @final
	     * @private
	     */
	    _mountComponentIntoNode: function(
	        rootID,
	        container,
	        transaction,
	        shouldReuseMarkup) {
	      var markup = this.mountComponent(rootID, transaction, 0);
	      mountImageIntoNode(markup, container, shouldReuseMarkup);
	    },

	    /**
	     * Checks if this component is owned by the supplied `owner` component.
	     *
	     * @param {ReactComponent} owner Component to check.
	     * @return {boolean} True if `owners` owns this component.
	     * @final
	     * @internal
	     */
	    isOwnedBy: function(owner) {
	      return this._owner === owner;
	    },

	    /**
	     * Gets another component, that shares the same owner as this one, by ref.
	     *
	     * @param {string} ref of a sibling Component.
	     * @return {?ReactComponent} the actual sibling Component.
	     * @final
	     * @internal
	     */
	    getSiblingByRef: function(ref) {
	      var owner = this._owner;
	      if (!owner || !owner.refs) {
	        return null;
	      }
	      return owner.refs[ref];
	    }
	  }
	};

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactOwner
	 */

	"use strict";

	var emptyObject = __webpack_require__(55);
	var invariant = __webpack_require__(11);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      object &&
	      typeof object.attachRef === 'function' &&
	      typeof object.detachRef === 'function'
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.refs[ref] === component) {
	      owner.detachRef(ref);
	    }
	  },

	  /**
	   * A ReactComponent must mix this in to have refs.
	   *
	   * @lends {ReactOwner.prototype}
	   */
	  Mixin: {

	    construct: function() {
	      this.refs = emptyObject;
	    },

	    /**
	     * Lazily allocates the refs object and stores `component` as `ref`.
	     *
	     * @param {string} ref Reference name.
	     * @param {component} component Component to store as `ref`.
	     * @final
	     * @private
	     */
	    attachRef: function(ref, component) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        component.isOwnedBy(this),
	        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
	        ref
	      ) : invariant(component.isOwnedBy(this)));
	      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
	      refs[ref] = component;
	    },

	    /**
	     * Detaches a reference name.
	     *
	     * @param {string} ref Name to dereference.
	     * @final
	     * @private
	     */
	    detachRef: function(ref) {
	      delete this.refs[ref];
	    }

	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactUpdates
	 */

	"use strict";

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(21);
	var ReactCurrentOwner = __webpack_require__(43);
	var ReactPerf = __webpack_require__(46);
	var Transaction = __webpack_require__(59);

	var invariant = __webpack_require__(11);
	var mixInto = __webpack_require__(58);
	var warning = __webpack_require__(14);

	var dirtyComponents = [];

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled(null);
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	mixInto(ReactUpdatesFlushTransaction, Transaction.Mixin);
	mixInto(ReactUpdatesFlushTransaction, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b);
	}

	/**
	 * Array comparator for ReactComponents by owner depth
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountDepthComparator(c1, c2) {
	  return c1._mountDepth - c2._mountDepth;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountDepthComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, ignore them
	    // TODO: Queue unmounts in the same list to avoid this happening at all
	    var component = dirtyComponents[i];
	    if (component.isMounted()) {
	      // If performUpdateIfNecessary happens to enqueue any new updates, we
	      // shouldn't execute the callbacks until the next render happens, so
	      // stash the callbacks first
	      var callbacks = component._pendingCallbacks;
	      component._pendingCallbacks = null;
	      component.performUpdateIfNecessary(transaction.reconcileTransaction);

	      if (callbacks) {
	        for (var j = 0; j < callbacks.length; j++) {
	          transaction.callbackQueue.enqueue(
	            callbacks[j],
	            component
	          );
	        }
	      }
	    }
	  }
	}

	var flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  function() {
	    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	    // array and perform any updates enqueued by mount-ready handlers (i.e.,
	    // componentDidUpdate) but we need to check here too in order to catch
	    // updates enqueued by setState callbacks.
	    while (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	  }
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !callback || typeof callback === "function",
	    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
	    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	    'isn\'t callable.'
	  ) : invariant(!callback || typeof callback === "function"));
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
	    return;
	  }

	  dirtyComponents.push(component);

	  if (callback) {
	    if (component._pendingCallbacks) {
	      component._pendingCallbacks.push(callback);
	    } else {
	      component._pendingCallbacks = [callback];
	    }
	  }
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule CallbackQueue
	 */

	"use strict";

	var PooledClass = __webpack_require__(21);

	var invariant = __webpack_require__(11);
	var mixInto = __webpack_require__(58);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	mixInto(CallbackQueue, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        "Mismatched list of contexts in callback queue"
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule mixInto
	 */

	"use strict";

	/**
	 * Simply copies properties to the prototype.
	 */
	var mixInto = function(constructor, methodBag) {
	  var methodName;
	  for (methodName in methodBag) {
	    if (!methodBag.hasOwnProperty(methodName)) {
	      continue;
	    }
	    constructor.prototype[methodName] = methodBag[methodName];
	  }
	};

	module.exports = mixInto;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule Transaction
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM upates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR) {
	          wrapper.close && wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	"use strict";

	var ReactComponent = __webpack_require__(53);
	var ReactContext = __webpack_require__(45);
	var ReactCurrentOwner = __webpack_require__(43);
	var ReactDescriptor = __webpack_require__(44);
	var ReactDescriptorValidator = __webpack_require__(61);
	var ReactEmptyComponent = __webpack_require__(27);
	var ReactErrorUtils = __webpack_require__(63);
	var ReactOwner = __webpack_require__(54);
	var ReactPerf = __webpack_require__(46);
	var ReactPropTransferer = __webpack_require__(64);
	var ReactPropTypeLocations = __webpack_require__(62);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactUpdates = __webpack_require__(56);

	var instantiateReactComponent = __webpack_require__(51);
	var invariant = __webpack_require__(11);
	var keyMirror = __webpack_require__(19);
	var merge = __webpack_require__(40);
	var mixInto = __webpack_require__(58);
	var monitorCodeUse = __webpack_require__(36);
	var mapObject = __webpack_require__(67);
	var shouldUpdateReactComponent = __webpack_require__(52);
	var warning = __webpack_require__(14);

	/**
	 * Policies that describe methods in `ReactCompositeComponentInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base ReactCompositeComponent class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactCompositeComponent`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactCompositeComponentInterface
	 * @internal
	 */
	var ReactCompositeComponentInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    validateTypeDef(
	      Constructor,
	      childContextTypes,
	      ReactPropTypeLocations.childContext
	    );
	    Constructor.childContextTypes = merge(
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    validateTypeDef(
	      Constructor,
	      contextTypes,
	      ReactPropTypeLocations.context
	    );
	    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    validateTypeDef(
	      Constructor,
	      propTypes,
	      ReactPropTypeLocations.prop
	    );
	    Constructor.propTypes = merge(Constructor.propTypes, propTypes);
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function getDeclarationErrorAddendum(component) {
	  var owner = component._owner || null;
	  if (owner && owner.constructor && owner.constructor.displayName) {
	    return ' Check the render method of `' + owner.constructor.displayName +
	      '`.';
	  }
	  return '';
	}

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof typeDef[propName] == 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactCompositeComponent',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : invariant(typeof typeDef[propName] == 'function'));
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
	    ReactCompositeComponentInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactCompositeComponentInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactCompositeComponentInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	function validateLifeCycleOnReplaceState(instance) {
	  var compositeLifeCycleState = instance._compositeLifeCycleState;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance.isMounted() ||
	      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
	    'replaceState(...): Can only update a mounted or mounting component.'
	  ) : invariant(instance.isMounted() ||
	    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
	  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,
	    'replaceState(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). This could potentially cause an infinite ' +
	    'loop so it is forbidden.'
	  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));
	  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
	    'replaceState(...): Cannot update while unmounting component. This ' +
	    'usually means you called setState() on an unmounted component.'
	  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
	}

	/**
	 * Custom version of `mixInto` which handles policy validation and reserved
	 * specification keys when building `ReactCompositeComponent` classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactDescriptor.isValidFactory(spec),
	    'ReactCompositeComponent: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactDescriptor.isValidFactory(spec)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactDescriptor.isValidDescriptor(spec),
	    'ReactCompositeComponent: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactDescriptor.isValidDescriptor(spec)));

	  var proto = Constructor.prototype;
	  for (var name in spec) {
	    var property = spec[name];
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactCompositeComponent methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isCompositeComponentMethod =
	        ReactCompositeComponentInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isCompositeComponentMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactCompositeComponentInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isCompositeComponentMethod && (
	              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
	              specPolicy === SpecPolicy.DEFINE_MANY
	            ),
	            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isCompositeComponentMethod && (
	            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
	            specPolicy === SpecPolicy.DEFINE_MANY
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isInherited = name in Constructor;
	    var result = property;
	    if (isInherited) {
	      var existingProperty = Constructor[name];
	      var existingType = typeof existingProperty;
	      var propertyType = typeof property;
	      ("production" !== process.env.NODE_ENV ? invariant(
	        existingType === 'function' && propertyType === 'function',
	        'ReactCompositeComponent: You are attempting to define ' +
	        '`%s` on your component more than once, but that is only supported ' +
	        'for functions, which are chained together. This conflict may be ' +
	        'due to a mixin.',
	        name
	      ) : invariant(existingType === 'function' && propertyType === 'function'));
	      result = createChainedFunction(existingProperty, property);
	    }
	    Constructor[name] = result;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeObjectsWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  mapObject(two, function(value, key) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      one[key] === undefined,
	      'mergeObjectsWithNoDuplicateKeys(): ' +
	      'Tried to merge two objects with the same key: %s',
	      key
	    ) : invariant(one[key] === undefined));
	    one[key] = value;
	  });
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    return mergeObjectsWithNoDuplicateKeys(a, b);
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
	 * `this._compositeLifeCycleState` (which can be null).
	 *
	 * This is different from the life cycle state maintained by `ReactComponent` in
	 * `this._lifeCycleState`. The following diagram shows how the states overlap in
	 * time. There are times when the CompositeLifeCycle is null - at those times it
	 * is only meaningful to look at ComponentLifeCycle alone.
	 *
	 * Top Row: ReactComponent.ComponentLifeCycle
	 * Low Row: ReactComponent.CompositeLifeCycle
	 *
	 * +-------+------------------------------------------------------+--------+
	 * |  UN   |                    MOUNTED                           |   UN   |
	 * |MOUNTED|                                                      | MOUNTED|
	 * +-------+------------------------------------------------------+--------+
	 * |       ^--------+   +------+   +------+   +------+   +--------^        |
	 * |       |        |   |      |   |      |   |      |   |        |        |
	 * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |
	 * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |
	 * |       |        |   |      |   |      |   |      |   |        |        |
	 * |       |        |   |      |   |      |   |      |   |        |        |
	 * |       +--------+   +------+   +------+   +------+   +--------+        |
	 * |       |                                                      |        |
	 * +-------+------------------------------------------------------+--------+
	 */
	var CompositeLifeCycle = keyMirror({
	  /**
	   * Components in the process of being mounted respond to state changes
	   * differently.
	   */
	  MOUNTING: null,
	  /**
	   * Components in the process of being unmounted are guarded against state
	   * changes.
	   */
	  UNMOUNTING: null,
	  /**
	   * Components that are mounted and receiving new props respond to state
	   * changes differently.
	   */
	  RECEIVING_PROPS: null,
	  /**
	   * Components that are mounted and receiving new state are guarded against
	   * additional state changes.
	   */
	  RECEIVING_STATE: null
	});

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactDescriptor} descriptor
	   * @final
	   * @internal
	   */
	  construct: function(descriptor) {
	    // Children can be either an array or more than one argument
	    ReactComponent.Mixin.construct.apply(this, arguments);
	    ReactOwner.Mixin.construct.apply(this, arguments);

	    this.state = null;
	    this._pendingState = null;

	    // This is the public post-processed context. The real context and pending
	    // context lives on the descriptor.
	    this.context = null;

	    this._compositeLifeCycleState = null;
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    return ReactComponent.Mixin.isMounted.call(this) &&
	      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    'mountComponent',
	    function(rootID, transaction, mountDepth) {
	      ReactComponent.Mixin.mountComponent.call(
	        this,
	        rootID,
	        transaction,
	        mountDepth
	      );
	      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

	      if (this.__reactAutoBindMap) {
	        this._bindAutoBindMethods();
	      }

	      this.context = this._processContext(this._descriptor._context);
	      this.props = this._processProps(this.props);

	      this.state = this.getInitialState ? this.getInitialState() : null;
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof this.state === 'object' && !Array.isArray(this.state),
	        '%s.getInitialState(): must return an object or null',
	        this.constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

	      this._pendingState = null;
	      this._pendingForceUpdate = false;

	      if (this.componentWillMount) {
	        this.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingState` without triggering a re-render.
	        if (this._pendingState) {
	          this.state = this._pendingState;
	          this._pendingState = null;
	        }
	      }

	      this._renderedComponent = instantiateReactComponent(
	        this._renderValidatedComponent()
	      );

	      // Done with mounting, `setState` will now trigger UI changes.
	      this._compositeLifeCycleState = null;
	      var markup = this._renderedComponent.mountComponent(
	        rootID,
	        transaction,
	        mountDepth + 1
	      );
	      if (this.componentDidMount) {
	        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
	      }
	      return markup;
	    }
	  ),

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
	    if (this.componentWillUnmount) {
	      this.componentWillUnmount();
	    }
	    this._compositeLifeCycleState = null;

	    this._renderedComponent.unmountComponent();
	    this._renderedComponent = null;

	    ReactComponent.Mixin.unmountComponent.call(this);

	    // Some existing components rely on this.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: this.props = null;
	    // TODO: this.state = null;
	  },

	  /**
	   * Sets a subset of the state. Always use this or `replaceState` to mutate
	   * state. You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * There is no guarantee that calls to `setState` will run synchronously,
	   * as they may eventually be batched together.  You can provide an optional
	   * callback that will be executed when the call to setState is actually
	   * completed.
	   *
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after state is updated.
	   * @final
	   * @protected
	   */
	  setState: function(partialState, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof partialState === 'object' || partialState == null,
	      'setState(...): takes an object of state variables to update.'
	    ) : invariant(typeof partialState === 'object' || partialState == null));
	    if ("production" !== process.env.NODE_ENV){
	      ("production" !== process.env.NODE_ENV ? warning(
	        partialState != null,
	        'setState(...): You passed an undefined or null state object; ' +
	        'instead, use forceUpdate().'
	      ) : null);
	    }
	    // Merge with `_pendingState` if it exists, otherwise with existing state.
	    this.replaceState(
	      merge(this._pendingState || this.state, partialState),
	      callback
	    );
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after state is updated.
	   * @final
	   * @protected
	   */
	  replaceState: function(completeState, callback) {
	    validateLifeCycleOnReplaceState(this);
	    this._pendingState = completeState;
	    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
	      // If we're in a componentWillMount handler, don't enqueue a rerender
	      // because ReactUpdates assumes we're in a browser context (which is wrong
	      // for server rendering) and we're about to do a render anyway.
	      // TODO: The callback here is ignored when setState is called from
	      // componentWillMount. Either fix it or disallow doing so completely in
	      // favor of getInitialState.
	      ReactUpdates.enqueueUpdate(this, callback);
	    }
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = null;
	    var contextTypes = this.constructor.contextTypes;
	    if (contextTypes) {
	      maskedContext = {};
	      for (var contextName in contextTypes) {
	        maskedContext[contextName] = context[contextName];
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function(currentContext) {
	    var childContext = this.getChildContext && this.getChildContext();
	    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof this.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        displayName
	      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          this.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in this.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          displayName,
	          name
	        ) : invariant(name in this.constructor.childContextTypes));
	      }
	      return merge(currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    var defaultProps = this.constructor.defaultProps;
	    var props;
	    if (defaultProps) {
	      props = merge(newProps);
	      for (var propName in defaultProps) {
	        if (typeof props[propName] === 'undefined') {
	          props[propName] = defaultProps[propName];
	        }
	      }
	    } else {
	      props = newProps;
	    }
	    if ("production" !== process.env.NODE_ENV) {
	      var propTypes = this.constructor.propTypes;
	      if (propTypes) {
	        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);
	      }
	    }
	    return props;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the descriptor
	    // validation.
	    var componentName = this.constructor.displayName;
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error =
	          propTypes[propName](props, propName, componentName, location);
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // renderComponent calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	          ("production" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);
	        }
	      }
	    }
	  },

	  /**
	   * If any of `_pendingDescriptor`, `_pendingState`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    var compositeLifeCycleState = this._compositeLifeCycleState;
	    // Do not trigger a state transition if we are in the middle of mounting or
	    // receiving props because both of those will already be doing this.
	    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
	        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
	      return;
	    }

	    if (this._pendingDescriptor == null &&
	        this._pendingState == null &&
	        !this._pendingForceUpdate) {
	      return;
	    }

	    var nextContext = this.context;
	    var nextProps = this.props;
	    var nextDescriptor = this._descriptor;
	    if (this._pendingDescriptor != null) {
	      nextDescriptor = this._pendingDescriptor;
	      nextContext = this._processContext(nextDescriptor._context);
	      nextProps = this._processProps(nextDescriptor.props);
	      this._pendingDescriptor = null;

	      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
	      if (this.componentWillReceiveProps) {
	        this.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;

	    var nextState = this._pendingState || this.state;
	    this._pendingState = null;

	    try {
	      var shouldUpdate =
	        this._pendingForceUpdate ||
	        !this.shouldComponentUpdate ||
	        this.shouldComponentUpdate(nextProps, nextState, nextContext);

	      if ("production" !== process.env.NODE_ENV) {
	        if (typeof shouldUpdate === "undefined") {
	          console.warn(
	            (this.constructor.displayName || 'ReactCompositeComponent') +
	            '.shouldComponentUpdate(): Returned undefined instead of a ' +
	            'boolean value. Make sure to return true or false.'
	          );
	        }
	      }

	      if (shouldUpdate) {
	        this._pendingForceUpdate = false;
	        // Will set `this.props`, `this.state` and `this.context`.
	        this._performComponentUpdate(
	          nextDescriptor,
	          nextProps,
	          nextState,
	          nextContext,
	          transaction
	        );
	      } else {
	        // If it's determined that a component should not update, we still want
	        // to set props and state.
	        this._descriptor = nextDescriptor;
	        this.props = nextProps;
	        this.state = nextState;
	        this.context = nextContext;

	        // Owner cannot change because shouldUpdateReactComponent doesn't allow
	        // it. TODO: Remove this._owner completely.
	        this._owner = nextDescriptor._owner;
	      }
	    } finally {
	      this._compositeLifeCycleState = null;
	    }
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactDescriptor} nextDescriptor Next descriptor
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextDescriptor,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction
	  ) {
	    var prevDescriptor = this._descriptor;
	    var prevProps = this.props;
	    var prevState = this.state;
	    var prevContext = this.context;

	    if (this.componentWillUpdate) {
	      this.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._descriptor = nextDescriptor;
	    this.props = nextProps;
	    this.state = nextState;
	    this.context = nextContext;

	    // Owner cannot change because shouldUpdateReactComponent doesn't allow
	    // it. TODO: Remove this._owner completely.
	    this._owner = nextDescriptor._owner;

	    this.updateComponent(
	      transaction,
	      prevDescriptor
	    );

	    if (this.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
	        this
	      );
	    }
	  },

	  receiveComponent: function(nextDescriptor, transaction) {
	    if (nextDescriptor === this._descriptor &&
	        nextDescriptor._owner != null) {
	      // Since descriptors are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the descriptor. We explicitly check for the existence of an owner since
	      // it's possible for a descriptor created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    ReactComponent.Mixin.receiveComponent.call(
	      this,
	      nextDescriptor,
	      transaction
	    );
	  },

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactDescriptor} prevDescriptor
	   * @internal
	   * @overridable
	   */
	  updateComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    'updateComponent',
	    function(transaction, prevParentDescriptor) {
	      ReactComponent.Mixin.updateComponent.call(
	        this,
	        transaction,
	        prevParentDescriptor
	      );

	      var prevComponentInstance = this._renderedComponent;
	      var prevDescriptor = prevComponentInstance._descriptor;
	      var nextDescriptor = this._renderValidatedComponent();
	      if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {
	        prevComponentInstance.receiveComponent(nextDescriptor, transaction);
	      } else {
	        // These two IDs are actually the same! But nothing should rely on that.
	        var thisID = this._rootNodeID;
	        var prevComponentID = prevComponentInstance._rootNodeID;
	        prevComponentInstance.unmountComponent();
	        this._renderedComponent = instantiateReactComponent(nextDescriptor);
	        var nextMarkup = this._renderedComponent.mountComponent(
	          thisID,
	          transaction,
	          this._mountDepth + 1
	        );
	        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
	          prevComponentID,
	          nextMarkup
	        );
	      }
	    }
	  ),

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {?function} callback Called after update is complete.
	   * @final
	   * @protected
	   */
	  forceUpdate: function(callback) {
	    var compositeLifeCycleState = this._compositeLifeCycleState;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isMounted() ||
	        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
	      'forceUpdate(...): Can only force an update on mounted or mounting ' +
	        'components.'
	    ) : invariant(this.isMounted() ||
	      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
	      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
	      'forceUpdate(...): Cannot force an update while unmounting component ' +
	      'or during an existing state transition (such as within `render`).'
	    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
	    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
	    this._pendingForceUpdate = true;
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    '_renderValidatedComponent',
	    function() {
	      var renderedComponent;
	      var previousContext = ReactContext.current;
	      ReactContext.current = this._processChildContext(
	        this._descriptor._context
	      );
	      ReactCurrentOwner.current = this;
	      try {
	        renderedComponent = this.render();
	        if (renderedComponent === null || renderedComponent === false) {
	          renderedComponent = ReactEmptyComponent.getEmptyComponent();
	          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
	        } else {
	          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
	        }
	      } finally {
	        ReactContext.current = previousContext;
	        ReactCurrentOwner.current = null;
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        ReactDescriptor.isValidDescriptor(renderedComponent),
	        '%s.render(): A valid ReactComponent must be returned. You may have ' +
	          'returned undefined, an array or some other invalid object.',
	        this.constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(ReactDescriptor.isValidDescriptor(renderedComponent)));
	      return renderedComponent;
	    }
	  ),

	  /**
	   * @private
	   */
	  _bindAutoBindMethods: function() {
	    for (var autoBindKey in this.__reactAutoBindMap) {
	      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	        continue;
	      }
	      var method = this.__reactAutoBindMap[autoBindKey];
	      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
	        method,
	        this.constructor.displayName + '.' + autoBindKey
	      ));
	    }
	  },

	  /**
	   * Binds a method to the component.
	   *
	   * @param {function} method Method to be bound.
	   * @private
	   */
	  _bindAutoBindMethod: function(method) {
	    var component = this;
	    var boundMethod = function() {
	      return method.apply(component, arguments);
	    };
	    if ("production" !== process.env.NODE_ENV) {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis ) {var args=Array.prototype.slice.call(arguments,1);
	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          monitorCodeUse('react_bind_warning', { component: componentName });
	          console.warn(
	            'bind(): React component methods may only be bound to the ' +
	            'component instance. See ' + componentName
	          );
	        } else if (!args.length) {
	          monitorCodeUse('react_bind_warning', { component: componentName });
	          console.warn(
	            'bind(): You are binding a component method to the component. ' +
	            'React does this for you automatically in a high-performance ' +
	            'way, so you can safely remove this call. See ' + componentName
	          );
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }
	};

	var ReactCompositeComponentBase = function() {};
	mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);
	mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);
	mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);
	mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactCompositeComponent
	 * @extends ReactComponent
	 * @extends ReactOwner
	 * @extends ReactPropTransferer
	 */
	var ReactCompositeComponent = {

	  LifeCycle: CompositeLifeCycle,

	  Base: ReactCompositeComponentBase,

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, owner) {
	      this.construct(props, owner);
	    };
	    Constructor.prototype = new ReactCompositeComponentBase();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      if (Constructor.prototype.componentShouldUpdate) {
	        monitorCodeUse(
	          'react_component_should_update_warning',
	          { component: spec.displayName }
	        );
	        console.warn(
	          (spec.displayName || 'A component') + ' has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.'
	         );
	      }
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactCompositeComponentInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    var descriptorFactory = ReactDescriptor.createFactory(Constructor);

	    if ("production" !== process.env.NODE_ENV) {
	      return ReactDescriptorValidator.createFactory(
	        descriptorFactory,
	        Constructor.propTypes,
	        Constructor.contextTypes
	      );
	    }

	    return descriptorFactory;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDescriptorValidator
	 */

	/**
	 * ReactDescriptorValidator provides a wrapper around a descriptor factory
	 * which validates the props passed to the descriptor. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	"use strict";

	var ReactDescriptor = __webpack_require__(44);
	var ReactPropTypeLocations = __webpack_require__(62);
	var ReactCurrentOwner = __webpack_require__(43);

	var monitorCodeUse = __webpack_require__(36);

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {
	  'react_key_warning': {},
	  'react_numeric_key_warning': {}
	};
	var ownerHasMonitoredObjectMap = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return current && current.constructor.displayName || undefined;
	}

	/**
	 * Warn if the component doesn't have an explicit key assigned to it.
	 * This component is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function validateExplicitKey(component, parentType) {
	  if (component._store.validated || component.props.key != null) {
	    return;
	  }
	  component._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'react_key_warning',
	    'Each child in an array should have a unique "key" prop.',
	    component,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function validatePropertyKey(name, component, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'react_numeric_key_warning',
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    component,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} warningID The id used when logging.
	 * @param {string} message The base warning that gets output.
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = parentType.displayName;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[warningID];
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  message += ownerName ?
	    (" Check the render method of " + ownerName + ".") :
	    (" Check the renderComponent call using <" + parentName + ">.");

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerName = null;
	  if (component._owner && component._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    childOwnerName = component._owner.constructor.displayName;

	    message += (" It was passed a child from " + childOwnerName + ".");
	  }

	  message += ' See http://fb.me/react-warning-keys for more information.';
	  monitorCodeUse(warningID, {
	    component: useName,
	    componentOwner: childOwnerName
	  });
	  console.warn(message);
	}

	/**
	 * Log that we're using an object map. We're considering deprecating this
	 * feature and replace it with proper Map and ImmutableMap data structures.
	 *
	 * @internal
	 */
	function monitorUseOfObjectMap() {
	  var currentName = getCurrentOwnerDisplayName() || '';
	  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
	    return;
	  }
	  ownerHasMonitoredObjectMap[currentName] = true;
	  monitorCodeUse('react_object_map_children');
	}

	/**
	 * Ensure that every component either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {*} component Statically passed child of any type.
	 * @param {*} parentType component's parent's type.
	 * @return {boolean}
	 */
	function validateChildKeys(component, parentType) {
	  if (Array.isArray(component)) {
	    for (var i = 0; i < component.length; i++) {
	      var child = component[i];
	      if (ReactDescriptor.isValidDescriptor(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactDescriptor.isValidDescriptor(component)) {
	    // This component was passed in a valid location.
	    component._store.validated = true;
	  } else if (component && typeof component === 'object') {
	    monitorUseOfObjectMap();
	    for (var name in component) {
	      validatePropertyKey(name, component[name], parentType);
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	        // This will soon use the warning module
	        monitorCodeUse(
	          'react_failed_descriptor_type_check',
	          { message: error.message }
	        );
	      }
	    }
	  }
	}

	var ReactDescriptorValidator = {

	  /**
	   * Wraps a descriptor factory function in another function which validates
	   * the props and context of the descriptor and warns about any failed type
	   * checks.
	   *
	   * @param {function} factory The original descriptor factory
	   * @param {object?} propTypes A prop type definition set
	   * @param {object?} contextTypes A context type definition set
	   * @return {object} The component descriptor, which may be invalid.
	   * @private
	   */
	  createFactory: function(factory, propTypes, contextTypes) {
	    var validatedFactory = function(props, children) {
	      var descriptor = factory.apply(this, arguments);

	      for (var i = 1; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], descriptor.type);
	      }

	      var name = descriptor.type.displayName;
	      if (propTypes) {
	        checkPropTypes(
	          name,
	          propTypes,
	          descriptor.props,
	          ReactPropTypeLocations.prop
	        );
	      }
	      if (contextTypes) {
	        checkPropTypes(
	          name,
	          contextTypes,
	          descriptor._context,
	          ReactPropTypeLocations.context
	        );
	      }
	      return descriptor;
	    };

	    validatedFactory.prototype = factory.prototype;
	    validatedFactory.type = factory.type;

	    // Copy static properties
	    for (var key in factory) {
	      if (factory.hasOwnProperty(key)) {
	        validatedFactory[key] = factory[key];
	      }
	    }

	    return validatedFactory;
	  }

	};

	module.exports = ReactDescriptorValidator;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	"use strict";

	var keyMirror = __webpack_require__(19);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 63 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactPropTransferer
	 */

	"use strict";

	var emptyFunction = __webpack_require__(15);
	var invariant = __webpack_require__(11);
	var joinClasses = __webpack_require__(65);
	var merge = __webpack_require__(40);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return merge(b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Never transfer the `key` prop.
	   */
	  key: emptyFunction,
	  /**
	   * Never transfer the `ref` prop.
	   */
	  ref: emptyFunction,
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  TransferStrategies: TransferStrategies,

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(merge(oldProps), newProps);
	  },

	  /**
	   * @lends {ReactPropTransferer.prototype}
	   */
	  Mixin: {

	    /**
	     * Transfer props from this component to a target component.
	     *
	     * Props that do not have an explicit transfer strategy will be transferred
	     * only if the target component does not already have the prop set.
	     *
	     * This is usually used to pass down props to a returned root component.
	     *
	     * @param {ReactDescriptor} descriptor Component receiving the properties.
	     * @return {ReactDescriptor} The supplied `component`.
	     * @final
	     * @protected
	     */
	    transferPropsTo: function(descriptor) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        descriptor._owner === this,
	        '%s: You can\'t call transferPropsTo() on a component that you ' +
	        'don\'t own, %s. This usually means you are calling ' +
	        'transferPropsTo() on a component passed in as props or children.',
	        this.constructor.displayName,
	        descriptor.type.displayName
	      ) : invariant(descriptor._owner === this));

	      // Because descriptors are immutable we have to merge into the existing
	      // props object rather than clone it.
	      transferInto(descriptor.props, this.props);

	      return descriptor;
	    }

	  }
	};

	module.exports = ReactPropTransferer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	"use strict";

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      nextClass && (className += ' ' + nextClass);
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	"use strict";

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule mapObject
	 */

	"use strict";

	/**
	 * For each key/value pair, invokes callback func and constructs a resulting
	 * object which contains, for every key in obj, values that are the result of
	 * of invoking the function:
	 *
	 *   func(value, key, iteration)
	 *
	 * Grepable names:
	 *
	 *   function objectMap()
	 *   function objMap()
	 *
	 * @param {?object} obj Object to map keys over
	 * @param {function} func Invoked for each key/val pair.
	 * @param {?*} context
	 * @return {?object} Result of mapping or null if obj is falsey
	 */
	function mapObject(obj, func, context) {
	  if (!obj) {
	    return null;
	  }
	  var i = 0;
	  var ret = {};
	  for (var key in obj) {
	    if (obj.hasOwnProperty(key)) {
	      ret[key] = func.call(context, obj[key], key, i++);
	    }
	  }
	  return ret;
	}

	module.exports = mapObject;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	"use strict";

	var ReactDescriptor = __webpack_require__(44);
	var ReactDescriptorValidator = __webpack_require__(61);
	var ReactDOMComponent = __webpack_require__(69);

	var mergeInto = __webpack_require__(41);
	var mapObject = __webpack_require__(67);

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @param {boolean} omitClose True if the close tag should be omitted.
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMComponentClass(omitClose, tag) {
	  var Constructor = function(descriptor) {
	    this.construct(descriptor);
	  };
	  Constructor.prototype = new ReactDOMComponent(tag, omitClose);
	  Constructor.prototype.constructor = Constructor;
	  Constructor.displayName = tag;

	  var ConvenienceConstructor = ReactDescriptor.createFactory(Constructor);

	  if ("production" !== process.env.NODE_ENV) {
	    return ReactDescriptorValidator.createFactory(
	      ConvenienceConstructor
	    );
	  }

	  return ConvenienceConstructor;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: false,
	  abbr: false,
	  address: false,
	  area: true,
	  article: false,
	  aside: false,
	  audio: false,
	  b: false,
	  base: true,
	  bdi: false,
	  bdo: false,
	  big: false,
	  blockquote: false,
	  body: false,
	  br: true,
	  button: false,
	  canvas: false,
	  caption: false,
	  cite: false,
	  code: false,
	  col: true,
	  colgroup: false,
	  data: false,
	  datalist: false,
	  dd: false,
	  del: false,
	  details: false,
	  dfn: false,
	  dialog: false,
	  div: false,
	  dl: false,
	  dt: false,
	  em: false,
	  embed: true,
	  fieldset: false,
	  figcaption: false,
	  figure: false,
	  footer: false,
	  form: false, // NOTE: Injected, see `ReactDOMForm`.
	  h1: false,
	  h2: false,
	  h3: false,
	  h4: false,
	  h5: false,
	  h6: false,
	  head: false,
	  header: false,
	  hr: true,
	  html: false,
	  i: false,
	  iframe: false,
	  img: true,
	  input: true,
	  ins: false,
	  kbd: false,
	  keygen: true,
	  label: false,
	  legend: false,
	  li: false,
	  link: true,
	  main: false,
	  map: false,
	  mark: false,
	  menu: false,
	  menuitem: false, // NOTE: Close tag should be omitted, but causes problems.
	  meta: true,
	  meter: false,
	  nav: false,
	  noscript: false,
	  object: false,
	  ol: false,
	  optgroup: false,
	  option: false,
	  output: false,
	  p: false,
	  param: true,
	  picture: false,
	  pre: false,
	  progress: false,
	  q: false,
	  rp: false,
	  rt: false,
	  ruby: false,
	  s: false,
	  samp: false,
	  script: false,
	  section: false,
	  select: false,
	  small: false,
	  source: true,
	  span: false,
	  strong: false,
	  style: false,
	  sub: false,
	  summary: false,
	  sup: false,
	  table: false,
	  tbody: false,
	  td: false,
	  textarea: false, // NOTE: Injected, see `ReactDOMTextarea`.
	  tfoot: false,
	  th: false,
	  thead: false,
	  time: false,
	  title: false,
	  tr: false,
	  track: true,
	  u: false,
	  ul: false,
	  'var': false,
	  video: false,
	  wbr: true,

	  // SVG
	  circle: false,
	  defs: false,
	  ellipse: false,
	  g: false,
	  line: false,
	  linearGradient: false,
	  mask: false,
	  path: false,
	  pattern: false,
	  polygon: false,
	  polyline: false,
	  radialGradient: false,
	  rect: false,
	  stop: false,
	  svg: false,
	  text: false,
	  tspan: false
	}, createDOMComponentClass);

	var injection = {
	  injectComponentClasses: function(componentClasses) {
	    mergeInto(ReactDOM, componentClasses);
	  }
	};

	ReactDOM.injection = injection;

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	"use strict";

	var CSSPropertyOperations = __webpack_require__(70);
	var DOMProperty = __webpack_require__(10);
	var DOMPropertyOperations = __webpack_require__(9);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactComponent = __webpack_require__(53);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(75);
	var ReactPerf = __webpack_require__(46);

	var escapeTextForBrowser = __webpack_require__(12);
	var invariant = __webpack_require__(11);
	var keyOf = __webpack_require__(78);
	var merge = __webpack_require__(40);
	var mixInto = __webpack_require__(58);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.children == null || props.dangerouslySetInnerHTML == null,
	    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}


	/**
	 * @constructor ReactDOMComponent
	 * @extends ReactComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag, omitClose) {
	  this._tagOpen = '<' + tag;
	  this._tagClose = omitClose ? '' : '</' + tag + '>';
	  this.tagName = tag.toUpperCase();
	}

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {string} The computed markup.
	   */
	  mountComponent: ReactPerf.measure(
	    'ReactDOMComponent',
	    'mountComponent',
	    function(rootID, transaction, mountDepth) {
	      ReactComponent.Mixin.mountComponent.call(
	        this,
	        rootID,
	        transaction,
	        mountDepth
	      );
	      assertValidProps(this.props);
	      return (
	        this._createOpenTagMarkupAndPutListeners(transaction) +
	        this._createContentMarkup(transaction) +
	        this._tagClose
	      );
	    }
	  ),

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this.props;
	    var ret = this._tagOpen;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = props.style = merge(props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = this.props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
	      var childrenToUse = contentToUse != null ? null : this.props.children;
	      if (contentToUse != null) {
	        return escapeTextForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction
	        );
	        return mountImages.join('');
	      }
	    }
	    return '';
	  },

	  receiveComponent: function(nextDescriptor, transaction) {
	    if (nextDescriptor === this._descriptor &&
	        nextDescriptor._owner != null) {
	      // Since descriptors are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the descriptor. We explicitly check for the existence of an owner since
	      // it's possible for a descriptor created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    ReactComponent.Mixin.receiveComponent.call(
	      this,
	      nextDescriptor,
	      transaction
	    );
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactDescriptor} prevDescriptor
	   * @internal
	   * @overridable
	   */
	  updateComponent: ReactPerf.measure(
	    'ReactDOMComponent',
	    'updateComponent',
	    function(transaction, prevDescriptor) {
	      assertValidProps(this._descriptor.props);
	      ReactComponent.Mixin.updateComponent.call(
	        this,
	        transaction,
	        prevDescriptor
	      );
	      this._updateDOMProperties(prevDescriptor.props, transaction);
	      this._updateDOMChildren(prevDescriptor.props, transaction);
	    }
	  ),

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = lastProps[propKey];
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        ReactComponent.BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = nextProps.style = merge(nextProp);
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        ReactComponent.BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      ReactComponent.BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction) {
	    var nextProps = this.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponent.Mixin.unmountComponent.call(this);
	  }

	};

	mixInto(ReactDOMComponent, ReactComponent.Mixin);
	mixInto(ReactDOMComponent, ReactDOMComponent.Mixin);
	mixInto(ReactDOMComponent, ReactMultiChild.Mixin);
	mixInto(ReactDOMComponent, ReactBrowserComponentMixin);

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	"use strict";

	var CSSProperty = __webpack_require__(71);

	var dangerousStyleValue = __webpack_require__(72);
	var hyphenateStyleName = __webpack_require__(73);
	var memoizeStringOnly = __webpack_require__(13);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;


/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule CSSProperty
	 */

	"use strict";

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  columnCount: true,
	  fillOpacity: true,
	  flex: true,
	  flexGrow: true,
	  flexShrink: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	"use strict";

	var CSSProperty = __webpack_require__(71);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(74);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *   > hyphenate('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenate('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 74 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	"use strict";

	var ReactComponent = __webpack_require__(53);
	var ReactMultiChildUpdateTypes = __webpack_require__(76);

	var flattenChildren = __webpack_require__(77);
	var instantiateReactComponent = __webpack_require__(51);
	var shouldUpdateReactComponent = __webpack_require__(52);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction) {
	      var children = flattenChildren(nestedChildren);
	      var mountImages = [];
	      var index = 0;
	      this._renderedChildren = children;
	      for (var name in children) {
	        var child = children[name];
	        if (children.hasOwnProperty(name)) {
	          // The rendered children must be turned into instances as they're
	          // mounted.
	          var childInstance = instantiateReactComponent(child);
	          children[name] = childInstance;
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = childInstance.mountComponent(
	            rootID,
	            transaction,
	            this._mountDepth + 1
	          );
	          childInstance._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          errorThrown ? clearQueue() : processQueue();
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          errorThrown ? clearQueue() : processQueue();
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction) {
	      var nextChildren = flattenChildren(nextNestedChildren);
	      var prevChildren = this._renderedChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var prevDescriptor = prevChild && prevChild._descriptor;
	        var nextDescriptor = nextChildren[name];
	        if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild.receiveComponent(nextDescriptor, transaction);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          var nextChildInstance = instantiateReactComponent(nextDescriptor);
	          this._mountChildByNameAtIndex(
	            nextChildInstance, name, nextIndex, transaction
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren[name])) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      for (var name in renderedChildren) {
	        var renderedChild = renderedChildren[name];
	        // TODO: When is this not true?
	        if (renderedChild.unmountComponent) {
	          renderedChild.unmountComponent();
	        }
	      }
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(child, name, index, transaction) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = child.mountComponent(
	        rootID,
	        transaction,
	        this._mountDepth + 1
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	      this._renderedChildren = this._renderedChildren || {};
	      this._renderedChildren[name] = child;
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	      child.unmountComponent();
	      delete this._renderedChildren[name];
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	"use strict";

	var keyMirror = __webpack_require__(19);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule flattenChildren
	 */

	"use strict";

	var traverseAllChildren = __webpack_require__(22);
	var warning = __webpack_require__(14);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  ("production" !== process.env.NODE_ENV ? warning(
	    keyUnique,
	    'flattenChildren(...): Encountered two children with the same key, ' +
	    '`%s`. Child keys must be unique; when two children share a key, only ' +
	    'the first child will be used.',
	    name
	  ) : null);
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 78 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	"use strict";

	var BeforeInputEventPlugin = __webpack_require__(80);
	var ChangeEventPlugin = __webpack_require__(85);
	var ClientReactRootIndex = __webpack_require__(87);
	var CompositionEventPlugin = __webpack_require__(88);
	var DefaultEventPluginOrder = __webpack_require__(96);
	var EnterLeaveEventPlugin = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(35);
	var HTMLDOMPropertyConfig = __webpack_require__(101);
	var MobileSafariClickEventPlugin = __webpack_require__(102);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(103);
	var ReactDefaultBatchingStrategy = __webpack_require__(116);
	var ReactDOM = __webpack_require__(68);
	var ReactDOMButton = __webpack_require__(117);
	var ReactDOMForm = __webpack_require__(119);
	var ReactDOMImg = __webpack_require__(121);
	var ReactDOMInput = __webpack_require__(122);
	var ReactDOMOption = __webpack_require__(125);
	var ReactDOMSelect = __webpack_require__(126);
	var ReactDOMTextarea = __webpack_require__(127);
	var ReactEventListener = __webpack_require__(128);
	var ReactInjection = __webpack_require__(130);
	var ReactInstanceHandles = __webpack_require__(23);
	var ReactMount = __webpack_require__(28);
	var SelectEventPlugin = __webpack_require__(131);
	var ServerReactRootIndex = __webpack_require__(133);
	var SimpleEventPlugin = __webpack_require__(134);
	var SVGDOMPropertyConfig = __webpack_require__(142);

	var createFullPageComponent = __webpack_require__(143);

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    CompositionEventPlugin: CompositionEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.DOM.injectComponentClasses({
	    button: ReactDOMButton,
	    form: ReactDOMForm,
	    img: ReactDOMImg,
	    input: ReactDOMInput,
	    option: ReactDOMOption,
	    select: ReactDOMSelect,
	    textarea: ReactDOMTextarea,

	    html: createFullPageComponent(ReactDOM.html),
	    head: createFullPageComponent(ReactDOM.head),
	    body: createFullPageComponent(ReactDOM.body)
	  });

	  // This needs to happen after createFullPageComponent() otherwise the mixin
	  // gets double injected.
	  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent(ReactDOM.noscript);

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactComponentBrowserEnvironment.ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(144);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPropagators = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(35);
	var SyntheticInputEvent = __webpack_require__(82);

	var keyOf = __webpack_require__(78);

	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !('documentMode' in document || isPresto())
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  }
	};

	// Track characters inserted via keypress and composition events.
	var fallbackChars = null;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var chars;

	    if (canUseTextInputEvent) {
	      switch (topLevelType) {
	        case topLevelTypes.topKeyPress:
	          /**
	           * If native `textInput` events are available, our goal is to make
	           * use of them. However, there is a special case: the spacebar key.
	           * In Webkit, preventing default on a spacebar `textInput` event
	           * cancels character insertion, but it *also* causes the browser
	           * to fall back to its default spacebar behavior of scrolling the
	           * page.
	           *
	           * Tracking at:
	           * https://code.google.com/p/chromium/issues/detail?id=355103
	           *
	           * To avoid this issue, use the keypress event as if no `textInput`
	           * event is available.
	           */
	          var which = nativeEvent.which;
	          if (which !== SPACEBAR_CODE) {
	            return;
	          }

	          chars = String.fromCharCode(which);
	          break;

	        case topLevelTypes.topTextInput:
	          // Record the characters to be added to the DOM.
	          chars = nativeEvent.data;

	          // If it's a spacebar character, assume that we have already handled
	          // it at the keypress level and bail immediately.
	          if (chars === SPACEBAR_CHAR) {
	            return;
	          }

	          // Otherwise, carry on.
	          break;

	        default:
	          // For other native event types, do nothing.
	          return;
	      }
	    } else {
	      switch (topLevelType) {
	        case topLevelTypes.topPaste:
	          // If a paste event occurs after a keypress, throw out the input
	          // chars. Paste events should not lead to BeforeInput events.
	          fallbackChars = null;
	          break;
	        case topLevelTypes.topKeyPress:
	          /**
	           * As of v27, Firefox may fire keypress events even when no character
	           * will be inserted. A few possibilities:
	           *
	           * - `which` is `0`. Arrow keys, Esc key, etc.
	           *
	           * - `which` is the pressed key code, but no char is available.
	           *   Ex: 'AltGr + d` in Polish. There is no modified character for
	           *   this key combination and no character is inserted into the
	           *   document, but FF fires the keypress for char code `100` anyway.
	           *   No `input` event will occur.
	           *
	           * - `which` is the pressed key code, but a command combination is
	           *   being used. Ex: `Cmd+C`. No character is inserted, and no
	           *   `input` event will occur.
	           */
	          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	            fallbackChars = String.fromCharCode(nativeEvent.which);
	          }
	          break;
	        case topLevelTypes.topCompositionEnd:
	          fallbackChars = nativeEvent.data;
	          break;
	      }

	      // If no changes have occurred to the fallback string, no relevant
	      // event has fired and we're done.
	      if (fallbackChars === null) {
	        return;
	      }

	      chars = fallbackChars;
	    }

	    // If no characters are being inserted, no BeforeInput event should
	    // be fired.
	    if (!chars) {
	      return;
	    }

	    var event = SyntheticInputEvent.getPooled(
	      eventTypes.beforeInput,
	      topLevelTargetID,
	      nativeEvent
	    );

	    event.data = chars;
	    fallbackChars = null;
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventPropagators
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPluginHub = __webpack_require__(30);

	var accumulate = __webpack_require__(32);
	var forEachAccumulated = __webpack_require__(33);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulate(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulate(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulate(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulate(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticEvent = __webpack_require__(83);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;



/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	"use strict";

	var PooledClass = __webpack_require__(21);

	var emptyFunction = __webpack_require__(15);
	var getEventTarget = __webpack_require__(84);
	var merge = __webpack_require__(40);
	var mergeInto = __webpack_require__(41);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	mergeInto(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    event.preventDefault ? event.preventDefault() : event.returnValue = false;
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  mergeInto(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = merge(Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	"use strict";

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPluginHub = __webpack_require__(30);
	var EventPropagators = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(35);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(83);

	var isEventSupported = __webpack_require__(34);
	var isTextInputElement = __webpack_require__(86);
	var keyOf = __webpack_require__(78);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    !('documentMode' in document) || document.documentMode > 8
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    !('documentMode' in document) || document.documentMode > 9
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule isTextInputElement
	 */

	"use strict";

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
	    elem.nodeName === 'TEXTAREA'
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 87 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	"use strict";

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule CompositionEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPropagators = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(35);
	var ReactInputSelection = __webpack_require__(89);
	var SyntheticCompositionEvent = __webpack_require__(95);

	var getTextContentAccessor = __webpack_require__(92);
	var keyOf = __webpack_require__(78);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var useCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. In Korean, for example,
	// the compositionend event contains only one character regardless of
	// how many characters have been composed since compositionstart.
	// We therefore use the fallback data while still using the native
	// events as triggers.
	var useFallbackData = (
	  !useCompositionEvent ||
	  (
	    'documentMode' in document &&
	    document.documentMode > 8 &&
	    document.documentMode <= 11
	  )
	);

	var topLevelTypes = EventConstants.topLevelTypes;
	var currentComposition = null;

	// Events and their corresponding property names.
	var eventTypes = {
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Helper class stores information about selection and document state
	 * so we can figure out what changed at a later date.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this.root = root;
	  this.startSelection = ReactInputSelection.getSelection(root);
	  this.startValue = this.getText();
	}

	/**
	 * Get current text of input.
	 *
	 * @return {string}
	 */
	FallbackCompositionState.prototype.getText = function() {
	  return this.root.value || this.root[getTextContentAccessor()];
	};

	/**
	 * Text that has changed since the start of composition.
	 *
	 * @return {string}
	 */
	FallbackCompositionState.prototype.getData = function() {
	  var endValue = this.getText();
	  var prefixLength = this.startSelection.start;
	  var suffixLength = this.startValue.length - this.startSelection.end;

	  return endValue.substr(
	    prefixLength,
	    endValue.length - suffixLength - prefixLength
	  );
	};

	/**
	 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
	 * `onCompositionEnd` events on inputs, textareas and contentEditable
	 * nodes.
	 */
	var CompositionEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var eventType;
	    var data;

	    if (useCompositionEvent) {
	      eventType = getCompositionEventType(topLevelType);
	    } else if (!currentComposition) {
	      if (isFallbackStart(topLevelType, nativeEvent)) {
	        eventType = eventTypes.compositionStart;
	      }
	    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionEnd;
	    }

	    if (useFallbackData) {
	      // The current composition is stored statically and must not be
	      // overwritten while composition continues.
	      if (!currentComposition && eventType === eventTypes.compositionStart) {
	        currentComposition = new FallbackCompositionState(topLevelTarget);
	      } else if (eventType === eventTypes.compositionEnd) {
	        if (currentComposition) {
	          data = currentComposition.getData();
	          currentComposition = null;
	        }
	      }
	    }

	    if (eventType) {
	      var event = SyntheticCompositionEvent.getPooled(
	        eventType,
	        topLevelTargetID,
	        nativeEvent
	      );
	      if (data) {
	        // Inject data generated from fallback path into the synthetic event.
	        // This matches the property of native CompositionEventInterface.
	        event.data = data;
	      }
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	      return event;
	    }
	  }
	};

	module.exports = CompositionEventPlugin;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactInputSelection
	 */

	"use strict";

	var ReactDOMSelection = __webpack_require__(90);

	var containsNode = __webpack_require__(47);
	var focusNode = __webpack_require__(93);
	var getActiveElement = __webpack_require__(94);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' ||
	      elem.contentEditable === 'true'
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMSelection
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(35);

	var getNodeForCharacterOffset = __webpack_require__(91);
	var getTextContentAccessor = __webpack_require__(92);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection();

	  if (selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	  detectionRange.detach();

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  var selection = window.getSelection();

	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }

	    range.detach();
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	"use strict";

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType == 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getTextContentAccessor
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(35);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 93 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * IE8 throws if an input/textarea is disabled and we try to focus it.
	 * Focus only when necessary.
	 *
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  if (!node.disabled) {
	    node.focus();
	  }
	}

	module.exports = focusNode;


/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticEvent = __webpack_require__(83);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;



/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	"use strict";

	 var keyOf = __webpack_require__(78);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({CompositionEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPropagators = __webpack_require__(81);
	var SyntheticMouseEvent = __webpack_require__(98);

	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(78);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticUIEvent = __webpack_require__(99);
	var ViewportMetrics = __webpack_require__(38);

	var getEventModifierState = __webpack_require__(100);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      event.fromElement === event.srcElement ?
	        event.toElement :
	        event.fromElement
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticEvent = __webpack_require__(83);

	var getEventTarget = __webpack_require__(84);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 100 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	"use strict";

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	"use strict";

	var DOMProperty = __webpack_require__(10);
	var ExecutionEnvironment = __webpack_require__(35);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: null,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scrollLeft: MUST_USE_PROPERTY,
	    scrolling: null,
	    scrollTop: MUST_USE_PROPERTY,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
	    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
	    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
	    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
	    property: null // Supports OG in meta tags
	  },
	  DOMAttributeNames: {
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    encType: 'enctype',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);

	var emptyFunction = __webpack_require__(15);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var ReactDOMIDOperations = __webpack_require__(104);
	var ReactMarkupChecksum = __webpack_require__(112);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(46);
	var ReactReconcileTransaction = __webpack_require__(114);

	var getReactRootElementInContainer = __webpack_require__(50);
	var invariant = __webpack_require__(11);
	var setInnerHTML = __webpack_require__(111);


	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;


	/**
	 * Abstracts away all functionality of `ReactComponent` requires knowledge of
	 * the browser context.
	 */
	var ReactComponentBrowserEnvironment = {
	  ReactReconcileTransaction: ReactReconcileTransaction,

	  BackendIDOperations: ReactDOMIDOperations,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  },

	  /**
	   * @param {string} markup Markup string to place into the DOM Element.
	   * @param {DOMElement} container DOM Element to insert markup into.
	   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
	   * container if possible.
	   */
	  mountImageIntoNode: ReactPerf.measure(
	    'ReactComponentBrowserEnvironment',
	    'mountImageIntoNode',
	    function(markup, container, shouldReuseMarkup) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        container && (
	          container.nodeType === ELEMENT_NODE_TYPE ||
	            container.nodeType === DOC_NODE_TYPE
	        ),
	        'mountComponentIntoNode(...): Target container is not valid.'
	      ) : invariant(container && (
	        container.nodeType === ELEMENT_NODE_TYPE ||
	          container.nodeType === DOC_NODE_TYPE
	      )));

	      if (shouldReuseMarkup) {
	        if (ReactMarkupChecksum.canReuseMarkup(
	          markup,
	          getReactRootElementInContainer(container))) {
	          return;
	        } else {
	          ("production" !== process.env.NODE_ENV ? invariant(
	            container.nodeType !== DOC_NODE_TYPE,
	            'You\'re trying to render a component to the document using ' +
	            'server rendering but the checksum was invalid. This usually ' +
	            'means you rendered a different component type or props on ' +
	            'the client from the one on the server, or your render() ' +
	            'methods are impure. React cannot handle this case due to ' +
	            'cross-browser quirks by rendering at the document root. You ' +
	            'should look for environment dependent code in your components ' +
	            'and ensure the props are the same client and server side.'
	          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	          if ("production" !== process.env.NODE_ENV) {
	            console.warn(
	              'React attempted to use reuse markup in a container but the ' +
	              'checksum was invalid. This generally means that you are ' +
	              'using server rendering and the markup generated on the ' +
	              'server was not what the client was expecting. React injected ' +
	              'new markup to compensate which works but you have lost many ' +
	              'of the benefits of server rendering. Instead, figure out ' +
	              'why the markup being generated is different on the client ' +
	              'or server.'
	            );
	          }
	        }
	      }

	      ("production" !== process.env.NODE_ENV ? invariant(
	        container.nodeType !== DOC_NODE_TYPE,
	        'You\'re trying to render a component to the document but ' +
	          'you didn\'t use server rendering. We can\'t do this ' +
	          'without using server rendering due to cross-browser quirks. ' +
	          'See renderComponentToString() for server rendering.'
	      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	      setInnerHTML(container, markup);
	    }
	  )
	};

	module.exports = ReactComponentBrowserEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	"use strict";

	var CSSPropertyOperations = __webpack_require__(70);
	var DOMChildrenOperations = __webpack_require__(105);
	var DOMPropertyOperations = __webpack_require__(9);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(46);

	var invariant = __webpack_require__(11);
	var setInnerHTML = __webpack_require__(111);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updatePropertyByID',
	    function(id, name, value) {
	      var node = ReactMount.getNode(id);
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	        'updatePropertyByID(...): %s',
	        INVALID_PROPERTY_ERRORS[name]
	      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	      // If we're updating to null or undefined, we should remove the property
	      // from the DOM node instead of inadvertantly setting to a string. This
	      // brings us in line with the same behavior we have on initial render.
	      if (value != null) {
	        DOMPropertyOperations.setValueForProperty(node, name, value);
	      } else {
	        DOMPropertyOperations.deleteValueForProperty(node, name);
	      }
	    }
	  ),

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'deletePropertyByID',
	    function(id, name, value) {
	      var node = ReactMount.getNode(id);
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	        'updatePropertyByID(...): %s',
	        INVALID_PROPERTY_ERRORS[name]
	      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	      DOMPropertyOperations.deleteValueForProperty(node, name, value);
	    }
	  ),

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateStylesByID',
	    function(id, styles) {
	      var node = ReactMount.getNode(id);
	      CSSPropertyOperations.setValueForStyles(node, styles);
	    }
	  ),

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateInnerHTMLByID',
	    function(id, html) {
	      var node = ReactMount.getNode(id);
	      setInnerHTML(node, html);
	    }
	  ),

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateTextContentByID',
	    function(id, content) {
	      var node = ReactMount.getNode(id);
	      DOMChildrenOperations.updateTextContent(node, content);
	    }
	  ),

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'dangerouslyReplaceNodeWithMarkupByID',
	    function(id, markup) {
	      var node = ReactMount.getNode(id);
	      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	    }
	  ),

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'dangerouslyProcessChildrenUpdates',
	    function(updates, markup) {
	      for (var i = 0; i < updates.length; i++) {
	        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	      }
	      DOMChildrenOperations.processUpdates(updates, markup);
	    }
	  )
	};

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	"use strict";

	var Danger = __webpack_require__(106);
	var ReactMultiChildUpdateTypes = __webpack_require__(76);

	var getTextContentAccessor = __webpack_require__(92);
	var invariant = __webpack_require__(11);

	/**
	 * The DOM property to use when setting text content.
	 *
	 * @type {string}
	 * @private
	 */
	var textContentAccessor = getTextContentAccessor();

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	var updateTextContent;
	if (textContentAccessor === 'textContent') {
	  /**
	   * Sets the text content of `node` to `text`.
	   *
	   * @param {DOMElement} node Node to change
	   * @param {string} text New text content
	   */
	  updateTextContent = function(node, text) {
	    node.textContent = text;
	  };
	} else {
	  /**
	   * Sets the text content of `node` to `text`.
	   *
	   * @param {DOMElement} node Node to change
	   * @param {string} text New text content
	   */
	  updateTextContent = function(node, text) {
	    // In order to preserve newlines correctly, we can't use .innerText to set
	    // the contents (see #1080), so we empty the element then append a text node
	    while (node.firstChild) {
	      node.removeChild(node.firstChild);
	    }
	    if (text) {
	      var doc = node.ownerDocument || document;
	      node.appendChild(doc.createTextNode(text));
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: updateTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; update = updates[i]; i++) {
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting <p> or <a> tags, or using non-SVG elements in an <svg> '+
	          'parent. Try inspecting the child nodes of the element with React ' +
	          'ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; update = updates[k]; k++) {
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          updateTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(35);

	var createNodesFromMarkup = __webpack_require__(107);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(110);
	var invariant = __webpack_require__(11);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a Worker ' +
	      'thread. This is likely a bug in the framework. Please report ' +
	      'immediately.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      for (var resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (i = 0; i < renderNodes.length; ++i) {
	        var renderNode = renderNodes[i];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            "Danger: Discarding unexpected node:",
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. This is likely a bug in the framework. Please report ' +
	      'immediately.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See renderComponentToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(35);

	var createArrayFrom = __webpack_require__(108);
	var getMarkupWrap = __webpack_require__(110);
	var invariant = __webpack_require__(11);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFrom(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFrom(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule createArrayFrom
	 * @typechecks
	 */

	var toArray = __webpack_require__(109);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFrom = require('createArrayFrom');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFrom(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFrom(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFrom;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(11);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFrom.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(35);

	var invariant = __webpack_require__(11);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule setInnerHTML
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(35);

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (html.match(/^[ \r\n\t\f]/) ||
	          html[0] === '<' && (
	            html.indexOf('<noscript') !== -1 ||
	            html.indexOf('<script') !== -1 ||
	            html.indexOf('<style') !== -1 ||
	            html.indexOf('<meta') !== -1 ||
	            html.indexOf('<link') !== -1)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	"use strict";

	var adler32 = __webpack_require__(113);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 113 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	"use strict";

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonable good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	"use strict";

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(21);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactInputSelection = __webpack_require__(89);
	var ReactPutListenerQueue = __webpack_require__(115);
	var Transaction = __webpack_require__(59);

	var mixInto = __webpack_require__(58);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	mixInto(ReactReconcileTransaction, Transaction.Mixin);
	mixInto(ReactReconcileTransaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	"use strict";

	var PooledClass = __webpack_require__(21);
	var ReactBrowserEventEmitter = __webpack_require__(29);

	var mixInto = __webpack_require__(58);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	mixInto(ReactPutListenerQueue, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	"use strict";

	var ReactUpdates = __webpack_require__(56);
	var Transaction = __webpack_require__(59);

	var emptyFunction = __webpack_require__(15);
	var mixInto = __webpack_require__(58);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	mixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);
	mixInto(ReactDefaultBatchingStrategyTransaction, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b);
	    } else {
	      transaction.perform(callback, null, a, b);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMButton
	 */

	"use strict";

	var AutoFocusMixin = __webpack_require__(118);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);

	var keyMirror = __webpack_require__(19);

	// Store a reference to the <button> `ReactDOMComponent`.
	var button = ReactDOM.button;

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMButton',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	"use strict";

	var focusNode = __webpack_require__(93);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMForm
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var LocalEventTrapMixin = __webpack_require__(120);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);

	// Store a reference to the <form> `ReactDOMComponent`.
	var form = ReactDOM.form;

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMForm',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return this.transferPropsTo(form(null, this.props.children));
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	"use strict";

	var ReactBrowserEventEmitter = __webpack_require__(29);

	var accumulate = __webpack_require__(32);
	var forEachAccumulated = __webpack_require__(33);
	var invariant = __webpack_require__(11);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      this.getDOMNode()
	    );
	    this._localEventListeners = accumulate(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMImg
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var LocalEventTrapMixin = __webpack_require__(120);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);

	// Store a reference to the <img> `ReactDOMComponent`.
	var img = ReactDOM.img;

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMInput
	 */

	"use strict";

	var AutoFocusMixin = __webpack_require__(118);
	var DOMPropertyOperations = __webpack_require__(9);
	var LinkedValueUtils = __webpack_require__(123);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);
	var ReactMount = __webpack_require__(28);

	var invariant = __webpack_require__(11);
	var merge = __webpack_require__(40);

	// Store a reference to the <input> `ReactDOMComponent`.
	var input = ReactDOM.input;

	var instancesByReactID = {};

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMInput',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      checked: this.props.defaultChecked || false,
	      value: defaultValue != null ? defaultValue : null
	    };
	  },

	  shouldComponentUpdate: function() {
	    // Defer any updates to this component during the `onChange` handler.
	    return !this._isChanging;
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = merge(this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.value;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.checked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      this._isChanging = true;
	      returnValue = onChange.call(this, event);
	      this._isChanging = false;
	    }
	    this.setState({
	      checked: event.target.checked,
	      value: event.target.value
	    });

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // In some cases, this will actually change the `checked` state value.
	        // In other cases, there's no change but this forces a reconcile upon
	        // which componentDidUpdate will reset the DOM property to whatever it
	        // should be.
	        otherInstance.setState({
	          checked: false
	        });
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	"use strict";

	var ReactPropTypes = __webpack_require__(124);

	var invariant = __webpack_require__(11);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactPropTypes
	 */

	"use strict";

	var ReactDescriptor = __webpack_require__(44);
	var ReactPropTypeLocationNames = __webpack_require__(66);

	var emptyFunction = __webpack_require__(15);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  component: createComponentTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  renderable: createRenderableTypeChecker(),
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ")+
	          ("`" + componentName + "`.")
	        );
	      }
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns());
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	  }
	  return createChainableTypeChecker(validate);
	}

	function createComponentTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactDescriptor.isValidDescriptor(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a React component.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createRenderableTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isRenderable(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a renderable prop.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	  }
	  return createChainableTypeChecker(validate, 'expected `object`');
	}

	function isRenderable(propValue) {
	  switch(typeof propValue) {
	    // TODO: this was probably written with the assumption that we're not
	    // returning `this.props.component` directly from `render`. This is
	    // currently not supported but we should, to make it consistent.
	    case 'number':
	    case 'string':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isRenderable);
	      }
	      if (ReactDescriptor.isValidDescriptor(propValue)) {
	        return true;
	      }
	      for (var k in propValue) {
	        if (!isRenderable(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMOption
	 */

	"use strict";

	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);

	var warning = __webpack_require__(14);

	// Store a reference to the <option> `ReactDOMComponent`.
	var option = ReactDOM.option;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMOption',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMSelect
	 */

	"use strict";

	var AutoFocusMixin = __webpack_require__(118);
	var LinkedValueUtils = __webpack_require__(123);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);

	var merge = __webpack_require__(40);

	// Store a reference to the <select> `ReactDOMComponent`.
	var select = ReactDOM.select;

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * If `value` is supplied, updates <option> elements on mount and update.
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {?*} propValue For uncontrolled components, null/undefined. For
	 * controlled components, a string (or with `multiple`, a list of strings).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var multiple = component.props.multiple;
	  var value = propValue != null ? propValue : component.state.value;
	  var options = component.getDOMNode().options;
	  var selectedValue, i, l;
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0, l = value.length; i < l; ++i) {
	      selectedValue['' + value[i]] = true;
	    }
	  } else {
	    selectedValue = '' + value;
	  }
	  for (i = 0, l = options.length; i < l; i++) {
	    var selected = multiple ?
	      selectedValue.hasOwnProperty(options[i].value) :
	      options[i].value === selectedValue;

	    if (selected !== options[i].selected) {
	      options[i].selected = selected;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * string. If `multiple` is true, the prop must be an array of strings.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMSelect',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  getInitialState: function() {
	    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
	  },

	  componentWillReceiveProps: function(nextProps) {
	    if (!this.props.multiple && nextProps.multiple) {
	      this.setState({value: [this.state.value]});
	    } else if (this.props.multiple && !nextProps.multiple) {
	      this.setState({value: this.state.value[0]});
	    }
	  },

	  shouldComponentUpdate: function() {
	    // Defer any updates to this component during the `onChange` handler.
	    return !this._isChanging;
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = merge(this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentDidMount: function() {
	    updateOptions(this, LinkedValueUtils.getValue(this));
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    var prevMultiple = !!prevProps.multiple;
	    var multiple = !!this.props.multiple;
	    if (value != null || prevMultiple !== multiple) {
	      updateOptions(this, value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      this._isChanging = true;
	      returnValue = onChange.call(this, event);
	      this._isChanging = false;
	    }

	    var selectedValue;
	    if (this.props.multiple) {
	      selectedValue = [];
	      var options = event.target.options;
	      for (var i = 0, l = options.length; i < l; i++) {
	        if (options[i].selected) {
	          selectedValue.push(options[i].value);
	        }
	      }
	    } else {
	      selectedValue = event.target.value;
	    }

	    this.setState({value: selectedValue});
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	"use strict";

	var AutoFocusMixin = __webpack_require__(118);
	var DOMPropertyOperations = __webpack_require__(9);
	var LinkedValueUtils = __webpack_require__(123);
	var ReactBrowserComponentMixin = __webpack_require__(26);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);

	var invariant = __webpack_require__(11);
	var merge = __webpack_require__(40);

	var warning = __webpack_require__(14);

	// Store a reference to the <textarea> `ReactDOMComponent`.
	var textarea = ReactDOM.textarea;

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMTextarea',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  shouldComponentUpdate: function() {
	    // Defer any updates to this component during the `onChange` handler.
	    return !this._isChanging;
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = merge(this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      this._isChanging = true;
	      returnValue = onChange.call(this, event);
	      this._isChanging = false;
	    }
	    this.setState({value: event.target.value});
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	"use strict";

	var EventListener = __webpack_require__(129);
	var ExecutionEnvironment = __webpack_require__(35);
	var PooledClass = __webpack_require__(21);
	var ReactInstanceHandles = __webpack_require__(23);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(56);

	var getEventTarget = __webpack_require__(84);
	var getUnboundedScrollPosition = __webpack_require__(39);
	var mixInto = __webpack_require__(58);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	mixInto(TopLevelCallbackBookKeeping, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	    EventListener.listen(window, 'resize', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(15);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactInjection
	 */

	"use strict";

	var DOMProperty = __webpack_require__(10);
	var EventPluginHub = __webpack_require__(30);
	var ReactComponent = __webpack_require__(53);
	var ReactCompositeComponent = __webpack_require__(60);
	var ReactDOM = __webpack_require__(68);
	var ReactEmptyComponent = __webpack_require__(27);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactPerf = __webpack_require__(46);
	var ReactRootIndex = __webpack_require__(24);
	var ReactUpdates = __webpack_require__(56);

	var ReactInjection = {
	  Component: ReactComponent.injection,
	  CompositeComponent: ReactCompositeComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  DOM: ReactDOM.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SelectEventPlugin
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPropagators = __webpack_require__(81);
	var ReactInputSelection = __webpack_require__(89);
	var SyntheticEvent = __webpack_require__(83);

	var getActiveElement = __webpack_require__(94);
	var isTextInputElement = __webpack_require__(86);
	var keyOf = __webpack_require__(78);
	var shallowEqual = __webpack_require__(132);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  } else {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement != getActiveElement()) {
	    return;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule shallowEqual
	 */

	"use strict";

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B'a keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	"use strict";

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPluginUtils = __webpack_require__(17);
	var EventPropagators = __webpack_require__(81);
	var SyntheticClipboardEvent = __webpack_require__(135);
	var SyntheticEvent = __webpack_require__(83);
	var SyntheticFocusEvent = __webpack_require__(136);
	var SyntheticKeyboardEvent = __webpack_require__(137);
	var SyntheticMouseEvent = __webpack_require__(98);
	var SyntheticDragEvent = __webpack_require__(139);
	var SyntheticTouchEvent = __webpack_require__(140);
	var SyntheticUIEvent = __webpack_require__(99);
	var SyntheticWheelEvent = __webpack_require__(141);

	var invariant = __webpack_require__(11);
	var keyOf = __webpack_require__(78);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var topLevelType in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events.
	        if (nativeEvent.charCode === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticEvent = __webpack_require__(83);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;



/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticUIEvent = __webpack_require__(99);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticUIEvent = __webpack_require__(99);

	var getEventKey = __webpack_require__(138);
	var getEventModifierState = __webpack_require__(100);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated but its replacement is not yet final and not
	    // implemented in any major browser.
	    if (event.type === 'keypress') {
	      // IE8 does not implement "charCode", but "keyCode" has the correct value.
	      return 'charCode' in event ? event.charCode : event.keyCode;
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event. There is no need to determine the type of the event
	    // as `keyCode` and `charCode` are either aliased or default to zero.
	    return event.keyCode || event.charCode;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	"use strict";

	var invariant = __webpack_require__(11);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `which`/`keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    // Create the character from the `charCode` ourselves and use as an almost
	    // perfect replacement.
	    var charCode = 'charCode' in nativeEvent ?
	      nativeEvent.charCode :
	      nativeEvent.keyCode;

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(false, "Unexpected keyboard event type: %s", nativeEvent.type) : invariant(false));
	}

	module.exports = getEventKey;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticMouseEvent = __webpack_require__(98);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticUIEvent = __webpack_require__(99);

	var getEventModifierState = __webpack_require__(100);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	"use strict";

	var SyntheticMouseEvent = __webpack_require__(98);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	"use strict";

	var DOMProperty = __webpack_require__(10);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	"use strict";

	// Defeat circular references by requiring this directly.
	var ReactCompositeComponent = __webpack_require__(60);

	var invariant = __webpack_require__(11);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {function} componentClass convenience constructor to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(componentClass) {
	  var FullPageComponent = ReactCompositeComponent.createClass({
	    displayName: 'ReactFullPageComponent' + (
	      componentClass.type.displayName || ''
	    ),

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return this.transferPropsTo(componentClass(null, this.props.children));
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	"use strict";

	var DOMProperty = __webpack_require__(10);
	var ReactDefaultPerfAnalysis = __webpack_require__(145);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(46);

	var performanceNow = __webpack_require__(146);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {var args=Array.prototype.slice.call(arguments,0);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (moduleName === 'ReactDOMIDOperations' ||
	        moduleName === 'ReactComponentBrowserEnvironment') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === 'mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || // TODO: receiveComponent()?
	        fnName === '_renderValidatedComponent')) {

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.constructor.displayName,
	          owner: this._owner ? this._owner.constructor.displayName : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var merge = __webpack_require__(40);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  'mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = merge(measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = merge(measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = merge(measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggerd
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(147);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(35);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	"use strict";

	var ReactDescriptor = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(23);
	var ReactMarkupChecksum = __webpack_require__(112);
	var ReactServerRenderingTransaction =
	  __webpack_require__(149);

	var instantiateReactComponent = __webpack_require__(51);
	var invariant = __webpack_require__(11);

	/**
	 * @param {ReactComponent} component
	 * @return {string} the HTML markup
	 */
	function renderComponentToString(component) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactDescriptor.isValidDescriptor(component),
	    'renderComponentToString(): You must pass a valid ReactComponent.'
	  ) : invariant(ReactDescriptor.isValidDescriptor(component)));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    !(arguments.length === 2 && typeof arguments[1] === 'function'),
	    'renderComponentToString(): This function became synchronous and now ' +
	    'returns the generated markup. Please remove the second parameter.'
	  ) : invariant(!(arguments.length === 2 && typeof arguments[1] === 'function')));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(component);
	      var markup = componentInstance.mountComponent(id, transaction, 0);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactComponent} component
	 * @return {string} the HTML markup, without the extra React ID and checksum
	* (for generating static pages)
	 */
	function renderComponentToStaticMarkup(component) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactDescriptor.isValidDescriptor(component),
	    'renderComponentToStaticMarkup(): You must pass a valid ReactComponent.'
	  ) : invariant(ReactDescriptor.isValidDescriptor(component)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(component);
	      return componentInstance.mountComponent(id, transaction, 0);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderComponentToString: renderComponentToString,
	  renderComponentToStaticMarkup: renderComponentToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	"use strict";

	var PooledClass = __webpack_require__(21);
	var CallbackQueue = __webpack_require__(57);
	var ReactPutListenerQueue = __webpack_require__(115);
	var Transaction = __webpack_require__(59);

	var emptyFunction = __webpack_require__(15);
	var mixInto = __webpack_require__(58);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	mixInto(ReactServerRenderingTransaction, Transaction.Mixin);
	mixInto(ReactServerRenderingTransaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule onlyChild
	 */
	"use strict";

	var ReactDescriptor = __webpack_require__(44);

	var invariant = __webpack_require__(11);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactDescriptor.isValidDescriptor(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactDescriptor.isValidDescriptor(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 151 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactStateSetters
	 */

	"use strict";

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	"use strict";

	var shallowEqual = __webpack_require__(132);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	"use strict";

	var React = __webpack_require__(8);

	var ReactTransitionGroup = __webpack_require__(154);
	var ReactCSSTransitionGroupChild = __webpack_require__(157);

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },

	  getDefaultProps: function() {
	    return {
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },

	  render: function() {
	    return this.transferPropsTo(
	      ReactTransitionGroup(
	        {childFactory: this._wrapChild},
	        this.props.children
	      )
	    );
	  }
	});

	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	"use strict";

	var React = __webpack_require__(8);
	var ReactTransitionChildMapping = __webpack_require__(155);

	var cloneWithProps = __webpack_require__(156);
	var emptyFunction = __webpack_require__(15);
	var merge = __webpack_require__(40);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.func,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function() {
	    return {
	      component: React.DOM.span,
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = merge(this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },

	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = {};
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender[key] = cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key}
	        );
	      }
	    }
	    return this.transferPropsTo(this.props.component(null, childrenToRender));
	  }
	});

	module.exports = ReactTransitionGroup;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	"use strict";

	var ReactChildren = __webpack_require__(20);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    return ReactChildren.map(children, function(child) {
	      return child;
	    });
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want ot show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 * @providesModule cloneWithProps
	 */

	"use strict";

	var ReactPropTransferer = __webpack_require__(64);

	var keyOf = __webpack_require__(78);
	var warning = __webpack_require__(14);

	var CHILDREN_PROP = keyOf({children: null});

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {object} child child component you'd like to clone
	 * @param {object} props props you'd like to modify. They will be merged
	 * as if you used `transferPropsTo()`.
	 * @return {object} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.props.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactDescriptor.cloneAndReplaceProps.
	  return child.constructor(newProps);
	}

	module.exports = cloneWithProps;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	"use strict";

	var React = __webpack_require__(8);

	var CSSCore = __webpack_require__(158);
	var ReactTransitionEvents = __webpack_require__(159);

	var onlyChild = __webpack_require__(150);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;

	var noEventListener = null;


	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    console.warn(
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      NO_EVENT_TIMEOUT + 'ms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.'
	    );
	  };
	}

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;

	    var endListener = function() {
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      finishCallback && finishCallback();
	    };

	    ReactTransitionEvents.addEndEventListener(node, endListener);

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },

	  queueClass: function(className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	var invariant = __webpack_require__(11);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @returns {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(35);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;


/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule cx
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */
	function cx(classNames) {
	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}

	module.exports = cx;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule update
	 */

	"use strict";

	var copyProperties = __webpack_require__(16);
	var keyOf = __webpack_require__(78);
	var invariant = __webpack_require__(11);

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return copyProperties(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});

	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}

	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));

	  if (spec.hasOwnProperty(COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (spec.hasOwnProperty(COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    copyProperties(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (spec.hasOwnProperty(COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule ReactTestUtils
	 */

	"use strict";

	var EventConstants = __webpack_require__(18);
	var EventPluginHub = __webpack_require__(30);
	var EventPropagators = __webpack_require__(81);
	var React = __webpack_require__(8);
	var ReactDescriptor = __webpack_require__(44);
	var ReactDOM = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactMount = __webpack_require__(28);
	var ReactTextComponent = __webpack_require__(25);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(83);

	var mergeInto = __webpack_require__(41);
	var copyProperties = __webpack_require__(16);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.renderComponent(instance, div);
	  },

	  isDescriptor: function(descriptor) {
	    return ReactDescriptor.isValidDescriptor(descriptor);
	  },

	  isDescriptorOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactDescriptor.isValidDescriptor(inst) &&
	      inst.type === convenienceConstructor.type
	    );
	  },

	  isDOMComponent: function(inst) {
	    return !!(inst && inst.mountComponent && inst.tagName);
	  },

	  isDOMComponentDescriptor: function(inst) {
	    return !!(inst &&
	              ReactDescriptor.isValidDescriptor(inst) &&
	              !!inst.tagName);
	  },

	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type.type));
	  },

	  isCompositeComponentDescriptor: function(inst) {
	    if (!ReactDescriptor.isValidDescriptor(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },

	  isCompositeComponentDescriptorWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentDescriptor(inst) &&
	             (inst.constructor === type));
	  },

	  isTextComponent: function(inst) {
	    return inst instanceof ReactTextComponent.type;
	  },

	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var renderedChildren = inst._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test)
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test)
	      );
	    }
	    return ret;
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        instClassName &&
	        (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1
	      );
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for class:' + className);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    var ConvenienceConstructor = React.createClass({
	      render: function() {
	        var mockTagName = mockTagName || module.mockTagName || "div";
	        return ReactDOM[mockTagName](null, this.props.children);
	      }
	    });

	    copyProperties(module, ConvenienceConstructor);
	    module.mockImplementation(ConvenienceConstructor);

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },

	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    mergeInto(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);

	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    mergeInto(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}

	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}

	module.exports = ReactTestUtils;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var React = __webpack_require__(164);
	var Router = __webpack_require__(165);
	var Routes = Router.Routes;
	var Route = Router.Route;
	var NotFound = Router.NotFound;

	var App = __webpack_require__(221);
	var ListProducts = __webpack_require__(224);
	var NotFoundHandler = __webpack_require__(374);

	var appRouter = React.createElement(
	    Routes,
	    { location: "history" },
	    React.createElement(
	        Route,
	        { title: "ProductBuilder", handler: App },
	        React.createElement(Route, { name: "list", path: "/", handler: ListProducts }),
	        React.createElement(Route, { name: "edit", path: "/products/:productId/edit", handler: NotFoundHandler }),
	        React.createElement(NotFound, { title: "Page Not Found", handler: NotFoundHandler })
	    )
	);

	module.exports = appRouter;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(8);


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	exports.ActiveState = __webpack_require__(166);
	exports.AsyncState = __webpack_require__(170);
	exports.Link = __webpack_require__(183);
	exports.Redirect = __webpack_require__(201);
	exports.NotFound = __webpack_require__(204);
	exports.Route = __webpack_require__(206);
	exports.Routes = __webpack_require__(207);
	exports.setTitle = __webpack_require__(213);
	exports.goBack = __webpack_require__(214);
	exports.replaceWith = __webpack_require__(215);
	exports.transitionTo = __webpack_require__(216);
	exports.makeHref = __webpack_require__(217);
	exports.renderRoutesToString = __webpack_require__(218);


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(167);


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var ActiveStore = __webpack_require__(168);

	/**
	 * A mixin for components that need to know about the routes, params,
	 * and query that are currently active. Components that use it get two
	 * things:
	 *
	 *   1. An `isActive` static method they can use to check if a route,
	 *      params, and query are active.
	 *   2. An `updateActiveState` instance method that is called when the
	 *      active state changes.
	 *
	 * Example:
	 *
	 *   var Tab = React.createClass({
	 *     
	 *     mixins: [ Router.ActiveState ],
	 *
	 *     getInitialState: function () {
	 *       return {
	 *         isActive: false
	 *       };
	 *     },
	 *   
	 *     updateActiveState: function () {
	 *       this.setState({
	 *         isActive: Tab.isActive(routeName, params, query)
	 *       })
	 *     }
	 *   
	 *   });
	 */
	var ActiveState = {

	  statics: {

	    /**
	     * Returns true if the route with the given name, URL parameters, and query
	     * are all currently active.
	     */
	    isActive: ActiveStore.isActive

	  },

	  componentWillMount: function () {
	    ActiveStore.addChangeListener(this.handleActiveStateChange);
	    
	    if (this.updateActiveState)
	      this.updateActiveState();
	  },

	  componentWillUnmount: function () {
	    ActiveStore.removeChangeListener(this.handleActiveStateChange);
	  },

	  handleActiveStateChange: function () {
	    if (this.isMounted() && this.updateActiveState)
	      this.updateActiveState();
	  }

	};

	module.exports = ActiveState;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var ExecutionEnvironment = __webpack_require__(35);
	var EventEmitter = __webpack_require__(169).EventEmitter;

	var CHANGE_EVENT = 'change';
	var _events = new EventEmitter;

	function notifyChange() {
	  _events.emit(CHANGE_EVENT);
	}

	var _activeRoutes = [];
	var _activeParams = {};
	var _activeQuery = {};

	function routeIsActive(routeName) {
	  return _activeRoutes.some(function (route) {
	    return route.props.name === routeName;
	  });
	}

	function paramsAreActive(params) {
	  for (var property in params) {
	    if (_activeParams[property] !== String(params[property]))
	      return false;
	  }

	  return true;
	}

	function queryIsActive(query) {
	  for (var property in query) {
	    if (_activeQuery[property] !== String(query[property]))
	      return false;
	  }

	  return true;
	}

	/**
	 * The ActiveStore keeps track of which routes, URL and query parameters are
	 * currently active on a page. <Link>s subscribe to the ActiveStore to know
	 * whether or not they are active.
	 */
	var ActiveStore = {

	  addChangeListener: function (listener) {
	    if (!ExecutionEnvironment.canUseDOM) 
	      return;
	    
	    _events.on(CHANGE_EVENT, listener);
	  },

	  removeChangeListener: function (listener) {
	    _events.removeListener(CHANGE_EVENT, listener);
	  },

	  /**
	   * Updates the currently active state and notifies all listeners.
	   * This is automatically called by routes as they become active.
	   */
	  updateState: function (state) {
	    state = state || {};

	    _activeRoutes = state.activeRoutes || [];
	    _activeParams = state.activeParams || {};
	    _activeQuery = state.activeQuery || {};

	    notifyChange();
	  },

	  /**
	   * Returns true if the route with the given name, URL parameters, and query
	   * are all currently active.
	   */
	  isActive: function (routeName, params, query) {
	    var isActive = routeIsActive(routeName) && paramsAreActive(params);

	    if (query)
	      return isActive && queryIsActive(query);

	    return isActive;
	  }

	};

	module.exports = ActiveStore;


/***/ },
/* 169 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(171);


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(164);
	var resolveAsyncState = __webpack_require__(172);

	/**
	 * A mixin for route handler component classes that fetch at least
	 * part of their state asynchronously. Classes that use it should
	 * declare a static `getInitialAsyncState` method that fetches state
	 * for a component after it mounts. This function is given three
	 * arguments: 1) the current route params, 2) the current query and
	 * 3) a function that can be used to set state as it is received.
	 *
	 * Much like the familiar `getInitialState` method, `getInitialAsyncState`
	 * should return a hash of key/value pairs to use in the component's
	 * state. The difference is that the values may be promises. As these
	 * values resolve, the component's state is updated. You should only
	 * ever need to use the setState function for doing things like
	 * streaming data and/or updating progress.
	 *
	 * Example:
	 *
	 *   var User = React.createClass({
	 *   
	 *     statics: {
	 *   
	 *       getInitialAsyncState: function (params, query, setState) {
	 *         // Return a hash with keys named after the state variables
	 *         // you want to set, as you normally do in getInitialState,
	 *         // except the values may be immediate values or promises.
	 *         // The state is automatically updated as promises resolve.
	 *         return {
	 *           user: getUserByID(params.userID) // may be a promise
	 *         };
	 *   
	 *         // Or, use the setState function to stream data!
	 *         var buffer = '';
	 *   
	 *         return {
	 *
	 *           // Same as above, the stream state variable is set to the
	 *           // value returned by this promise when it resolves.
	 *           stream: getStreamingData(params.userID, function (chunk) {
	 *             buffer += chunk;
	 *   
	 *             // Notify of progress.
	 *             setState({
	 *               streamBuffer: buffer
	 *             });
	 *           })
	 *   
	 *         };
	 *       }
	 *   
	 *     },
	 *   
	 *     getInitialState: function () {
	 *       return {
	 *         user: null,        // Receives a value when getUserByID resolves.
	 *         stream: null,      // Receives a value when getStreamingData resolves.
	 *         streamBuffer: ''   // Used to track data as it loads.
	 *       };
	 *     },
	 *   
	 *     render: function () {
	 *       if (!this.state.user)
	 *         return <LoadingUser/>;
	 *   
	 *       return (
	 *         <div>
	 *           <p>Welcome {this.state.user.name}!</p>
	 *           <p>So far, you've received {this.state.streamBuffer.length} data!</p>
	 *         </div>
	 *       );
	 *     }
	 *   
	 *   });
	 *
	 * When testing, use the `initialAsyncState` prop to simulate asynchronous
	 * data fetching. When this prop is present, no attempt is made to retrieve
	 * additional state via `getInitialAsyncState`.
	 */
	var AsyncState = {

	  propTypes: {
	    initialAsyncState: React.PropTypes.object
	  },

	  getInitialState: function () {
	    return this.props.initialAsyncState || {};
	  },

	  updateAsyncState: function (state) {
	    if (this.isMounted())
	      this.setState(state);
	  },

	  componentDidMount: function () {
	    if (this.props.initialAsyncState || !this.constructor.getInitialAsyncState)
	      return;

	    resolveAsyncState(
	      this.constructor.getInitialAsyncState(this.props.params, this.props.query, this.updateAsyncState),
	      this.updateAsyncState
	    );
	  }

	};

	module.exports = AsyncState;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var Promise = __webpack_require__(173).Promise;

	/**
	 * Resolves all values in asyncState and calls the setState
	 * function with new state as they resolve. Returns a promise
	 * that resolves after all values are resolved.
	 */
	function resolveAsyncState(asyncState, setState) {
	  if (asyncState == null)
	    return Promise.resolve();

	  var keys = Object.keys(asyncState);
	  
	  return Promise.all(
	    keys.map(function (key) {
	      return Promise.resolve(asyncState[key]).then(function (value) {
	        var newState = {};
	        newState[key] = value;
	        setState(newState);
	      });
	    })
	  );
	}

	module.exports = resolveAsyncState;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Promise = __webpack_require__(174).Promise;
	var polyfill = __webpack_require__(182).polyfill;
	exports.Promise = Promise;
	exports.polyfill = polyfill;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var config = __webpack_require__(175).config;
	var configure = __webpack_require__(175).configure;
	var objectOrFunction = __webpack_require__(176).objectOrFunction;
	var isFunction = __webpack_require__(176).isFunction;
	var now = __webpack_require__(176).now;
	var all = __webpack_require__(177).all;
	var race = __webpack_require__(178).race;
	var staticResolve = __webpack_require__(179).resolve;
	var staticReject = __webpack_require__(180).reject;
	var asap = __webpack_require__(181).asap;

	var counter = 0;

	config.async = asap; // default async is asap;

	function Promise(resolver) {
	  if (!isFunction(resolver)) {
	    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	  }

	  if (!(this instanceof Promise)) {
	    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	  }

	  this._subscribers = [];

	  invokeResolver(resolver, this);
	}

	function invokeResolver(resolver, promise) {
	  function resolvePromise(value) {
	    resolve(promise, value);
	  }

	  function rejectPromise(reason) {
	    reject(promise, reason);
	  }

	  try {
	    resolver(resolvePromise, rejectPromise);
	  } catch(e) {
	    rejectPromise(e);
	  }
	}

	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value, error, succeeded, failed;

	  if (hasCallback) {
	    try {
	      value = callback(detail);
	      succeeded = true;
	    } catch(e) {
	      failed = true;
	      error = e;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }

	  if (handleThenable(promise, value)) {
	    return;
	  } else if (hasCallback && succeeded) {
	    resolve(promise, value);
	  } else if (failed) {
	    reject(promise, error);
	  } else if (settled === FULFILLED) {
	    resolve(promise, value);
	  } else if (settled === REJECTED) {
	    reject(promise, value);
	  }
	}

	var PENDING   = void 0;
	var SEALED    = 0;
	var FULFILLED = 1;
	var REJECTED  = 2;

	function subscribe(parent, child, onFulfillment, onRejection) {
	  var subscribers = parent._subscribers;
	  var length = subscribers.length;

	  subscribers[length] = child;
	  subscribers[length + FULFILLED] = onFulfillment;
	  subscribers[length + REJECTED]  = onRejection;
	}

	function publish(promise, settled) {
	  var child, callback, subscribers = promise._subscribers, detail = promise._detail;

	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];

	    invokeCallback(settled, child, callback, detail);
	  }

	  promise._subscribers = null;
	}

	Promise.prototype = {
	  constructor: Promise,

	  _state: undefined,
	  _detail: undefined,
	  _subscribers: undefined,

	  then: function(onFulfillment, onRejection) {
	    var promise = this;

	    var thenPromise = new this.constructor(function() {});

	    if (this._state) {
	      var callbacks = arguments;
	      config.async(function invokePromiseCallback() {
	        invokeCallback(promise._state, thenPromise, callbacks[promise._state - 1], promise._detail);
	      });
	    } else {
	      subscribe(this, thenPromise, onFulfillment, onRejection);
	    }

	    return thenPromise;
	  },

	  'catch': function(onRejection) {
	    return this.then(null, onRejection);
	  }
	};

	Promise.all = all;
	Promise.race = race;
	Promise.resolve = staticResolve;
	Promise.reject = staticReject;

	function handleThenable(promise, value) {
	  var then = null,
	  resolved;

	  try {
	    if (promise === value) {
	      throw new TypeError("A promises callback cannot return that same promise.");
	    }

	    if (objectOrFunction(value)) {
	      then = value.then;

	      if (isFunction(then)) {
	        then.call(value, function(val) {
	          if (resolved) { return true; }
	          resolved = true;

	          if (value !== val) {
	            resolve(promise, val);
	          } else {
	            fulfill(promise, val);
	          }
	        }, function(val) {
	          if (resolved) { return true; }
	          resolved = true;

	          reject(promise, val);
	        });

	        return true;
	      }
	    }
	  } catch (error) {
	    if (resolved) { return true; }
	    reject(promise, error);
	    return true;
	  }

	  return false;
	}

	function resolve(promise, value) {
	  if (promise === value) {
	    fulfill(promise, value);
	  } else if (!handleThenable(promise, value)) {
	    fulfill(promise, value);
	  }
	}

	function fulfill(promise, value) {
	  if (promise._state !== PENDING) { return; }
	  promise._state = SEALED;
	  promise._detail = value;

	  config.async(publishFulfillment, promise);
	}

	function reject(promise, reason) {
	  if (promise._state !== PENDING) { return; }
	  promise._state = SEALED;
	  promise._detail = reason;

	  config.async(publishRejection, promise);
	}

	function publishFulfillment(promise) {
	  publish(promise, promise._state = FULFILLED);
	}

	function publishRejection(promise) {
	  publish(promise, promise._state = REJECTED);
	}

	exports.Promise = Promise;

/***/ },
/* 175 */
/***/ function(module, exports) {

	"use strict";
	var config = {
	  instrument: false
	};

	function configure(name, value) {
	  if (arguments.length === 2) {
	    config[name] = value;
	  } else {
	    return config[name];
	  }
	}

	exports.config = config;
	exports.configure = configure;

/***/ },
/* 176 */
/***/ function(module, exports) {

	"use strict";
	function objectOrFunction(x) {
	  return isFunction(x) || (typeof x === "object" && x !== null);
	}

	function isFunction(x) {
	  return typeof x === "function";
	}

	function isArray(x) {
	  return Object.prototype.toString.call(x) === "[object Array]";
	}

	// Date.now is not available in browsers < IE9
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility
	var now = Date.now || function() { return new Date().getTime(); };


	exports.objectOrFunction = objectOrFunction;
	exports.isFunction = isFunction;
	exports.isArray = isArray;
	exports.now = now;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/* global toString */

	var isArray = __webpack_require__(176).isArray;
	var isFunction = __webpack_require__(176).isFunction;

	/**
	  Returns a promise that is fulfilled when all the given promises have been
	  fulfilled, or rejected if any of them become rejected. The return promise
	  is fulfilled with an array that gives all the values in the order they were
	  passed in the `promises` array argument.

	  Example:

	  ```javascript
	  var promise1 = RSVP.resolve(1);
	  var promise2 = RSVP.resolve(2);
	  var promise3 = RSVP.resolve(3);
	  var promises = [ promise1, promise2, promise3 ];

	  RSVP.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```

	  If any of the `promises` given to `RSVP.all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:

	  Example:

	  ```javascript
	  var promise1 = RSVP.resolve(1);
	  var promise2 = RSVP.reject(new Error("2"));
	  var promise3 = RSVP.reject(new Error("3"));
	  var promises = [ promise1, promise2, promise3 ];

	  RSVP.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```

	  @method all
	  @for RSVP
	  @param {Array} promises
	  @param {String} label
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	*/
	function all(promises) {
	  /*jshint validthis:true */
	  var Promise = this;

	  if (!isArray(promises)) {
	    throw new TypeError('You must pass an array to all.');
	  }

	  return new Promise(function(resolve, reject) {
	    var results = [], remaining = promises.length,
	    promise;

	    if (remaining === 0) {
	      resolve([]);
	    }

	    function resolver(index) {
	      return function(value) {
	        resolveAll(index, value);
	      };
	    }

	    function resolveAll(index, value) {
	      results[index] = value;
	      if (--remaining === 0) {
	        resolve(results);
	      }
	    }

	    for (var i = 0; i < promises.length; i++) {
	      promise = promises[i];

	      if (promise && isFunction(promise.then)) {
	        promise.then(resolver(i), reject);
	      } else {
	        resolveAll(i, promise);
	      }
	    }
	  });
	}

	exports.all = all;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/* global toString */
	var isArray = __webpack_require__(176).isArray;

	/**
	  `RSVP.race` allows you to watch a series of promises and act as soon as the
	  first promise given to the `promises` argument fulfills or rejects.

	  Example:

	  ```javascript
	  var promise1 = new RSVP.Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve("promise 1");
	    }, 200);
	  });

	  var promise2 = new RSVP.Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve("promise 2");
	    }, 100);
	  });

	  RSVP.race([promise1, promise2]).then(function(result){
	    // result === "promise 2" because it was resolved before promise1
	    // was resolved.
	  });
	  ```

	  `RSVP.race` is deterministic in that only the state of the first completed
	  promise matters. For example, even if other promises given to the `promises`
	  array argument are resolved, but the first completed promise has become
	  rejected before the other promises became fulfilled, the returned promise
	  will become rejected:

	  ```javascript
	  var promise1 = new RSVP.Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve("promise 1");
	    }, 200);
	  });

	  var promise2 = new RSVP.Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error("promise 2"));
	    }, 100);
	  });

	  RSVP.race([promise1, promise2]).then(function(result){
	    // Code here never runs because there are rejected promises!
	  }, function(reason){
	    // reason.message === "promise2" because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```

	  @method race
	  @for RSVP
	  @param {Array} promises array of promises to observe
	  @param {String} label optional string for describing the promise returned.
	  Useful for tooling.
	  @return {Promise} a promise that becomes fulfilled with the value the first
	  completed promises is resolved with if the first completed promise was
	  fulfilled, or rejected with the reason that the first completed promise
	  was rejected with.
	*/
	function race(promises) {
	  /*jshint validthis:true */
	  var Promise = this;

	  if (!isArray(promises)) {
	    throw new TypeError('You must pass an array to race.');
	  }
	  return new Promise(function(resolve, reject) {
	    var results = [], promise;

	    for (var i = 0; i < promises.length; i++) {
	      promise = promises[i];

	      if (promise && typeof promise.then === 'function') {
	        promise.then(resolve, reject);
	      } else {
	        resolve(promise);
	      }
	    }
	  });
	}

	exports.race = race;

/***/ },
/* 179 */
/***/ function(module, exports) {

	"use strict";
	function resolve(value) {
	  /*jshint validthis:true */
	  if (value && typeof value === 'object' && value.constructor === this) {
	    return value;
	  }

	  var Promise = this;

	  return new Promise(function(resolve) {
	    resolve(value);
	  });
	}

	exports.resolve = resolve;

/***/ },
/* 180 */
/***/ function(module, exports) {

	"use strict";
	/**
	  `RSVP.reject` returns a promise that will become rejected with the passed
	  `reason`. `RSVP.reject` is essentially shorthand for the following:

	  ```javascript
	  var promise = new RSVP.Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });

	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```

	  Instead of writing the above, your code now simply becomes the following:

	  ```javascript
	  var promise = RSVP.reject(new Error('WHOOPS'));

	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```

	  @method reject
	  @for RSVP
	  @param {Any} reason value that the returned promise will be rejected with.
	  @param {String} label optional string for identifying the returned promise.
	  Useful for tooling.
	  @return {Promise} a promise that will become rejected with the given
	  `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Promise = this;

	  return new Promise(function (resolve, reject) {
	    reject(reason);
	  });
	}

	exports.reject = reject;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";
	var browserGlobal = (typeof window !== 'undefined') ? window : {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var local = (typeof global !== 'undefined') ? global : (this === undefined? window:this);

	// node
	function useNextTick() {
	  return function() {
	    process.nextTick(flush);
	  };
	}

	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });

	  return function() {
	    node.data = (iterations = ++iterations % 2);
	  };
	}

	function useSetTimeout() {
	  return function() {
	    local.setTimeout(flush, 1);
	  };
	}

	var queue = [];
	function flush() {
	  for (var i = 0; i < queue.length; i++) {
	    var tuple = queue[i];
	    var callback = tuple[0], arg = tuple[1];
	    callback(arg);
	  }
	  queue = [];
	}

	var scheduleFlush;

	// Decide what async method to use to triggering processing of queued callbacks:
	if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else {
	  scheduleFlush = useSetTimeout();
	}

	function asap(callback, arg) {
	  var length = queue.push([callback, arg]);
	  if (length === 1) {
	    // If length is 1, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    scheduleFlush();
	  }
	}

	exports.asap = asap;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	/*global self*/
	var RSVPPromise = __webpack_require__(174).Promise;
	var isFunction = __webpack_require__(176).isFunction;

	function polyfill() {
	  var local;

	  if (typeof global !== 'undefined') {
	    local = global;
	  } else if (typeof window !== 'undefined' && window.document) {
	    local = window;
	  } else {
	    local = self;
	  }

	  var es6PromiseSupport = 
	    "Promise" in local &&
	    // Some of these methods are missing from
	    // Firefox/Chrome experimental implementations
	    "resolve" in local.Promise &&
	    "reject" in local.Promise &&
	    "all" in local.Promise &&
	    "race" in local.Promise &&
	    // Older version of the spec had a resolver object
	    // as the arg rather than a function
	    (function() {
	      var resolve;
	      new local.Promise(function(r) { resolve = r; });
	      return isFunction(resolve);
	    }());

	  if (!es6PromiseSupport) {
	    local.Promise = RSVPPromise;
	  }
	}

	exports.polyfill = polyfill;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(184);


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(164);
	var ActiveState = __webpack_require__(167);
	var withoutProperties = __webpack_require__(185);
	var transitionTo = __webpack_require__(186);
	var makeHref = __webpack_require__(199);
	var hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
	/**
	 * A map of <Link> component props that are reserved for use by the
	 * router and/or React. All other props are used as params that are
	 * interpolated into the link's path.
	 */
	var RESERVED_PROPS = {
	  to: true,
	  className: true,
	  activeClassName: true,
	  query: true,
	  children: true // ReactChildren
	};

	/**
	 * <Link> components are used to create an <a> element that links to a route.
	 * When that route is active, the link gets an "active" class name (or the
	 * value of its `activeClassName` prop).
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route name="showPost" path="/posts/:postId" handler={Post}/>
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to="showPost" postId="123"/>
	 *
	 * In addition to params, links may pass along query string parameters
	 * using the `query` prop.
	 *
	 *   <Link to="showPost" postId="123" query={{show:true}}/>
	 */
	var Link = React.createClass({

	  displayName: 'Link',

	  mixins: [ ActiveState ],

	  statics: {

	    getUnreservedProps: function (props) {
	      return withoutProperties(props, RESERVED_PROPS);
	    }

	  },

	  propTypes: {
	    to: React.PropTypes.string.isRequired,
	    activeClassName: React.PropTypes.string.isRequired,
	    query: React.PropTypes.object,
	    onClick: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      activeClassName: 'active'
	    };
	  },

	  getInitialState: function () {
	    return {
	      isActive: false
	    };
	  },

	  /**
	   * Returns a hash of URL parameters to use in this <Link>'s path.
	   */
	  getParams: function () {
	    return Link.getUnreservedProps(this.props);
	  },

	  /**
	   * Returns the value of the "href" attribute to use on the DOM element.
	   */
	  getHref: function () {
	    return makeHref(this.props.to, this.getParams(), this.props.query);
	  },

	  /**
	   * Returns the value of the "class" attribute to use on the DOM element, which contains
	   * the value of the activeClassName property when this <Link> is active.
	   */
	  getClassName: function () {
	    var className = this.props.className || '';

	    if (this.state.isActive)
	      return className + ' ' + this.props.activeClassName;

	    return className;
	  },

	  componentWillReceiveProps: function (nextProps) {
	    var params = Link.getUnreservedProps(nextProps);

	    this.setState({
	      isActive: Link.isActive(nextProps.to, params, nextProps.query)
	    });
	  },

	  updateActiveState: function () {
	    this.setState({
	      isActive: Link.isActive(this.props.to, this.getParams(), this.props.query)
	    });
	  },

	  handleClick: function (event) {
	    var allowTransition = true;
	    var ret;

	    if (this.props.onClick)
	      ret = this.props.onClick(event);

	    if (isModifiedEvent(event) || !isLeftClick(event))
	      return;

	    if (ret === false || event.defaultPrevented === true)
	      allowTransition = false;

	    event.preventDefault();

	    if (allowTransition)
	      transitionTo(this.props.to, this.getParams(), this.props.query);
	  },

	  render: function () {
	    var props = {
	      href: this.getHref(),
	      className: this.getClassName(),
	      onClick: this.handleClick
	    };

	    // pull in props without overriding
	    for (var propName in this.props) {
	      if (hasOwn(this.props, propName) && hasOwn(props, propName) === false) {
	        props[propName] = this.props[propName];
	      }
	    }

	    return React.DOM.a(props, this.props.children);
	  }

	});

	function isLeftClick(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	module.exports = Link;


/***/ },
/* 185 */
/***/ function(module, exports) {

	function withoutProperties(object, properties) {
	  var result = {};

	  for (var property in object) {
	    if (object.hasOwnProperty(property) && !properties[property])
	      result[property] = object[property];
	  }

	  return result;
	}

	module.exports = withoutProperties;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var PathStore = __webpack_require__(187);
	var makePath = __webpack_require__(192);

	/**
	 * Transitions to the URL specified in the arguments by pushing
	 * a new URL onto the history stack.
	 */
	function transitionTo(to, params, query) {
	  PathStore.push(makePath(to, params, query));
	}

	module.exports = transitionTo;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var warning = __webpack_require__(14);
	var EventEmitter = __webpack_require__(169).EventEmitter;
	var supportsHistory = __webpack_require__(188);
	var HistoryLocation = __webpack_require__(189);
	var RefreshLocation = __webpack_require__(191);

	var CHANGE_EVENT = 'change';
	var _events = new EventEmitter;

	function notifyChange() {
	  _events.emit(CHANGE_EVENT);
	}

	var _location;

	/**
	 * The PathStore keeps track of the current URL path and manages
	 * the location strategy that is used to update the URL.
	 */
	var PathStore = {

	  addChangeListener: function (listener) {
	    _events.on(CHANGE_EVENT, listener);
	  },

	  removeChangeListener: function (listener) {
	    _events.removeListener(CHANGE_EVENT, listener);

	    // Automatically teardown when the last listener is removed.
	    if (EventEmitter.listenerCount(_events, CHANGE_EVENT) === 0)
	      PathStore.teardown();
	  },

	  setup: function (location) {
	    // When using HistoryLocation, automatically fallback
	    // to RefreshLocation in browsers that do not support
	    // the HTML5 history API.
	    if (location === HistoryLocation && !supportsHistory())
	      location = RefreshLocation;

	    if (_location == null) {
	      _location = location;

	      if (_location && typeof _location.setup === 'function')
	        _location.setup(notifyChange);
	    } else {
	      warning(
	        _location === location,
	        'Cannot use location %s, already using %s', location, _location
	      );
	    }
	  },

	  teardown: function () {
	    if (_location && typeof _location.teardown === 'function')
	      _location.teardown();

	    _location = null;
	  },

	  getLocation: function () {
	    return _location;
	  },

	  push: function (path) {
	    if (_location.getCurrentPath() !== path)
	      _location.push(path);
	  },

	  replace: function (path) {
	    if (_location.getCurrentPath() !== path)
	      _location.replace(path);
	  },

	  pop: function () {
	    _location.pop();
	  },

	  getCurrentPath: function () {
	    return _location.getCurrentPath();
	  }

	};

	module.exports = PathStore;


/***/ },
/* 188 */
/***/ function(module, exports) {

	function supportsHistory() {
	  /*! taken from modernizr
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   */
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 ||
	      (ua.indexOf('Android 4.0') !== -1)) &&
	      ua.indexOf('Mobile Safari') !== -1 &&
	      ua.indexOf('Chrome') === -1) {
	    return false;
	  }
	  return (window.history && 'pushState' in window.history);
	}

	module.exports = supportsHistory;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(11);
	var ExecutionEnvironment = __webpack_require__(35);
	var getWindowPath = __webpack_require__(190);

	var _onChange;

	/**
	 * Location handler that uses HTML5 history.
	 */
	var HistoryLocation = {

	  setup: function (onChange) {
	    invariant(
	      ExecutionEnvironment.canUseDOM,
	      'You cannot use HistoryLocation in an environment with no DOM'
	    );

	    _onChange = onChange;

	    if (window.addEventListener) {
	      window.addEventListener('popstate', _onChange, false);
	    } else {
	      window.attachEvent('popstate', _onChange);
	    }
	  },

	  teardown: function () {
	    if (window.removeEventListener) {
	      window.removeEventListener('popstate', _onChange, false);
	    } else {
	      window.detachEvent('popstate', _onChange);
	    }
	  },

	  push: function (path) {
	    window.history.pushState({ path: path }, '', path);
	    _onChange();
	  },

	  replace: function (path) {
	    window.history.replaceState({ path: path }, '', path);
	    _onChange();
	  },

	  pop: function () {
	    window.history.back();
	  },

	  getCurrentPath: getWindowPath,

	  toString: function () {
	    return '<HistoryLocation>';
	  }

	};

	module.exports = HistoryLocation;


/***/ },
/* 190 */
/***/ function(module, exports) {

	/**
	 * Returns the current URL path from `window.location`, including query string
	 */
	function getWindowPath() {
	  return window.location.pathname + window.location.search;
	}

	module.exports = getWindowPath;



/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(11);
	var ExecutionEnvironment = __webpack_require__(35);
	var getWindowPath = __webpack_require__(190);

	/**
	 * Location handler that uses full page refreshes. This is
	 * used as the fallback for HistoryLocation in browsers that
	 * do not support the HTML5 history API.
	 */
	var RefreshLocation = {

	  setup: function () {
	    invariant(
	      ExecutionEnvironment.canUseDOM,
	      'You cannot use RefreshLocation in an environment with no DOM'
	    );
	  },

	  push: function (path) {
	    window.location = path;
	  },

	  replace: function (path) {
	    window.location.replace(path);
	  },

	  pop: function () {
	    window.history.back();
	  },

	  getCurrentPath: getWindowPath,

	  toString: function () {
	    return '<RefreshLocation>';
	  }

	};

	module.exports = RefreshLocation;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(11);
	var RouteStore = __webpack_require__(193);
	var Path = __webpack_require__(194);

	/**
	 * Returns an absolute URL path created from the given route name, URL
	 * parameters, and query values.
	 */
	function makePath(to, params, query) {
	  var path;
	  if (to.charAt(0) === '/') {
	    path = Path.normalize(to); // Absolute path.
	  } else {
	    var route = RouteStore.getRouteByName(to);

	    invariant(
	      route,
	      'Unable to find a route named "' + to + '". Make sure you have ' +
	      'a <Route name="' + to + '"> defined somewhere in your routes'
	    );

	    path = route.props.path;
	  }

	  return Path.withQuery(Path.injectParams(path, params), query);
	}

	module.exports = makePath;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(164);
	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(14);
	var Path = __webpack_require__(194);

	var _namedRoutes = {};

	/**
	 * The RouteStore contains a directory of all <Route>s in the system. It is
	 * used primarily for looking up routes by name so that <Link>s can use a
	 * route name in the "to" prop and users can use route names in `Router.transitionTo`
	 * and other high-level utility methods.
	 */
	var RouteStore = {

	  /**
	   * Removes all references to <Route>s from the store. Should only ever
	   * really be used in tests to clear the store between test runs.
	   */
	  unregisterAllRoutes: function () {
	    _namedRoutes = {};
	  },

	  /**
	   * Removes the reference to the given <Route> and all of its children
	   * from the store.
	   */
	  unregisterRoute: function (route) {
	    if (route.props.name)
	      delete _namedRoutes[route.props.name];

	    React.Children.forEach(route.props.children, function (child) {
	      RouteStore.unregisterRoute(child);
	    });
	  },

	  /**
	   * Registers a <Route> and all of its children with the store. Also,
	   * does some normalization and validation on route props.
	   */
	  registerRoute: function (route, _parentRoute) {
	    // Make sure the <Route>'s path begins with a slash. Default to its name.
	    // We can't do this in getDefaultProps because it may not be called on
	    // <Route>s that are never actually mounted.
	    if (route.props.path || route.props.name) {
	      route.props.path = Path.normalize(route.props.path || route.props.name);
	    } else {
	      route.props.path = '/';
	    }

	    // Make sure the <Route> has a valid React component for a handler.
	    invariant(
	      React.isValidClass(route.props.handler),
	      'The handler for Route "' + (route.props.name || route.props.path) + '" ' +
	      'must be a valid React component'
	    );

	    // Make sure the <Route> has all params that its parent needs.
	    if (_parentRoute) {
	      var paramNames = Path.extractParamNames(route.props.path);

	      Path.extractParamNames(_parentRoute.props.path).forEach(function (paramName) {
	        invariant(
	          paramNames.indexOf(paramName) !== -1,
	          'The nested route path "' + route.props.path + '" is missing the "' + paramName + '" ' +
	          'parameter of its parent path "' + _parentRoute.props.path + '"'
	        );
	      });
	    }

	    // Make sure the <Route> can be looked up by <Link>s.
	    if (route.props.name) {
	      var existingRoute = _namedRoutes[route.props.name];

	      invariant(
	        !existingRoute || route === existingRoute,
	        'You cannot use the name "' + route.props.name + '" for more than one route'
	      );

	      _namedRoutes[route.props.name] = route;
	    }

	    React.Children.forEach(route.props.children, function (child) {
	      RouteStore.registerRoute(child, route);
	    });
	  },

	  /**
	   * Returns the Route object with the given name, if one exists.
	   */
	  getRouteByName: function (routeName) {
	    return _namedRoutes[routeName] || null;
	  }

	};

	module.exports = RouteStore;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(11);
	var copyProperties = __webpack_require__(16);
	var qs = __webpack_require__(195);
	var URL = __webpack_require__(198);

	var paramMatcher = /((?::[a-z_$][a-z0-9_$]*)|\*)/ig;
	var queryMatcher = /\?(.+)/;

	function getParamName(pathSegment) {
	  return pathSegment === '*' ? 'splat' : pathSegment.substr(1);
	}

	var _compiledPatterns = {};

	function compilePattern(pattern) {
	  if (_compiledPatterns[pattern])
	    return _compiledPatterns[pattern];

	  var compiled = _compiledPatterns[pattern] = {};
	  var paramNames = compiled.paramNames = [];

	  var source = pattern.replace(paramMatcher, function (match, pathSegment) {
	    paramNames.push(getParamName(pathSegment));
	    return pathSegment === '*' ? '(.*?)' : '([^/?#]+)';
	  });

	  compiled.matcher = new RegExp('^' + source + '$', 'i');

	  return compiled;
	}

	function isDynamicPattern(pattern) {
	  return pattern.indexOf(':') !== -1 || pattern.indexOf('*') !== -1;
	}

	var Path = {

	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function (pattern, path) {
	    if (!pattern)
	      return null;

	    if (!isDynamicPattern(pattern)) {
	      if (pattern === URL.decode(path))
	        return {}; // No dynamic segments, but the paths match.

	      return null;
	    }

	    var compiled = compilePattern(pattern);
	    var match = URL.decode(path).match(compiled.matcher);

	    if (!match)
	      return null;

	    var params = {};

	    compiled.paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });

	    return params;
	  },

	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function (pattern) {
	    if (!pattern)
	      return [];
	    return compilePattern(pattern).paramNames;
	  },

	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function (pattern, params) {
	    if (!pattern)
	      return null;

	    if (!isDynamicPattern(pattern))
	      return pattern;

	    params = params || {};

	    return pattern.replace(paramMatcher, function (match, pathSegment) {
	      var paramName = getParamName(pathSegment);

	      invariant(
	        params[paramName] != null,
	        'Missing "' + paramName + '" parameter for path "' + pattern + '"'
	      );

	      // Preserve forward slashes.
	      return String(params[paramName]).split('/').map(URL.encode).join('/');
	    });
	  },

	  /**
	   * Returns an object that is the result of parsing any query string contained in
	   * the given path, null if the path contains no query string.
	   */
	  extractQuery: function (path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },

	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function (path) {
	    return path.replace(queryMatcher, '');
	  },

	  /**
	   * Returns a version of the given path with the parameters in the given query
	   * added to the query string.
	   */
	  withQuery: function (path, query) {
	    var existingQuery = Path.extractQuery(path);

	    if (existingQuery)
	      query = query ? copyProperties(existingQuery, query) : existingQuery;

	    var queryString = query && qs.stringify(query);

	    if (queryString)
	      return Path.withoutQuery(path) + '?' + queryString;

	    return path;
	  },

	  /**
	   * Returns a normalized version of the given path.
	   */
	  normalize: function (path) {
	    return path.replace(/^\/*/, '/');
	  }

	};

	module.exports = Path;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(196);
	exports.encode = exports.stringify = __webpack_require__(197);


/***/ },
/* 196 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 197 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 198 */
/***/ function(module, exports) {

	var urlEncodedSpaceRE = /\+/g;
	var encodedSpaceRE = /%20/g;

	var URL = {

	  /* These functions were copied from the https://github.com/cujojs/rest source, MIT licensed */

	  decode: function (str) {
	    // spec says space should be encoded as '+'
	    str = str.replace(urlEncodedSpaceRE, ' ');
	    return decodeURIComponent(str);
	  },

	  encode: function (str) {
	    str = encodeURIComponent(str);
	    // spec says space should be encoded as '+'
	    return str.replace(encodedSpaceRE, '+');
	  }

	};

	module.exports = URL;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var HashLocation = __webpack_require__(200);
	var PathStore = __webpack_require__(187);
	var makePath = __webpack_require__(192);

	/**
	 * Returns a string that may safely be used as the href of a
	 * link to the route with the given name.
	 */
	function makeHref(to, params, query) {
	  var path = makePath(to, params, query);

	  if (PathStore.getLocation() === HashLocation)
	    return '#' + path;

	  return path;
	}

	module.exports = makeHref;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(11);
	var ExecutionEnvironment = __webpack_require__(35);
	var getWindowPath = __webpack_require__(190);

	var _onChange;

	/**
	 * Location handler that uses `window.location.hash`.
	 */
	var HashLocation = {

	  setup: function (onChange) {
	    invariant(
	      ExecutionEnvironment.canUseDOM,
	      'You cannot use HashLocation in an environment with no DOM'
	    );

	    _onChange = onChange;

	    // Make sure the hash is at least / to begin with.
	    if (window.location.hash === '')
	      window.location.replace(getWindowPath() + '#/');

	    if (window.addEventListener) {
	      window.addEventListener('hashchange', _onChange, false);
	    } else {
	      window.attachEvent('onhashchange', _onChange);
	    }
	  },

	  teardown: function () {
	    if (window.removeEventListener) {
	      window.removeEventListener('hashchange', _onChange, false);
	    } else {
	      window.detachEvent('onhashchange', _onChange);
	    }
	  },

	  push: function (path) {
	    window.location.hash = path;
	  },

	  replace: function (path) {
	    window.location.replace(getWindowPath() + '#' + path);
	  },

	  pop: function () {
	    window.history.back();
	  },

	  getCurrentPath: function () {
	    return window.location.hash.substr(1);
	  },

	  toString: function () {
	    return '<HashLocation>';
	  }

	};

	module.exports = HashLocation;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(202);


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(164);
	var Route = __webpack_require__(203);

	function createRedirectHandler(to) {
	  return React.createClass({
	    statics: {
	      willTransitionTo: function (transition, params, query) {
	        transition.redirect(to, params, query);
	      }
	    },

	    render: function () {
	      return null;
	    }
	  });
	}

	/**
	 * A <Redirect> component is a special kind of <Route> that always
	 * redirects when it matches.
	 */
	function Redirect(props) {
	  return Route({
	    name: props.name,
	    path: props.from || props.path,
	    handler: createRedirectHandler(props.to)
	  });
	}

	module.exports = Redirect;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(164);
	var withoutProperties = __webpack_require__(185);

	/**
	 * A map of <Route> component props that are reserved for use by the
	 * router and/or React. All other props are considered "static" and
	 * are passed through to the route handler.
	 */
	var RESERVED_PROPS = {
	  handler: true,
	  path: true,
	  children: true // ReactChildren
	};

	/**
	 * <Route> components specify components that are rendered to the page when the
	 * URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is requested,
	 * the tree is searched depth-first to find a route whose path matches the URL.
	 * When one is found, all routes in the tree that lead to it are considered
	 * "active" and their components are rendered into the DOM, nested in the same
	 * order as they are in the tree.
	 *
	 * Unlike Ember, a nested route's path does not build upon that of its parents.
	 * This may seem like it creates more work up front in specifying URLs, but it
	 * has the nice benefit of decoupling nested UI from "nested" URLs.
	 *
	 * The preferred way to configure a router is using JSX. The XML-like syntax is
	 * a great way to visualize how routes are laid out in an application.
	 *
	 *   React.renderComponent((
	 *     <Routes handler={App}>
	 *       <Route name="login" handler={Login}/>
	 *       <Route name="logout" handler={Logout}/>
	 *       <Route name="about" handler={About}/>
	 *     </Routes>
	 *   ), document.body);
	 *
	 * If you don't use JSX, you can also assemble a Router programmatically using
	 * the standard React component JavaScript API.
	 *
	 *   React.renderComponent((
	 *     Routes({ handler: App },
	 *       Route({ name: 'login', handler: Login }),
	 *       Route({ name: 'logout', handler: Logout }),
	 *       Route({ name: 'about', handler: About })
	 *     )
	 *   ), document.body);
	 *
	 * Handlers for Route components that contain children can render their active
	 * child route using the activeRouteHandler prop.
	 *
	 *   var App = React.createClass({
	 *     render: function () {
	 *       return (
	 *         <div class="application">
	 *           {this.props.activeRouteHandler()}
	 *         </div>
	 *       );
	 *     }
	 *   });
	 */
	var Route = React.createClass({

	  displayName: 'Route',

	  statics: {

	    getUnreservedProps: function (props) {
	      return withoutProperties(props, RESERVED_PROPS);
	    },

	  },

	  propTypes: {
	    preserveScrollPosition: React.PropTypes.bool.isRequired,
	    handler: React.PropTypes.any.isRequired,
	    path: React.PropTypes.string,
	    name: React.PropTypes.string
	  },

	  getDefaultProps: function () {
	    return {
	      preserveScrollPosition: false
	    };
	  },

	  render: function () {
	    throw new Error(
	      'The <Route> component should not be rendered directly. You may be ' +
	      'missing a <Routes> wrapper around your list of routes.'
	    );
	  }

	});

	module.exports = Route;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(205);

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var Route = __webpack_require__(203);

	function NotFound(props) {
	  props.httpStatus = props.httpStatus || 404;
	  props.path = props.path || "*";
	  return Route(props);
	}

	module.exports = NotFound;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(203);


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(208);


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(164);
	var warning = __webpack_require__(14);
	var copyProperties = __webpack_require__(16);
	var Promise = __webpack_require__(173).Promise;
	var goBack = __webpack_require__(209);
	var replaceWith = __webpack_require__(210);
	var transitionTo = __webpack_require__(186);
	var Route = __webpack_require__(203);
	var Path = __webpack_require__(194);
	var HashLocation = __webpack_require__(200);
	var HistoryLocation = __webpack_require__(189);
	var RefreshLocation = __webpack_require__(191);
	var setTitle = __webpack_require__(211);
	var ActiveStore = __webpack_require__(168);
	var PathStore = __webpack_require__(187);
	var RouteStore = __webpack_require__(193);
	var ExecutionEnvironment = __webpack_require__(35);

	/**
	 * The ref name that can be used to reference the active route component.
	 */
	var REF_NAME = '__activeRoute__';

	/**
	 * A hash of { name, location } pairs of all locations.
	 */
	var NAMED_LOCATIONS = {
	  hash: HashLocation,
	  history: HistoryLocation,
	  refresh: RefreshLocation,
	  disabled: RefreshLocation // TODO: Remove
	};

	/**
	 * The <Routes> component configures the route hierarchy and renders the
	 * route matching the current location when rendered into a document.
	 *
	 * See the <Route> component for more details.
	 */
	var Routes = React.createClass({
	  displayName: 'Routes',

	  statics: {
	    match: function (path, routes) {
	        var rootRoutes = routes.props.children;
	        if (!Array.isArray(rootRoutes)) {
	          rootRoutes = [rootRoutes];
	        }
	        var matches = null;
	        for (var i = 0; matches == null && i < rootRoutes.length; i++) {
	          matches = findMatches(Path.withoutQuery(path), rootRoutes[i]);
	        }
	      return matches;
	    },

	    /**
	     * Handles errors that were thrown asynchronously. By default, the
	     * error is re-thrown so we don't swallow them silently.
	     */
	    handleAsyncError: function (error, route) {
	      throw error; // This error probably originated in a transition hook.
	    },

	    /**
	     * Handles cancelled transitions. By default, redirects replace the
	     * current URL and aborts roll it back.
	     */
	    handleCancelledTransition: function (transition, routes) {
	      var reason = transition.cancelReason;

	      if (reason instanceof Redirect) {
	        replaceWith(reason.to, reason.params, reason.query);
	      } else if (reason instanceof Abort) {
	        goBack();
	      }
	    }

	  },

	  propTypes: {
	    preserveScrollPosition: React.PropTypes.bool,
	    location: function (props, propName, componentName) {
	      var location = props[propName];

	      if (typeof location === 'string' && !(location in NAMED_LOCATIONS))
	        return new Error('Unknown location "' + location + '", see ' + componentName);
	    },
	    initialPath: React.PropTypes.string,
	    initialData: React.PropTypes.object
	  },

	  getDefaultProps: function () {
	    return {
	      preserveScrollPosition: false,
	      location: HashLocation
	    };
	  },

	  getInitialState: function () {
	    return {};
	  },

	  getLocation: function () {
	    var location = this.props.location;

	    if (typeof location === 'string')
	      return NAMED_LOCATIONS[location];

	    return location;
	  },

	  componentWillMount: function () {
	    React.Children.forEach(this.props.children, function (child) {
	      RouteStore.registerRoute(child);
	    });

	    PathStore.setup(this.getLocation());

	    if (this.props.initialPath)
	      PathStore.replace(this.props.initialPath);
	        
	    var initialData;
	    if (ExecutionEnvironment.canUseDOM) {
	      initialData = window.__ReactRouter_initialData;
	    } else {
	      initialData = this.props.initialData || null;
	    }
	    
	    this.setStateFromPath(PathStore.getCurrentPath(), initialData);
	    
	    if (ExecutionEnvironment.canUseDOM)
	      PathStore.addChangeListener(this.handlePathChange);
	  },

	  setStateFromPath: function (path, initialData) {
	    var matches = this.match(path);
	    var rootMatch = (matches && getRootMatch(matches)) || false;
	    var params = (rootMatch && rootMatch.params) || {};
	    var newState = {
	      initialData: initialData,
	      matches: matches,
	      path: path,
	      activeQuery: Path.extractQuery(path) || {},
	      activeParams: params,
	      activeRoutes: matches.map(function (match) {
	        return match.route;
	      })
	    };
	    ActiveStore.updateState(newState);
	    this.setState(newState);
	  },

	  componentDidMount: function () {
	    this.handlePathChange();
	  },

	  componentWillUnmount: function () {
	    PathStore.removeChangeListener(this.handlePathChange);
	  },

	  handlePathChange: function () {
	    this.dispatch(PathStore.getCurrentPath());
	  },

	  /**
	   * Performs a depth-first search for the first route in the tree that matches
	   * on the given path. Returns an array of all routes in the tree leading to
	   * the one that matched in the format { route, params } where params is an
	   * object that contains the URL parameters relevant to that route. Returns
	   * null if no route in the tree matches the path.
	   *
	   *   React.renderComponent(
	   *     <Routes>
	   *       <Route handler={App}>
	   *         <Route name="posts" handler={Posts}/>
	   *         <Route name="post" path="/posts/:id" handler={Post}/>
	   *       </Route>
	   *     </Routes>
	   *   ).match('/posts/123'); => [ { route: <AppRoute>, params: {} },
	   *                               { route: <PostRoute>, params: { id: '123' } } ]
	   */
	  match: function(path){
	    return this.constructor.match(path, this);
	  },

	  /**
	   * Performs a transition to the given path and returns a promise for the
	   * Transition object that was used.
	   *
	   * In order to do this, the router first determines which routes are involved
	   * in the transition beginning with the current route, up the route tree to
	   * the first parent route that is shared with the destination route, and back
	   * down the tree to the destination route. The willTransitionFrom static
	   * method is invoked on all route handlers we're transitioning away from, in
	   * reverse nesting order. Likewise, the willTransitionTo static method
	   * is invoked on all route handlers we're transitioning to.
	   *
	   * Both willTransitionFrom and willTransitionTo hooks may either abort or
	   * redirect the transition. If they need to resolve asynchronously, they may
	   * return a promise.
	   *
	   * Any error that occurs asynchronously during the transition is re-thrown in
	   * the top-level scope unless returnRejectedPromise is true, in which case a
	   * rejected promise is returned so the caller may handle the error.
	   *
	   * Note: This function does not update the URL in a browser's location bar.
	   * If you want to keep the URL in sync with transitions, use Router.transitionTo,
	   * Router.replaceWith, or Router.goBack instead.
	   */
	  dispatch: function (path, returnRejectedPromise) {
	    var transition = new Transition(path);
	    var routes = this;

	    var promise = syncWithTransition(routes, transition).then(function (newState) {
	      if (transition.isCancelled) {
	        Routes.handleCancelledTransition(transition, routes);
	      } else if (newState) {
	        //remove initial data from state
	        routes.setState({
	          initialData:undefined
	        });
	        ActiveStore.updateState(newState);
	      }

	      return transition;
	    });

	    if (!returnRejectedPromise) {
	      promise = promise.then(undefined, function (error) {
	        // Use setTimeout to break the promise chain.
	        setTimeout(function () {
	          Routes.handleAsyncError(error, routes);
	        });
	      });
	    }

	    return promise;
	  },

	  render: function () {
	    if (!this.state.path)
	      return null;

	    var matches = this.state.matches;
	    if (matches && matches.length) {

	      for (var i=0; i<matches.length; i++) {
	        //clear all initial state data
	        matches[i].route.props.initialAsyncState = null;
	        
	        //setTitle helper on routes
	        if(matches[i].route.props.title){
	          setTitle(matches[i].route.props.title);
	        }
	      }
	      //set initial data on matched routes.
	      if (this.state.initialData) {
	        for (var i=0; i<matches.length; i++) {
	          if (this.state.initialData[i]) {
	            matches[i].route.props.initialAsyncState = this.state.initialData[i];
	          }
	        }
	      }

	      // matches[0] corresponds to the top-most match
	      return matches[0].route.props.handler(computeHandlerProps(matches, this.state.activeQuery));
	    } else {
	      return null;
	    }
	  }

	});

	function Transition(path) {
	  this.path = path;
	  this.cancelReason = null;
	  this.isCancelled = false;
	}

	copyProperties(Transition.prototype, {

	  abort: function () {
	    this.cancelReason = new Abort();
	    this.isCancelled = true;
	  },

	  redirect: function (to, params, query) {
	    this.cancelReason = new Redirect(to, params, query);
	    this.isCancelled = true;
	  },

	  retry: function () {
	    transitionTo(this.path);
	  }

	});

	function Abort() {}

	function Redirect(to, params, query) {
	  this.to = to;
	  this.params = params;
	  this.query = query;
	}

	function findMatches(path, route) {
	  var children = route.props.children, matches;
	  var params;
	  var query = Path.extractQuery(path) || {};

	  // Check the subtree first to find the most deeply-nested match.
	  if (Array.isArray(children)) {
	    for (var i = 0, len = children.length; matches == null && i < len; ++i) {
	      matches = findMatches(path, children[i]);
	    }
	  } else if (children) {
	    matches = findMatches(path, children);
	  }

	  if (matches) {
	    var rootParams = getRootMatch(matches).params;
	    params = {};

	    Path.extractParamNames(route.props.path).forEach(function (paramName) {
	      params[paramName] = rootParams[paramName];
	    });

	    matches.unshift(makeMatch(route, params, query));

	    return matches;
	  }

	  // No routes in the subtree matched, so check this route.
	  params = Path.extractParams(route.props.path, path);

	  if (params)
	    return [ makeMatch(route, params, query) ];

	  return null;
	}

	function makeMatch(route, params, query) {
	  return { route: route, params: params, query: query};
	}

	function hasMatch(matches, match) {
	  return matches.some(function (m) {
	    if (m.route !== match.route)
	      return false;

	    for (var property in m.params) {
	      if (m.params[property] !== match.params[property])
	        return false;
	    }

	    return true;
	  });
	}

	function getRootMatch(matches) {
	  if (matches)
	    return matches[matches.length - 1];

	  return false;
	}

	function updateMatchComponents(matches, refs) {
	  var i = 0, component;
	  while (component = refs[REF_NAME]) {
	    matches[i++].component = component;
	    refs = component.refs;
	  }
	}

	/**
	 * Runs all transition hooks that are required to get from the current state
	 * to the state specified by the given transition and updates the current state
	 * if they all pass successfully. Returns a promise that resolves to the new
	 * state if it needs to be updated, or undefined if not.
	 */
	function syncWithTransition(routes, transition) {
	  if (routes.state.path === transition.path)
	    return Promise.resolve(); // Nothing to do!

	  var currentMatches = routes.state.matches;
	  var nextMatches = routes.match(transition.path);

	  warning(
	    nextMatches,
	    'No route matches path "' + transition.path + '". Make sure you have ' +
	    '<Route path="' + transition.path + '"> somewhere in your routes'
	  );

	  if (!nextMatches)
	    nextMatches = [];

	  var fromMatches, toMatches;
	  if (currentMatches) {
	    updateMatchComponents(currentMatches, routes.refs);

	    fromMatches = currentMatches.filter(function (match) {
	      return !hasMatch(nextMatches, match);
	    });

	    toMatches = nextMatches.filter(function (match) {
	      return !hasMatch(currentMatches, match);
	    });
	  } else {
	    fromMatches = [];
	    toMatches = nextMatches;
	  }

	  return checkTransitionFromHooks(fromMatches, transition).then(function () {
	    if (transition.isCancelled)
	      return; // No need to continue.

	    return checkTransitionToHooks(toMatches, transition).then(function () {
	      if (transition.isCancelled)
	        return; // No need to continue.

	      var rootMatch = getRootMatch(nextMatches);
	      var params = (rootMatch && rootMatch.params) || {};
	      var query = Path.extractQuery(transition.path) || {};
	      var state = {
	        path: transition.path,
	        matches: nextMatches,
	        activeParams: params,
	        activeQuery: query,
	        activeRoutes: nextMatches.map(function (match) {
	          return match.route;
	        })
	      };

	      // TODO: add functional test
	      maybeScrollWindow(routes, toMatches[toMatches.length - 1]);
	      routes.setState(state);

	      return state;
	    });
	  });
	}

	/**
	 * Calls the willTransitionFrom hook of all handlers in the given matches
	 * serially in reverse with the transition object and the current instance of
	 * the route's handler, so that the deepest nested handlers are called first.
	 * Returns a promise that resolves after the last handler.
	 */
	function checkTransitionFromHooks(matches, transition) {
	  var promise = Promise.resolve();

	  reversedArray(matches).forEach(function (match) {
	    promise = promise.then(function () {
	      var handler = match.route.props.handler;

	      if (!transition.isCancelled && handler.willTransitionFrom)
	        return handler.willTransitionFrom(transition, match.component);
	    });
	  });

	  return promise;
	}

	/**
	 * Calls the willTransitionTo hook of all handlers in the given matches serially
	 * with the transition object and any params that apply to that handler. Returns
	 * a promise that resolves after the last handler.
	 */
	function checkTransitionToHooks(matches, transition) {
	  var promise = Promise.resolve();

	  matches.forEach(function (match) {
	    promise = promise.then(function () {
	      var handler = match.route.props.handler;

	      if (!transition.isCancelled && handler.willTransitionTo)
	        return handler.willTransitionTo(transition, match.params, match.query);
	    });
	  });

	  return promise;
	}

	/**
	 * Given an array of matches as returned by findMatches, return a descriptor for
	 * the handler hierarchy specified by the route.
	 */
	function computeHandlerProps(matches, query) {
	  var props = {
	    ref: null,
	    key: null,
	    params: null,
	    query: null,
	    activeRouteHandler: returnNull
	  };

	  var childHandler;
	  reversedArray(matches).forEach(function (match) {
	    var route = match.route;

	    props = Route.getUnreservedProps(route.props);

	    props.ref = REF_NAME;
	    props.key = Path.injectParams(route.props.path, match.params);
	    props.params = match.params;
	    props.query = query;

	    if (childHandler) {
	      props.activeRouteHandler = childHandler;
	    } else {
	      props.activeRouteHandler = returnNull;
	    }

	    childHandler = function (props, addedProps) {
	      if (arguments.length > 2 && typeof arguments[2] !== 'undefined')
	        throw new Error('Passing children to a route handler is not supported');

	      return route.props.handler(copyProperties(props, addedProps));
	    }.bind(this, props);
	  });

	  return props;
	}

	function returnNull() {
	  return null;
	}

	function reversedArray(array) {
	  return array.slice(0).reverse();
	}

	function maybeScrollWindow(routes, match) {
	  if (routes.props.preserveScrollPosition)
	    return;

	  if (!match || match.route.props.preserveScrollPosition)
	    return;

	  window.scrollTo(0, 0);
	}

	module.exports = Routes;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var PathStore = __webpack_require__(187);

	/**
	 * Transitions to the previous URL.
	 */
	function goBack() {
	  PathStore.pop();
	}

	module.exports = goBack;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var PathStore = __webpack_require__(187);
	var makePath = __webpack_require__(192);

	/**
	 * Transitions to the URL specified in the arguments by replacing
	 * the current URL in the history stack.
	 */
	function replaceWith(to, params, query) {
	  PathStore.replace(makePath(to, params, query));
	}

	module.exports = replaceWith;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	
	var TitleStore = __webpack_require__(212);

	function setTitle (title){
		TitleStore.updateTitle(title);
	}

	module.exports = setTitle;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	
	var ExecutionEnvironment = __webpack_require__(35);

	var _timer = null;
	var _title = null;

	var TitleStore = {

		/**
		 *  Update document title with last title set at nextTick.
		 */
		updateTitle: function (title) {
			var newTitle = String(title);
			if (_title == newTitle)
				return;

			_title = newTitle;

			if (ExecutionEnvironment.canUseDOM) {
				clearTimeout(_timer);
				_timer = setTimeout(function(){
					document.title = _title;
				}, 0);
			}
		},

		/**
		 * Get current document title
		 */
		getTitle: function () {
			if (ExecutionEnvironment.canUseDOM)
				_title = _title || document.title;

			return _title;
		},

		/**
		 * clear TitleStore
		 */
		clearStore: function () {
			_title = null;
			clearTimeout(_timer);
		}
	};

	module.exports = TitleStore;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(211);

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(209);


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(210);


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(186);


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(199);


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(219);

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(3);

	var ActiveStore = __webpack_require__(168);
	var Path = __webpack_require__(194);
	var makePath = __webpack_require__(192);
	var copyProperties = __webpack_require__(16);
	var RouteStore = __webpack_require__(193);
	var PathStore = __webpack_require__(187);
	var TitleStore = __webpack_require__(212);
	var ServerLocation = __webpack_require__(220);
	var Promise = __webpack_require__(173).Promise;

	var ExecutionEnvironment = __webpack_require__(35);

	var renderRoutesToString = function (routes, fullPath, options) {
	  var staticMarkup = options && !! options.staticMarkup || false;

	  return new Promise(function (resolve, reject) {
	    var query = Path.extractQuery(fullPath) || {};
	    var initialData = {};
	    var promises = [];
	    var httpStatus = 200;

	    var matches = routes.constructor.match(fullPath, routes);

	    if (matches && matches.length) {
	      //check matches for redirect
	      for (var i=0; i<matches.length; i++) {
	        var match = matches[i];
	        var props = match.route.props;
	        
	        if (props.httpStatus > 0 && props.httpStatus < 999)
	          httpStatus = props.httpStatus;
	        
	        if (props.handler.willTransitionTo) {

	          RouteStore.unregisterAllRoutes();
	          
	          React.Children.forEach(routes.props.children, function (child) {
	            RouteStore.registerRoute(child);
	          });

	          var rejected = false;

	          var transition = new Transition(fullPath, function (to, params, query){
	            var newPath = makePath(to, params, query);

	            var error = new Error("Redirect");
	            error.httpStatus = error.status = 302;
	            error.location = newPath;

	            RouteStore.unregisterAllRoutes();
	            throw error;
	          })

	          props.handler.willTransitionTo(transition, match.params);

	          RouteStore.unregisterAllRoutes();
	        }
	      }


	      //Loop over all matches getInitalAsyncState and apply
	      for (var i=0; i<matches.length; i++) {
	        (function () {
	          var j = i;
	          var promise = new Promise(function (resolve, reject) {
	            var statics = matches[j].route.props.handler;
	            if (statics.getInitialAsyncState) {
	              statics.getInitialAsyncState(matches[j].params, query, function (state) {
	                initialData[j] = state;
	              }).then(resolve);
	            } else {
	              resolve();
	            }
	          });
	          promises.push(promise);
	        })();
	      }
	    }

	    Promise.all(promises).then(function (data) {

	      RouteStore.unregisterAllRoutes();
	      TitleStore.clearStore();

	      var newRoutes = React.addons.cloneWithProps(routes, {
	        location: ServerLocation,
	        initialPath: fullPath, 
	        initialData: initialData
	      });

	      var html;
	      if (!staticMarkup) {
	        var initialDataScript = '<script type="text/javascript">window.__ReactRouter_initialData=' + JSON.stringify(initialData) + ';</script>';
	        html = React.renderComponentToString(newRoutes) + initialDataScript;
	      } else {
	        html = React.renderComponentToStaticMarkup(newRoutes)
	      }

	      var title = TitleStore.getTitle() || "";

	      RouteStore.unregisterAllRoutes();
	      TitleStore.clearStore();

	      resolve({
	        title: title,
	        html: html,
	        status: httpStatus,
	        httpStatus: httpStatus
	      });
	    }).catch(reject);
	  });
	};

	function Transition(path, redirect) {
	  this.path = path;
	  this.cancelReason = null;
	  this.isCancelled = false;
	  this.redirect = redirect;
	}

	copyProperties(Transition.prototype, {

	  abort: function () {
	    throw new Error('Cannot abort on server');
	  },

	  redirect: function (to, params, query) {},

	  retry: function () {
	    throw new Error('Cannot retry on server');
	  }

	});

	module.exports = renderRoutesToString;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(11);

	var _lastPath;
	var _currentPath = '/';

	/**
	 * Location handler that does not require a DOM.
	 */
	var ServerLocation = {

	  push: function (path) {
	    _lastPath = _currentPath;
	    _currentPath = path;
	  },

	  replace: function (path) {
	    _currentPath = path;
	  },

	  pop: function () {
	    invariant(
	      _lastPath != null,
	      'You cannot use ServerLocation to go back more than once'
	    );

	    _currentPath = _lastPath;
	    _lastPath = null;
	  },

	  getCurrentPath: function () {
	    return _currentPath;
	  },

	  toString: function () {
	    return '<ServerLocation>';
	  }

	};

	module.exports = ServerLocation;


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var React = __webpack_require__(164);
	var MainHeader = __webpack_require__(222);

	var App = React.createClass({
	    displayName: "App",

	    render: function render() {
	        return React.createElement(
	            "div",
	            null,
	            React.createElement(
	                "div",
	                { className: "navbar navbar-inverse" },
	                React.createElement(
	                    "a",
	                    { className: "navbar-brand", href: "#" },
	                    "SPORTS STORE"
	                )
	            ),
	            React.createElement(this.props.activeRouteHandler, null)
	        );
	    }
	});

	module.exports = App;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(164);
	var Link = __webpack_require__(165).Link;

	var MainNav = __webpack_require__(223);

	var MainHeader = React.createClass({
	  displayName: 'MainHeader',

	  render: function render() {
	    return React.createElement(
	      'header',
	      { className: 'main-header navbar navbar-static-top container' },
	      React.createElement(
	        'div',
	        { className: 'container-fluid' },
	        React.createElement(
	          Link,
	          { to: 'list', className: 'navbar-brand logo' },
	          'ProductBuilder'
	        ),
	        React.createElement(MainNav, null)
	      )
	    );
	  }
	});

	module.exports = MainHeader;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(164);
	var Link = __webpack_require__(165).Link;

	var MainNav = React.createClass({
	  displayName: 'MainNav',

	  render: function render() {
	    return React.createElement(
	      'nav',
	      { className: 'main-nav', role: 'navigation' },
	      React.createElement(
	        'ul',
	        { className: 'nav navbar-nav' },
	        React.createElement(
	          'li',
	          null,
	          React.createElement(
	            Link,
	            { to: 'list' },
	            'All Products'
	          )
	        )
	      )
	    );
	  }
	});

	module.exports = MainNav;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(164);
	var Promise = __webpack_require__(173).Promise;
	var AsyncState = __webpack_require__(165).AsyncState;
	var ProductRepeaterController = __webpack_require__(225);
	var CategoryList = __webpack_require__(228);
	var ProductStore = __webpack_require__(229);
	var ProductActions = __webpack_require__(368);

	var CategoricalProductRepeaterController = React.createClass({
	    displayName: 'CategoricalProductRepeaterController',

	    mixins: [AsyncState],
	    statics: {
	        getInitialAsyncState: function getInitialAsyncState(path, query, setState) {
	            return new Promise(function (resolve, reject) {
	                ProductStore.listProducts(null, function (products) {
	                    setState({
	                        category: null,
	                        products: products
	                    });
	                    resolve();
	                });
	            });
	        }
	    },
	    componentDidMount: function componentDidMount() {
	        ProductStore.addChangeListener(this.handleChange);
	    },

	    componentWillUnmount: function componentWillUnmount() {
	        ProductStore.removeChangeListener(this.handleChange);
	    },

	    handleChange: function handleChange() {
	        ProductStore.listProducts2(this.state.category).then(function (products) {
	            this.setState({
	                products: products
	            });
	        });
	    },
	    selectCategory: function selectCategory(currentCategoryId) {
	        this.state.category = currentCategoryId;
	        ProductActions.selectCategory(currentCategoryId);
	    },
	    render: function render() {
	        if (!this.state.products) {
	            return React.createElement(
	                'div',
	                null,
	                'Loading ... '
	            );
	        }

	        var productCategories = [];
	        var keys = {};
	        for (var i = 0; i < this.state.products.length; i++) {
	            var val = this.state.products[i].Category;
	            if (!keys[val]) {
	                keys[val] = true;
	                productCategories.push(val);
	            }
	        }

	        return React.createElement(
	            'div',
	            { className: 'panel panel-default row' },
	            React.createElement(CategoryList, { categories: productCategories, onClick: this.selectCategory }),
	            React.createElement(ProductRepeaterController, { products: this.state.products })
	        );
	    }
	});

	module.exports = CategoricalProductRepeaterController;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var React = __webpack_require__(164);
	var ProductRepeater = __webpack_require__(226);

	var ProductRepeaterController = React.createClass({
	    displayName: "ProductRepeaterController",

	    propTypes: {
	        products: React.PropTypes.array.isRequired
	    },
	    render: function render() {
	        return React.createElement(ProductRepeater, { products: this.props.products });
	    }
	});

	module.exports = ProductRepeaterController;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(164);
	var ProductDetail = __webpack_require__(227);

	var ProductRepeater = React.createClass({
	    displayName: 'ProductRepeater',

	    propTypes: {
	        products: React.PropTypes.array.isRequired
	    },

	    render: function render() {
	        var details = this.props.products.map(function (product, i) {
	            return React.createElement(ProductDetail, { key: i, product: product });
	        });

	        return React.createElement(
	            'div',
	            { className: 'col-xs-8' },
	            details
	        );
	    }
	});

	module.exports = ProductRepeater;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var React = __webpack_require__(164);
	var Link = __webpack_require__(165).Link;

	var ProductDetail = React.createClass({
	    displayName: "ProductDetail",

	    propTypes: {
	        product: React.PropTypes.shape({
	            productId: React.PropTypes.number.isRequired,
	            name: React.PropTypes.string.isRequired,
	            Description: React.PropTypes.string.isRequired,
	            Category: React.PropTypes.string.isRequired,
	            Price: React.PropTypes.number.isRequired
	        }).isRequired
	    },

	    render: function render() {
	        var product = this.props.product;
	        return React.createElement(
	            "div",
	            { className: "well" },
	            React.createElement(
	                "h3",
	                null,
	                React.createElement(
	                    "strong",
	                    null,
	                    product.name
	                ),
	                React.createElement(
	                    "span",
	                    { className: "pull-right label label-primary" },
	                    product.Price
	                )
	            ),
	            React.createElement(
	                "span",
	                { className: "lead" },
	                product.Description
	            )
	        );
	    }
	});

	module.exports = ProductDetail;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var React = __webpack_require__(164);

	var CategoryList = React.createClass({
	    displayName: "CategoryList",

	    onClick: function onClick(event) {
	        var categoryId = event.target.childNodes[0].data;
	        this.props.onClick(categoryId);
	    },
	    render: function render() {
	        var details = this.props.categories.map(function (category, i) {
	            return React.createElement(
	                "div",
	                null,
	                React.createElement(
	                    "a",
	                    { className: "btn btn-block btn-default btn-lg", onClick: this.onClick },
	                    category
	                ),
	                React.createElement(
	                    "button",
	                    { id: i, onClick: this.onClick },
	                    " ",
	                    category
	                )
	            );
	        });

	        return React.createElement(
	            "div",
	            { className: "col-xs-3" },
	            React.createElement(
	                "a",
	                { className: "btn btn-block btn-default btn-lg" },
	                "Home"
	            ),
	            details
	        );
	    }
	});

	module.exports = CategoryList;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var EventEmitter = __webpack_require__(230);
	var assign = __webpack_require__(245);
	var CHANGE_EVENT = "changeEvent";
	var mongoskin = __webpack_require__(246),
	    dbUrl = process.env.MONGOHQ_URL || 'mongodb://@localhost:27017/sportStore',
	    db = mongoskin.db(dbUrl, { safe: true }),
	    collections = {
	    products: db.collection('products')
	};
	var ProductStore = assign({}, EventEmitter.prototype, {
	    // Survey-specific methods
	    listProducts: function listProducts(category, callback) {
	        if (category) {
	            collections.products.find({ "Category": category }, { sort: { productId: 1 } }).toArray(function (error, products) {
	                if (error) return next(error);
	                callback(products);
	                //return products;
	            });
	        } else {
	                collections.products.find({}, { sort: { productId: 1 } }).toArray(function (error, products) {
	                    if (error) return next(error);
	                    callback(products);
	                    //return products;
	                });
	            }
	    },
	    listProducts2: function listProducts2(category) {
	        return new Promise(function (resolve, reject) {
	            collections.products.find({ "Category": category }, { sort: { productId: 1 } }).toArray(function (error, products) {
	                if (error) {
	                    reject(error);
	                }
	                resolve(products);
	            });
	        });
	    },
	    // Basic event handling functions
	    emitChange: function emitChange() {
	        this.emitter.emit(CHANGE_EVENT);
	    },

	    addChangeListener: function addChangeListener(callback) {
	        this.emitter.on(CHANGE_EVENT, callback);
	    },

	    removeChangeListener: function removeChangeListener(callback) {
	        this.emitter.removeListener(CHANGE_EVENT, callback);
	    }
	});

	// The ProductStore is a singleton, so export only the one instance.
	module.exports = ProductStore;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var d        = __webpack_require__(231)
	  , callable = __webpack_require__(244)

	  , apply = Function.prototype.apply, call = Function.prototype.call
	  , create = Object.create, defineProperty = Object.defineProperty
	  , defineProperties = Object.defineProperties
	  , hasOwnProperty = Object.prototype.hasOwnProperty
	  , descriptor = { configurable: true, enumerable: false, writable: true }

	  , on, once, off, emit, methods, descriptors, base;

	on = function (type, listener) {
		var data;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) {
			data = descriptor.value = create(null);
			defineProperty(this, '__ee__', descriptor);
			descriptor.value = null;
		} else {
			data = this.__ee__;
		}
		if (!data[type]) data[type] = listener;
		else if (typeof data[type] === 'object') data[type].push(listener);
		else data[type] = [data[type], listener];

		return this;
	};

	once = function (type, listener) {
		var once, self;

		callable(listener);
		self = this;
		on.call(this, type, once = function () {
			off.call(self, type, once);
			apply.call(listener, this, arguments);
		});

		once.__eeOnceListener__ = listener;
		return this;
	};

	off = function (type, listener) {
		var data, listeners, candidate, i;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) return this;
		data = this.__ee__;
		if (!data[type]) return this;
		listeners = data[type];

		if (typeof listeners === 'object') {
			for (i = 0; (candidate = listeners[i]); ++i) {
				if ((candidate === listener) ||
						(candidate.__eeOnceListener__ === listener)) {
					if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
					else listeners.splice(i, 1);
				}
			}
		} else {
			if ((listeners === listener) ||
					(listeners.__eeOnceListener__ === listener)) {
				delete data[type];
			}
		}

		return this;
	};

	emit = function (type) {
		var i, l, listener, listeners, args;

		if (!hasOwnProperty.call(this, '__ee__')) return;
		listeners = this.__ee__[type];
		if (!listeners) return;

		if (typeof listeners === 'object') {
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

			listeners = listeners.slice();
			for (i = 0; (listener = listeners[i]); ++i) {
				apply.call(listener, this, args);
			}
		} else {
			switch (arguments.length) {
			case 1:
				call.call(listeners, this);
				break;
			case 2:
				call.call(listeners, this, arguments[1]);
				break;
			case 3:
				call.call(listeners, this, arguments[1], arguments[2]);
				break;
			default:
				l = arguments.length;
				args = new Array(l - 1);
				for (i = 1; i < l; ++i) {
					args[i - 1] = arguments[i];
				}
				apply.call(listeners, this, args);
			}
		}
	};

	methods = {
		on: on,
		once: once,
		off: off,
		emit: emit
	};

	descriptors = {
		on: d(on),
		once: d(once),
		off: d(off),
		emit: d(emit)
	};

	base = defineProperties({}, descriptors);

	module.exports = exports = function (o) {
		return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
	};
	exports.methods = methods;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign        = __webpack_require__(232)
	  , normalizeOpts = __webpack_require__(239)
	  , isCallable    = __webpack_require__(240)
	  , contains      = __webpack_require__(241)

	  , d;

	d = module.exports = function (dscr, value/*, options*/) {
		var c, e, w, options, desc;
		if ((arguments.length < 2) || (typeof dscr !== 'string')) {
			options = value;
			value = dscr;
			dscr = null;
		} else {
			options = arguments[2];
		}
		if (dscr == null) {
			c = w = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
			w = contains.call(dscr, 'w');
		}

		desc = { value: value, configurable: c, enumerable: e, writable: w };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};

	d.gs = function (dscr, get, set/*, options*/) {
		var c, e, options, desc;
		if (typeof dscr !== 'string') {
			options = set;
			set = get;
			get = dscr;
			dscr = null;
		} else {
			options = arguments[3];
		}
		if (get == null) {
			get = undefined;
		} else if (!isCallable(get)) {
			options = get;
			get = set = undefined;
		} else if (set == null) {
			set = undefined;
		} else if (!isCallable(set)) {
			options = set;
			set = undefined;
		}
		if (dscr == null) {
			c = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
		}

		desc = { get: get, set: set, configurable: c, enumerable: e };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(233)()
		? Object.assign
		: __webpack_require__(234);


/***/ },
/* 233 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
		var assign = Object.assign, obj;
		if (typeof assign !== 'function') return false;
		obj = { foo: 'raz' };
		assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
		return (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';
	};


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keys  = __webpack_require__(235)
	  , value = __webpack_require__(238)

	  , max = Math.max;

	module.exports = function (dest, src/*, …srcn*/) {
		var error, i, l = max(arguments.length, 2), assign;
		dest = Object(value(dest));
		assign = function (key) {
			try { dest[key] = src[key]; } catch (e) {
				if (!error) error = e;
			}
		};
		for (i = 1; i < l; ++i) {
			src = arguments[i];
			keys(src).forEach(assign);
		}
		if (error !== undefined) throw error;
		return dest;
	};


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(236)()
		? Object.keys
		: __webpack_require__(237);


/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
		try {
			Object.keys('primitive');
			return true;
		} catch (e) { return false; }
	};


/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';

	var keys = Object.keys;

	module.exports = function (object) {
		return keys(object == null ? object : Object(object));
	};


/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (value) {
		if (value == null) throw new TypeError("Cannot use null or undefined");
		return value;
	};


/***/ },
/* 239 */
/***/ function(module, exports) {

	'use strict';

	var forEach = Array.prototype.forEach, create = Object.create;

	var process = function (src, obj) {
		var key;
		for (key in src) obj[key] = src[key];
	};

	module.exports = function (options/*, …options*/) {
		var result = create(null);
		forEach.call(arguments, function (options) {
			if (options == null) return;
			process(Object(options), result);
		});
		return result;
	};


/***/ },
/* 240 */
/***/ function(module, exports) {

	// Deprecated

	'use strict';

	module.exports = function (obj) { return typeof obj === 'function'; };


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(242)()
		? String.prototype.contains
		: __webpack_require__(243);


/***/ },
/* 242 */
/***/ function(module, exports) {

	'use strict';

	var str = 'razdwatrzy';

	module.exports = function () {
		if (typeof str.contains !== 'function') return false;
		return ((str.contains('dwa') === true) && (str.contains('foo') === false));
	};


/***/ },
/* 243 */
/***/ function(module, exports) {

	'use strict';

	var indexOf = String.prototype.indexOf;

	module.exports = function (searchString/*, position*/) {
		return indexOf.call(this, searchString, arguments[1]) > -1;
	};


/***/ },
/* 244 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (fn) {
		if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
		return fn;
	};


/***/ },
/* 245 */
/***/ function(module, exports) {

	/* eslint-disable no-unused-vars */
	'use strict';
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = process.env.MONGOSKIN_COV ? __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./lib-cov/mongoskin\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) : __webpack_require__(247);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - index.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	var url = __webpack_require__(248);
	var Router = __webpack_require__(254).Router;
	var mongo = __webpack_require__(255);
	var SkinServer = __webpack_require__(359).SkinServer;
	var SkinDb =__webpack_require__(360).SkinDb;
	var Db = mongo.Db;
	var Server = mongo.Server;
	var ReplSetServers = mongo.ReplSetServers;
	var BSONNative = mongo.BSONNative;
	var constant = __webpack_require__(362);
	var DEFAULT_PORT = constant.DEFAULT_PORT;

	function toBool(value) {
	  return value !== undefined && value !== 'false' && value !== 'no' && value !== 'off';
	}

	/**
	 * parse the database url to config
	 *
	 * [*://]username:password@host[:port]/database?options
	 *
	 * @param {String} serverUrl
	 * @return {Object} config
	 *  - {String} host
	 *  - {Number} port, default is `DEFAULT_PORT`.
	 *  - {String} [database], no database by default.
	 *  - {Object} options
	 *    - {Bool} auto_reconnect, default is `false`.
	 *    - {Number} poolSize, default is `1`.
	 *  - {String} [username], no username by default.
	 *  - {String} [password], no password by default.
	 * @api private
	 */
	var parseUrl = function (serverUrl) {
	  serverUrl = /\w+:\/\//.test(serverUrl) ? serverUrl : 'db://' + serverUrl;
	  var uri = url.parse(serverUrl, true);
	  var config = {};
	  var serverOptions = uri.query;

	  config.host = uri.hostname;
	  config.port = parseInt(uri.port, 10) || DEFAULT_PORT;
	  if (uri.pathname) {
	    config.database = uri.pathname.replace(/\//g, '');
	  }
	  config.options = {};
	  config.options.auto_reconnect = toBool(serverOptions.auto_reconnect);
	  config.options.poolSize = parseInt(serverOptions.poolSize || 1, 10);
	  if (uri && uri.auth) {
	    var auth = uri.auth;
	    var separator = auth.indexOf(':');
	    config.username = auth.substr(0, separator);
	    config.password = auth.substr(separator + 1);
	  }
	  return config;
	};

	/**
	 * constructor Server from url
	 *
	 * @param {String} serverUrl
	 * @return {Server}
	 * @api private
	 */
	var parseServer = function (serverUrl) {
	  var config = parseUrl(serverUrl);
	  return new Server(config.host, config.port, config.options);
	};

	/*
	 * exports mongo classes ObjectID Long Code DbRef ... to mongoskin
	 */
	for (var key in mongo) {
	  exports[key] = mongo[key];
	}

	/**
	 * constructor SkinDb from serverURL[s]
	 *
	 * ReplicaSet: mongoskin.db(serverURLs, dbOptions, replicasetOptions)
	 *
	 * ```js
	 * mongoskin.db([
	 *   '192.168.0.1:27017/',
	 *   '192.168.0.2/?auto_reconnect',
	 *   '192.168.0.3'
	 * ], {database: 'mydb'}, {connectArbiter: false, socketOptions: {timeout: 2000}});
	 * ```
	 * 
	 * Single Server: mongoskin.db(dbURL, options)
	 * 
	 * ```js
	 * mongoskin.db('192.168.0.1:27017/mydb');
	 * // or
	 * mongoskin.db('192.168.0.1:27017', {database: 'mydb'});
	 * // set the connection timeout to `2000ms`
	 * mongoskin.db('192.168.0.1:27017', {database: 'mydb', socketOptions: {timeout: 2000}});
	 * ```
	 * 
	 * @param {String|Array} serverUrl or server urls.
	 * @param {Object} [dbOptions]
	 *  - {Object} socketOptions: @see http://mongodb.github.com/node-mongodb-native/markdown-docs/database.html#socket-options
	 *  - the other, @see http://mongodb.github.com/node-mongodb-native/markdown-docs/database.html#db-options
	 * @param {Object} [replicasetOptions], options for replicaset.
	 *   The detail of this options, please
	 *   @see https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/connection/repl_set.js#L27.
	 * @return {SkinDb}
	 * @api public
	 */
	exports.db = function (serverUrl, dbOptions, replicasetOptions) {
	  dbOptions = dbOptions || {};

	  var server, database, config;

	  if (Array.isArray(serverUrl)) {
	    if (!dbOptions.database) {
	      throw new Error('Please provide a database in `dbOptions` to connect.');
	    }
	    database = dbOptions.database;

	    var len = serverUrl.length;
	    var servers = [];
	    for (var i = 0; i < len; i++) {
	      config = parseUrl(serverUrl[i]);
	      if (config.database || config.username) {
	        console.log('MONGOSKIN:WARN: database or username found in RepliSet server URL, ' + serverUrl[i]);
	      }
	      servers.push(new Server(config.host, config.port, config.options));
	    }
	    server = new ReplSetServers(servers, replicasetOptions);
	  } else {
	    config = parseUrl(serverUrl);
	    database = dbOptions.database || config.database;
	    if (!database) {
	      throw new Error('Please provide a database to connect to.');
	    }
	    var socketOptions = dbOptions.socketOptions;
	    if (socketOptions) {
	      delete dbOptions.socketOptions;
	      config.options.socketOptions = socketOptions;
	    }
	    server = new Server(config.host, config.port, config.options);

	    if (dbOptions.username === undefined) {
	      dbOptions.username = config.username;
	      dbOptions.password = config.password;
	    }
	  }

	  var skinServer = new SkinServer(server);
	  return skinServer.db(database, dbOptions);
	};

	/**
	 * select different db by collection name
	 *
	 * @param select `function(name)` returns SkinDb
	 *
	 * ```js
	 * var router = mongoskin.router(function (name) {
	 *   swhich (name) {
	 *     case 'user':
	 *     case 'group':
	 *       return authDb;
	 *     default:
	 *       return appDb;
	 *   }
	 * });
	 * router.collection('user')
	 * ```
	 * 
	 * @param {Function(name)} select
	 * @return {Router}
	 * @api public
	 */
	exports.router = function (select) {
	  return new Router(select);
	};

	/*
	 * export Skin classes from ./db ./collection ./cursor ./admin
	 */
	['server', 'db', 'collection', 'cursor', 'admin'].forEach(function (path) {
	  var module = __webpack_require__(367)("./" + path);
	  for (var name in module) {
	    exports[name] = module[name];
	  }
	});


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(249);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(251);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(250)(module), (function() { return this; }())))

/***/ },
/* 250 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(252);
	exports.encode = exports.stringify = __webpack_require__(253);


/***/ },
/* 252 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 253 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 254 */
/***/ function(module, exports) {

	/*!
	 * mongoskin - router.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	/**
	 * Router
	 * 
	 * @param {Function(name)} select
	 * @constructor
	 * @api public
	 */
	var Router = exports.Router = function (select) {
	  this._select = select;
	  this._collections = {};
	};

	/**
	 * Bind custom methods
	 *
	 * @param {String} name, collection name.
	 * @param {Object} [options]
	 * @return {Router} this
	 * @api public
	 */
	Router.prototype.bind = function (name, options) {
	  var args = Array.prototype.slice.call(arguments);
	  var database = this._select(name);
	  var collection = database.bind.apply(database, args);
	  this._collections[name] = collection;
	  Object.defineProperty(this, name, {
	    value: collection,
	    writable: false,
	    enumerable: true
	  });
	  return this;
	};

	Router.prototype.collection = function (name) {
	  return this._collections[name] || (this._collections[name] = this._select(name).collection(name));
	};


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	try {
	  exports.BSONPure = __webpack_require__(256).BSONPure;
	  exports.BSONNative = __webpack_require__(256).BSONNative;
	} catch(err) {
	  // do nothing
	}

	// export the driver version
	exports.version = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../package\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;

	[ 'commands/base_command'
	  , 'admin'
	  , 'collection'
	  , 'connection/read_preference'
	  , 'connection/connection'
	  , 'connection/server'
	  , 'connection/mongos'
	  , 'connection/repl_set/repl_set'
	  , 'mongo_client'
	  , 'cursor'
	  , 'db'
	  , 'mongo_client'
	  , 'gridfs/grid'
	  ,	'gridfs/chunk'
	  , 'gridfs/gridstore'].forEach(function (path) {
	  	var module = __webpack_require__(279)("./" + path);
	  	for (var i in module) {
	  		exports[i] = module[i];
	    }
	});

	// backwards compat
	exports.ReplSetServers = exports.ReplSet;
	// Add BSON Classes
	exports.Binary = __webpack_require__(256).Binary;
	exports.Code = __webpack_require__(256).Code;
	exports.DBRef = __webpack_require__(256).DBRef;
	exports.Double = __webpack_require__(256).Double;
	exports.Long = __webpack_require__(256).Long;
	exports.MinKey = __webpack_require__(256).MinKey;
	exports.MaxKey = __webpack_require__(256).MaxKey;
	exports.ObjectID = __webpack_require__(256).ObjectID;
	exports.Symbol = __webpack_require__(256).Symbol;
	exports.Timestamp = __webpack_require__(256).Timestamp;  
	// Add BSON Parser
	exports.BSON = __webpack_require__(256).BSONPure.BSON;

	// Get the Db object
	var Db = __webpack_require__(347).Db;
	// Set up the connect function
	var connect = Db.connect;
	var obj = connect;
	// Map all values to the exports value
	for(var name in exports) {
	  obj[name] = exports[name];
	}

	// Add the pure and native backward compatible functions
	exports.pure = exports.native = function() {
	  return obj;
	}

	// Map all values to the exports value
	for(var name in exports) {
	  connect[name] = exports[name];
	}

	// Set our exports to be the connect function
	module.exports = connect;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	try {
	  exports.BSONPure = __webpack_require__(257);
	  exports.BSONNative = __webpack_require__(277);
	} catch(err) {
	  // do nothing
	}

	[ './binary_parser'
	  , './binary'
	  , './code'
	  , './db_ref'
	  , './double'
	  , './max_key'
	  , './min_key'
	  , './objectid'
	  , './symbol'
	  , './timestamp'
	  , './long'].forEach(function (path) {
	  	var module = __webpack_require__(278)("./" + path);
	  	for (var i in module) {
	  		exports[i] = module[i];
	    }
	});

	// Exports all the classes for the NATIVE JS BSON Parser
	exports.native = function() {
	  var classes = {};
	  // Map all the classes
	  [ './binary_parser'
	    , './binary'
	    , './code'
	    , './db_ref'
	    , './double'
	    , './max_key'
	    , './min_key'
	    , './objectid'
	    , './symbol'
	    , './timestamp'
	    , './long'
	    , '../../ext'
	].forEach(function (path) {
	    	var module = __webpack_require__(278)("./" + path);
	    	for (var i in module) {
	    		classes[i] = module[i];
	      }
	  });
	  // Return classes list
	  return classes;
	}

	// Exports all the classes for the PURE JS BSON Parser
	exports.pure = function() {
	  var classes = {};
	  // Map all the classes
	  [ './binary_parser'
	    , './binary'
	    , './code'
	    , './db_ref'
	    , './double'
	    , './max_key'
	    , './min_key'
	    , './objectid'
	    , './symbol'
	    , './timestamp'
	    , './long'
	    , '././bson'].forEach(function (path) {
	    	var module = __webpack_require__(278)("./" + path);
	    	for (var i in module) {
	    		classes[i] = module[i];
	      }
	  });
	  // Return classes list
	  return classes;
	}


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Long = __webpack_require__(262).Long
	  , Double = __webpack_require__(263).Double
	  , Timestamp = __webpack_require__(264).Timestamp
	  , ObjectID = __webpack_require__(265).ObjectID
	  , Symbol = __webpack_require__(270).Symbol
	  , Code = __webpack_require__(271).Code
	  , MinKey = __webpack_require__(272).MinKey
	  , MaxKey = __webpack_require__(273).MaxKey
	  , DBRef = __webpack_require__(274).DBRef
	  , Binary = __webpack_require__(275).Binary
	  , BinaryParser = __webpack_require__(266).BinaryParser
	  , writeIEEE754 = __webpack_require__(276).writeIEEE754
	  , readIEEE754 = __webpack_require__(276).readIEEE754

	// To ensure that 0.4 of node works correctly
	var isDate = function isDate(d) {
	  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';
	}

	/**
	 * Create a new BSON instance
	 *
	 * @class Represents the BSON Parser
	 * @return {BSON} instance of BSON Parser.
	 */
	function BSON () {};

	/**
	 * @ignore
	 * @api private
	 */
	// BSON MAX VALUES
	BSON.BSON_INT32_MAX = 0x7FFFFFFF;
	BSON.BSON_INT32_MIN = -0x80000000;

	BSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;
	BSON.BSON_INT64_MIN = -Math.pow(2, 63);

	// JS MAX PRECISE VALUES
	BSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.
	BSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.

	// Internal long versions
	var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.
	var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.

	/**
	 * Number BSON Type
	 *
	 * @classconstant BSON_DATA_NUMBER
	 **/
	BSON.BSON_DATA_NUMBER = 1;
	/**
	 * String BSON Type
	 *
	 * @classconstant BSON_DATA_STRING
	 **/
	BSON.BSON_DATA_STRING = 2;
	/**
	 * Object BSON Type
	 *
	 * @classconstant BSON_DATA_OBJECT
	 **/
	BSON.BSON_DATA_OBJECT = 3;
	/**
	 * Array BSON Type
	 *
	 * @classconstant BSON_DATA_ARRAY
	 **/
	BSON.BSON_DATA_ARRAY = 4;
	/**
	 * Binary BSON Type
	 *
	 * @classconstant BSON_DATA_BINARY
	 **/
	BSON.BSON_DATA_BINARY = 5;
	/**
	 * ObjectID BSON Type
	 *
	 * @classconstant BSON_DATA_OID
	 **/
	BSON.BSON_DATA_OID = 7;
	/**
	 * Boolean BSON Type
	 *
	 * @classconstant BSON_DATA_BOOLEAN
	 **/
	BSON.BSON_DATA_BOOLEAN = 8;
	/**
	 * Date BSON Type
	 *
	 * @classconstant BSON_DATA_DATE
	 **/
	BSON.BSON_DATA_DATE = 9;
	/**
	 * null BSON Type
	 *
	 * @classconstant BSON_DATA_NULL
	 **/
	BSON.BSON_DATA_NULL = 10;
	/**
	 * RegExp BSON Type
	 *
	 * @classconstant BSON_DATA_REGEXP
	 **/
	BSON.BSON_DATA_REGEXP = 11;
	/**
	 * Code BSON Type
	 *
	 * @classconstant BSON_DATA_CODE
	 **/
	BSON.BSON_DATA_CODE = 13;
	/**
	 * Symbol BSON Type
	 *
	 * @classconstant BSON_DATA_SYMBOL
	 **/
	BSON.BSON_DATA_SYMBOL = 14;
	/**
	 * Code with Scope BSON Type
	 *
	 * @classconstant BSON_DATA_CODE_W_SCOPE
	 **/
	BSON.BSON_DATA_CODE_W_SCOPE = 15;
	/**
	 * 32 bit Integer BSON Type
	 *
	 * @classconstant BSON_DATA_INT
	 **/
	BSON.BSON_DATA_INT = 16;
	/**
	 * Timestamp BSON Type
	 *
	 * @classconstant BSON_DATA_TIMESTAMP
	 **/
	BSON.BSON_DATA_TIMESTAMP = 17;
	/**
	 * Long BSON Type
	 *
	 * @classconstant BSON_DATA_LONG
	 **/
	BSON.BSON_DATA_LONG = 18;
	/**
	 * MinKey BSON Type
	 *
	 * @classconstant BSON_DATA_MIN_KEY
	 **/
	BSON.BSON_DATA_MIN_KEY = 0xff;
	/**
	 * MaxKey BSON Type
	 *
	 * @classconstant BSON_DATA_MAX_KEY
	 **/
	BSON.BSON_DATA_MAX_KEY = 0x7f;

	/**
	 * Binary Default Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
	 **/
	BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;
	/**
	 * Binary Function Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
	 **/
	BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;
	/**
	 * Binary Byte Array Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
	 **/
	BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * Binary UUID Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_UUID
	 **/
	BSON.BSON_BINARY_SUBTYPE_UUID = 3;
	/**
	 * Binary MD5 Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_MD5
	 **/
	BSON.BSON_BINARY_SUBTYPE_MD5 = 4;
	/**
	 * Binary User Defined Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
	 **/
	BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

	/**
	 * Calculate the bson size for a passed in Javascript object.
	 *
	 * @param {Object} object the Javascript object to calculate the BSON byte size for.
	 * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.
	 * @return {Number} returns the number of bytes the BSON object will take up.
	 * @api public
	 */
	BSON.calculateObjectSize = function calculateObjectSize(object, serializeFunctions) {
	  var totalLength = (4 + 1);

	  if(Array.isArray(object)) {
	    for(var i = 0; i < object.length; i++) {
	      totalLength += calculateElement(i.toString(), object[i], serializeFunctions)
	    }
	  } else {
			// If we have toBSON defined, override the current object
			if(object.toBSON) {
				object = object.toBSON();
			}

			// Calculate size
	    for(var key in object) {
	      totalLength += calculateElement(key, object[key], serializeFunctions)
	    }
	  }

	  return totalLength;
	}

	/**
	 * @ignore
	 * @api private
	 */
	function calculateElement(name, value, serializeFunctions) {
	  var isBuffer = typeof Buffer !== 'undefined';

	  switch(typeof value) {
	    case 'string':
	      return 1 + (!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1 + 4 + (!isBuffer ? numberOfBytes(value) : Buffer.byteLength(value, 'utf8')) + 1;
	    case 'number':
	      if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	        if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) { // 32 bit
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (4 + 1);
	        } else {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	        }
	      } else {  // 64 bit
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	      }
	    case 'undefined':
	      return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);
	    case 'boolean':
	      return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 1);
	    case 'object':
	      if(value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);
	      } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (12 + 1);
	      } else if(value instanceof Date || isDate(value)) {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	      } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 4 + 1) + value.length;
	      } else if(value instanceof Long || value instanceof Double || value instanceof Timestamp
	          || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Double' || value['_bsontype'] == 'Timestamp') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	      } else if(value instanceof Code || value['_bsontype'] == 'Code') {
	        // Calculate size depending on the availability of a scope
	        if(value.scope != null && Object.keys(value.scope).length > 0) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);
	        } else {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1;
	        }
	      } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {
	        // Check what kind of subtype we have
	        if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1 + 4);
	        } else {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1);
	        }
	      } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + ((!isBuffer ? numberOfBytes(value.value) : Buffer.byteLength(value.value, 'utf8')) + 4 + 1 + 1);
	      } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {
	        // Set up correct object for serialization
	        var ordered_values = {
	            '$ref': value.namespace
	          , '$id' : value.oid
	        };

	        // Add db reference if it exists
	        if(null != value.db) {
	          ordered_values['$db'] = value.db;
	        }

	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + BSON.calculateObjectSize(ordered_values, serializeFunctions);
	      } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1
	            + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1
	      } else {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + BSON.calculateObjectSize(value, serializeFunctions) + 1;
	      }
	    case 'function':
	      // WTF for 0.4.X where typeof /someregexp/ === 'function'
	      if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1
	          + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1
	      } else {
	        if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);
	        } else if(serializeFunctions) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1;
	        }
	      }
	  }

	  return 0;
	}

	/**
	 * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.
	 * @param {Number} index the index in the buffer where we wish to start serializing into.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Number} returns the new write index in the Buffer.
	 * @api public
	 */
	BSON.serializeWithBufferAndIndex = function serializeWithBufferAndIndex(object, checkKeys, buffer, index, serializeFunctions) {
	  // Default setting false
	  serializeFunctions = serializeFunctions == null ? false : serializeFunctions;
	  // Write end information (length of the object)
	  var size = buffer.length;
	  // Write the size of the object
	  buffer[index++] = size & 0xff;
	  buffer[index++] = (size >> 8) & 0xff;
	  buffer[index++] = (size >> 16) & 0xff;
	  buffer[index++] = (size >> 24) & 0xff;
	  return serializeObject(object, checkKeys, buffer, index, serializeFunctions) - 1;
	}

	/**
	 * @ignore
	 * @api private
	 */
	var serializeObject = function(object, checkKeys, buffer, index, serializeFunctions) {
	  // Process the object
	  if(Array.isArray(object)) {
	    for(var i = 0; i < object.length; i++) {
	      index = packElement(i.toString(), object[i], checkKeys, buffer, index, serializeFunctions);
	    }
	  } else {
			// If we have toBSON defined, override the current object
			if(object.toBSON) {
				object = object.toBSON();
			}

			// Serialize the object
	    for(var key in object) {
	      // Check the key and throw error if it's illegal
	      if (key != '$db' && key != '$ref' && key != '$id') {
	        // dollars and dots ok
	        BSON.checkKey(key, !checkKeys);
	      }

	      // Pack the element
	      index = packElement(key, object[key], checkKeys, buffer, index, serializeFunctions);
	    }
	  }

	  // Write zero
	  buffer[index++] = 0;
	  return index;
	}

	var stringToBytes = function(str) {
	  var ch, st, re = [];
	  for (var i = 0; i < str.length; i++ ) {
	    ch = str.charCodeAt(i);  // get char
	    st = [];                 // set up "stack"
	    do {
	      st.push( ch & 0xFF );  // push byte to stack
	      ch = ch >> 8;          // shift value down by 1 byte
	    }
	    while ( ch );
	    // add stack contents to result
	    // done because chars have "wrong" endianness
	    re = re.concat( st.reverse() );
	  }
	  // return an array of bytes
	  return re;
	}

	var numberOfBytes = function(str) {
	  var ch, st, re = 0;
	  for (var i = 0; i < str.length; i++ ) {
	    ch = str.charCodeAt(i);  // get char
	    st = [];                 // set up "stack"
	    do {
	      st.push( ch & 0xFF );  // push byte to stack
	      ch = ch >> 8;          // shift value down by 1 byte
	    }
	    while ( ch );
	    // add stack contents to result
	    // done because chars have "wrong" endianness
	    re = re + st.length;
	  }
	  // return an array of bytes
	  return re;
	}

	/**
	 * @ignore
	 * @api private
	 */
	var writeToTypedArray = function(buffer, string, index) {
	  var bytes = stringToBytes(string);
	  for(var i = 0; i < bytes.length; i++) {
	    buffer[index + i] = bytes[i];
	  }
	  return bytes.length;
	}

	/**
	 * @ignore
	 * @api private
	 */
	var supportsBuffer = typeof Buffer != 'undefined';

	/**
	 * @ignore
	 * @api private
	 */
	var packElement = function(name, value, checkKeys, buffer, index, serializeFunctions) {
	  var startIndex = index;

	  switch(typeof value) {
	    case 'string':
	      // Encode String type
	      buffer[index++] = BSON.BSON_DATA_STRING;
	      // Number of written bytes
	      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	      // Encode the name
	      index = index + numberOfWrittenBytes + 1;
	      buffer[index - 1] = 0;

	      // Calculate size
	      var size = supportsBuffer ? Buffer.byteLength(value) + 1 : numberOfBytes(value) + 1;
	      // Write the size of the string to buffer
	      buffer[index + 3] = (size >> 24) & 0xff;
	      buffer[index + 2] = (size >> 16) & 0xff;
	      buffer[index + 1] = (size >> 8) & 0xff;
	      buffer[index] = size & 0xff;
	      // Ajust the index
	      index = index + 4;
	      // Write the string
	      supportsBuffer ? buffer.write(value, index, 'utf8') : writeToTypedArray(buffer, value, index);
	      // Update index
	      index = index + size - 1;
	      // Write zero
	      buffer[index++] = 0;
	      // Return index
	      return index;
	    case 'number':
	      // We have an integer value
	      if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	        // If the value fits in 32 bits encode as int, if it fits in a double
	        // encode it as a double, otherwise long
	        if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {
	          // Set int type 32 bits or less
	          buffer[index++] = BSON.BSON_DATA_INT;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Write the int value
	          buffer[index++] = value & 0xff;
	          buffer[index++] = (value >> 8) & 0xff;
	          buffer[index++] = (value >> 16) & 0xff;
	          buffer[index++] = (value >> 24) & 0xff;
	        } else if(value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	          // Encode as double
	          buffer[index++] = BSON.BSON_DATA_NUMBER;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Write float
	          writeIEEE754(buffer, value, index, 'little', 52, 8);
	          // Ajust index
	          index = index + 8;
	        } else {
	          // Set long type
	          buffer[index++] = BSON.BSON_DATA_LONG;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          var longVal = Long.fromNumber(value);
	          var lowBits = longVal.getLowBits();
	          var highBits = longVal.getHighBits();
	          // Encode low bits
	          buffer[index++] = lowBits & 0xff;
	          buffer[index++] = (lowBits >> 8) & 0xff;
	          buffer[index++] = (lowBits >> 16) & 0xff;
	          buffer[index++] = (lowBits >> 24) & 0xff;
	          // Encode high bits
	          buffer[index++] = highBits & 0xff;
	          buffer[index++] = (highBits >> 8) & 0xff;
	          buffer[index++] = (highBits >> 16) & 0xff;
	          buffer[index++] = (highBits >> 24) & 0xff;
	        }
	      } else {
	        // Encode as double
	        buffer[index++] = BSON.BSON_DATA_NUMBER;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Write float
	        writeIEEE754(buffer, value, index, 'little', 52, 8);
	        // Ajust index
	        index = index + 8;
	      }

	      return index;
	    case 'undefined':
	      // Set long type
	      buffer[index++] = BSON.BSON_DATA_NULL;
	      // Number of written bytes
	      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	      // Encode the name
	      index = index + numberOfWrittenBytes + 1;
	      buffer[index - 1] = 0;
	      return index;
	    case 'boolean':
	      // Write the type
	      buffer[index++] = BSON.BSON_DATA_BOOLEAN;
	      // Number of written bytes
	      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	      // Encode the name
	      index = index + numberOfWrittenBytes + 1;
	      buffer[index - 1] = 0;
	      // Encode the boolean value
	      buffer[index++] = value ? 1 : 0;
	      return index;
	    case 'object':
	      if(value === null || value instanceof MinKey || value instanceof MaxKey
	          || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {
	        // Write the type of either min or max key
	        if(value === null) {
	          buffer[index++] = BSON.BSON_DATA_NULL;
	        } else if(value instanceof MinKey) {
	          buffer[index++] = BSON.BSON_DATA_MIN_KEY;
	        } else {
	          buffer[index++] = BSON.BSON_DATA_MAX_KEY;
	        }

	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        return index;
	      } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_OID;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;

	        // Write objectid
	        supportsBuffer ? buffer.write(value.id, index, 'binary') : writeToTypedArray(buffer, value.id, index);
	        // Ajust index
	        index = index + 12;
	        return index;
	      } else if(value instanceof Date || isDate(value)) {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_DATE;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;

	        // Write the date
	        var dateInMilis = Long.fromNumber(value.getTime());
	        var lowBits = dateInMilis.getLowBits();
	        var highBits = dateInMilis.getHighBits();
	        // Encode low bits
	        buffer[index++] = lowBits & 0xff;
	        buffer[index++] = (lowBits >> 8) & 0xff;
	        buffer[index++] = (lowBits >> 16) & 0xff;
	        buffer[index++] = (lowBits >> 24) & 0xff;
	        // Encode high bits
	        buffer[index++] = highBits & 0xff;
	        buffer[index++] = (highBits >> 8) & 0xff;
	        buffer[index++] = (highBits >> 16) & 0xff;
	        buffer[index++] = (highBits >> 24) & 0xff;
	        return index;
	      } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_BINARY;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Get size of the buffer (current write point)
	        var size = value.length;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write the default subtype
	        buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;
	        // Copy the content form the binary field to the buffer
	        value.copy(buffer, index, 0, size);
	        // Adjust the index
	        index = index + size;
	        return index;
	      } else if(value instanceof Long || value instanceof Timestamp || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {
	        // Write the type
	        buffer[index++] = value instanceof Long ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Write the date
	        var lowBits = value.getLowBits();
	        var highBits = value.getHighBits();
	        // Encode low bits
	        buffer[index++] = lowBits & 0xff;
	        buffer[index++] = (lowBits >> 8) & 0xff;
	        buffer[index++] = (lowBits >> 16) & 0xff;
	        buffer[index++] = (lowBits >> 24) & 0xff;
	        // Encode high bits
	        buffer[index++] = highBits & 0xff;
	        buffer[index++] = (highBits >> 8) & 0xff;
	        buffer[index++] = (highBits >> 16) & 0xff;
	        buffer[index++] = (highBits >> 24) & 0xff;
	        return index;
	      } else if(value instanceof Double || value['_bsontype'] == 'Double') {
	        // Encode as double
	        buffer[index++] = BSON.BSON_DATA_NUMBER;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Write float
	        writeIEEE754(buffer, value, index, 'little', 52, 8);
	        // Ajust index
	        index = index + 8;
	        return index;
	      } else if(value instanceof Code || value['_bsontype'] == 'Code') {
	        if(value.scope != null && Object.keys(value.scope).length > 0) {
	          // Write the type
	          buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Calculate the scope size
	          var scopeSize = BSON.calculateObjectSize(value.scope, serializeFunctions);
	          // Function string
	          var functionString = value.code.toString();
	          // Function Size
	          var codeSize = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;

	          // Calculate full size of the object
	          var totalSize = 4 + codeSize + scopeSize + 4;

	          // Write the total size of the object
	          buffer[index++] = totalSize & 0xff;
	          buffer[index++] = (totalSize >> 8) & 0xff;
	          buffer[index++] = (totalSize >> 16) & 0xff;
	          buffer[index++] = (totalSize >> 24) & 0xff;

	          // Write the size of the string to buffer
	          buffer[index++] = codeSize & 0xff;
	          buffer[index++] = (codeSize >> 8) & 0xff;
	          buffer[index++] = (codeSize >> 16) & 0xff;
	          buffer[index++] = (codeSize >> 24) & 0xff;

	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + codeSize - 1;
	          // Write zero
	          buffer[index++] = 0;
	          // Serialize the scope object
	          var scopeObjectBuffer = supportsBuffer ? new Buffer(scopeSize) : new Uint8Array(new ArrayBuffer(scopeSize));
	          // Execute the serialization into a seperate buffer
	          serializeObject(value.scope, checkKeys, scopeObjectBuffer, 0, serializeFunctions);

	          // Adjusted scope Size (removing the header)
	          var scopeDocSize = scopeSize;
	          // Write scope object size
	          buffer[index++] = scopeDocSize & 0xff;
	          buffer[index++] = (scopeDocSize >> 8) & 0xff;
	          buffer[index++] = (scopeDocSize >> 16) & 0xff;
	          buffer[index++] = (scopeDocSize >> 24) & 0xff;

	          // Write the scopeObject into the buffer
	          supportsBuffer ? scopeObjectBuffer.copy(buffer, index, 0, scopeSize) : buffer.set(scopeObjectBuffer, index);
	          // Adjust index, removing the empty size of the doc (5 bytes 0000000005)
	          index = index + scopeDocSize - 5;
	          // Write trailing zero
	          buffer[index++] = 0;
	          return index
	        } else {
	          buffer[index++] = BSON.BSON_DATA_CODE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Function string
	          var functionString = value.code.toString();
	          // Function Size
	          var size = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;
	          // Write the size of the string to buffer
	          buffer[index++] = size & 0xff;
	          buffer[index++] = (size >> 8) & 0xff;
	          buffer[index++] = (size >> 16) & 0xff;
	          buffer[index++] = (size >> 24) & 0xff;
	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + size - 1;
	          // Write zero
	          buffer[index++] = 0;
	          return index;
	        }
	      } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_BINARY;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Extract the buffer
	        var data = value.value(true);
	        // Calculate size
	        var size = value.position;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write the subtype to the buffer
	        buffer[index++] = value.sub_type;

	        // If we have binary type 2 the 4 first bytes are the size
	        if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {
	          buffer[index++] = size & 0xff;
	          buffer[index++] = (size >> 8) & 0xff;
	          buffer[index++] = (size >> 16) & 0xff;
	          buffer[index++] = (size >> 24) & 0xff;
	        }

	        // Write the data to the object
	        supportsBuffer ? data.copy(buffer, index, 0, value.position) : buffer.set(data, index);
	        // Ajust index
	        index = index + value.position;
	        return index;
	      } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_SYMBOL;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Calculate size
	        var size = supportsBuffer ? Buffer.byteLength(value.value) + 1 : numberOfBytes(value.value) + 1;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write the string
	        buffer.write(value.value, index, 'utf8');
	        // Update index
	        index = index + size - 1;
	        // Write zero
	        buffer[index++] = 0x00;
	        return index;
	      } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_OBJECT;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Set up correct object for serialization
	        var ordered_values = {
	            '$ref': value.namespace
	          , '$id' : value.oid
	        };

	        // Add db reference if it exists
	        if(null != value.db) {
	          ordered_values['$db'] = value.db;
	        }

	        // Message size
	        var size = BSON.calculateObjectSize(ordered_values, serializeFunctions);
	        // Serialize the object
	        var endIndex = BSON.serializeWithBufferAndIndex(ordered_values, checkKeys, buffer, index, serializeFunctions);
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write zero for object
	        buffer[endIndex++] = 0x00;
	        // Return the end index
	        return endIndex;
	      } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_REGEXP;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;

	        // Write the regular expression string
	        supportsBuffer ? buffer.write(value.source, index, 'utf8') : writeToTypedArray(buffer, value.source, index);
	        // Adjust the index
	        index = index + (supportsBuffer ? Buffer.byteLength(value.source) : numberOfBytes(value.source));
	        // Write zero
	        buffer[index++] = 0x00;
	        // Write the parameters
	        if(value.global) buffer[index++] = 0x73; // s
	        if(value.ignoreCase) buffer[index++] = 0x69; // i
	        if(value.multiline) buffer[index++] = 0x6d; // m
	        // Add ending zero
	        buffer[index++] = 0x00;
	        return index;
	      } else {
	        // Write the type
	        buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Adjust the index
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
		      var endIndex = serializeObject(value, checkKeys, buffer, index + 4, serializeFunctions);
	        // Write size
	        var size = endIndex - index;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        return endIndex;
	      }
	    case 'function':
	      // WTF for 0.4.X where typeof /someregexp/ === 'function'
	      if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_REGEXP;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;

	        // Write the regular expression string
	        buffer.write(value.source, index, 'utf8');
	        // Adjust the index
	        index = index + (supportsBuffer ? Buffer.byteLength(value.source) : numberOfBytes(value.source));
	        // Write zero
	        buffer[index++] = 0x00;
	        // Write the parameters
	        if(value.global) buffer[index++] = 0x73; // s
	        if(value.ignoreCase) buffer[index++] = 0x69; // i
	        if(value.multiline) buffer[index++] = 0x6d; // m
	        // Add ending zero
	        buffer[index++] = 0x00;
	        return index;
	      } else {
	        if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
	          // Write the type
	          buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Calculate the scope size
	          var scopeSize = BSON.calculateObjectSize(value.scope, serializeFunctions);
	          // Function string
	          var functionString = value.toString();
	          // Function Size
	          var codeSize = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;

	          // Calculate full size of the object
	          var totalSize = 4 + codeSize + scopeSize;

	          // Write the total size of the object
	          buffer[index++] = totalSize & 0xff;
	          buffer[index++] = (totalSize >> 8) & 0xff;
	          buffer[index++] = (totalSize >> 16) & 0xff;
	          buffer[index++] = (totalSize >> 24) & 0xff;

	          // Write the size of the string to buffer
	          buffer[index++] = codeSize & 0xff;
	          buffer[index++] = (codeSize >> 8) & 0xff;
	          buffer[index++] = (codeSize >> 16) & 0xff;
	          buffer[index++] = (codeSize >> 24) & 0xff;

	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + codeSize - 1;
	          // Write zero
	          buffer[index++] = 0;
	          // Serialize the scope object
	          var scopeObjectBuffer = new Buffer(scopeSize);
	          // Execute the serialization into a seperate buffer
	          serializeObject(value.scope, checkKeys, scopeObjectBuffer, 0, serializeFunctions);

	          // Adjusted scope Size (removing the header)
	          var scopeDocSize = scopeSize - 4;
	          // Write scope object size
	          buffer[index++] = scopeDocSize & 0xff;
	          buffer[index++] = (scopeDocSize >> 8) & 0xff;
	          buffer[index++] = (scopeDocSize >> 16) & 0xff;
	          buffer[index++] = (scopeDocSize >> 24) & 0xff;

	          // Write the scopeObject into the buffer
	          scopeObjectBuffer.copy(buffer, index, 0, scopeSize);

	          // Adjust index, removing the empty size of the doc (5 bytes 0000000005)
	          index = index + scopeDocSize - 5;
	          // Write trailing zero
	          buffer[index++] = 0;
	          return index
	        } else if(serializeFunctions) {
	          buffer[index++] = BSON.BSON_DATA_CODE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Function string
	          var functionString = value.toString();
	          // Function Size
	          var size = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;
	          // Write the size of the string to buffer
	          buffer[index++] = size & 0xff;
	          buffer[index++] = (size >> 8) & 0xff;
	          buffer[index++] = (size >> 16) & 0xff;
	          buffer[index++] = (size >> 24) & 0xff;
	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + size - 1;
	          // Write zero
	          buffer[index++] = 0;
	          return index;
	        }
	      }
	  }

	  // If no value to serialize
	  return index;
	}

	/**
	 * Serialize a Javascript object.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Buffer} returns the Buffer object containing the serialized object.
	 * @api public
	 */
	BSON.serialize = function(object, checkKeys, asBuffer, serializeFunctions) {
	  // Throw error if we are trying serialize an illegal type
	  if(object == null || typeof object != 'object' || Array.isArray(object)) 
	    throw new Error("Only javascript objects supported");
	  
	  // Emoty target buffer
	  var buffer = null;
	  // Calculate the size of the object
	  var size = BSON.calculateObjectSize(object, serializeFunctions);
	  // Fetch the best available type for storing the binary data
	  if(buffer = typeof Buffer != 'undefined') {
	    buffer = new Buffer(size);
	    asBuffer = true;
	  } else if(typeof Uint8Array != 'undefined') {
	    buffer = new Uint8Array(new ArrayBuffer(size));
	  } else {
	    buffer = new Array(size);
	  }

	  // If asBuffer is false use typed arrays
	  BSON.serializeWithBufferAndIndex(object, checkKeys, buffer, 0, serializeFunctions);
	  return buffer;
	}

	/**
	 * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5
	 *
	 * @ignore
	 * @api private
	 */
	var functionCache = BSON.functionCache = {};

	/**
	 * Crc state variables shared by function
	 *
	 * @ignore
	 * @api private
	 */
	var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];

	/**
	 * CRC32 hash method, Fast and enough versitility for our usage
	 *
	 * @ignore
	 * @api private
	 */
	var crc32 =  function(string, start, end) {
	  var crc = 0
	  var x = 0;
	  var y = 0;
	  crc = crc ^ (-1);

	  for(var i = start, iTop = end; i < iTop;i++) {
	  	y = (crc ^ string[i]) & 0xFF;
	    x = table[y];
	  	crc = (crc >>> 8) ^ x;
	  }

	  return crc ^ (-1);
	}

	/**
	 * Deserialize stream data as BSON documents.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 *
	 * @param {Buffer} data the buffer containing the serialized set of BSON documents.
	 * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.
	 * @param {Number} numberOfDocuments number of documents to deserialize.
	 * @param {Array} documents an array where to store the deserialized documents.
	 * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.
	 * @api public
	 */
	BSON.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
	  // if(numberOfDocuments !== documents.length) throw new Error("Number of expected results back is less than the number of documents");
	  options = options != null ? options : {};
	  var index = startIndex;
	  // Loop over all documents
	  for(var i = 0; i < numberOfDocuments; i++) {
	    // Find size of the document
	    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;
	    // Update options with index
	    options['index'] = index;
	    // Parse the document at this point
	    documents[docStartIndex + i] = BSON.deserialize(data, options);
	    // Adjust index by the document size
	    index = index + size;
	  }

	  // Return object containing end index of parsing and list of documents
	  return index;
	}

	/**
	 * Ensure eval is isolated.
	 *
	 * @ignore
	 * @api private
	 */
	var isolateEvalWithHash = function(functionCache, hash, functionString, object) {
	  // Contains the value we are going to set
	  var value = null;

	  // Check for cache hit, eval if missing and return cached function
	  if(functionCache[hash] == null) {
	    eval("value = " + functionString);
	    functionCache[hash] = value;
	  }
	  // Set the object
	  return functionCache[hash].bind(object);
	}

	/**
	 * Ensure eval is isolated.
	 *
	 * @ignore
	 * @api private
	 */
	var isolateEval = function(functionString) {
	  // Contains the value we are going to set
	  var value = null;
	  // Eval the function
	  eval("value = " + functionString);
	  return value;
	}

	/**
	 * Convert Uint8Array to String
	 *
	 * @ignore
	 * @api private
	 */
	var convertUint8ArrayToUtf8String = function(byteArray, startIndex, endIndex) {
	  return BinaryParser.decode_utf8(convertArraytoUtf8BinaryString(byteArray, startIndex, endIndex));
	}

	var convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {
	  var result = "";
	  for(var i = startIndex; i < endIndex; i++) {
	    result = result + String.fromCharCode(byteArray[i]);
	  }

	  return result;
	};

	/**
	 * Deserialize data as BSON.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 *
	 * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @param {Boolean} [isArray] ignore used for recursive parsing.
	 * @return {Object} returns the deserialized Javascript Object.
	 * @api public
	 */
	BSON.deserialize = function(buffer, options, isArray) {
	  // Options
	  options = options == null ? {} : options;
	  var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];
	  var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];
	  var cacheFunctionsCrc32 = options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];
	  var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];

	  // Validate that we have at least 4 bytes of buffer
	  if(buffer.length < 5) throw new Error("corrupt bson message < 5 bytes long");

	  // Set up index
	  var index = typeof options['index'] == 'number' ? options['index'] : 0;
	  // Reads in a C style string
	  var readCStyleString = function() {
	    // Get the start search index
	    var i = index;
	    // Locate the end of the c string
	    while(buffer[i] !== 0x00) { i++ }
	    // Grab utf8 encoded string
	    var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, i) : convertUint8ArrayToUtf8String(buffer, index, i);
	    // Update index position
	    index = i + 1;
	    // Return string
	    return string;
	  }

	  // Create holding object
	  var object = isArray ? [] : {};

	  // Read the document size
	  var size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;

	  // Ensure buffer is valid size
	  if(size < 5 || size > buffer.length) throw new Error("corrupt bson message");

	  // While we have more left data left keep parsing
	  while(true) {
	    // Read the type
	    var elementType = buffer[index++];
	    // If we get a zero it's the last byte, exit
	    if(elementType == 0) break;
	    // Read the name of the field
	    var name = readCStyleString();
	    // Switch on the type
	    switch(elementType) {
	      case BSON.BSON_DATA_OID:
	        var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('binary', index, index + 12) : convertArraytoUtf8BinaryString(buffer, index, index + 12);
	        // Decode the oid
	        object[name] = new ObjectID(string);
	        // Update index
	        index = index + 12;
	        break;
	      case BSON.BSON_DATA_STRING:
	        // Read the content of the field
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Add string to object
	        object[name] = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);
	        // Update parse index position
	        index = index + stringSize;
	        break;
	      case BSON.BSON_DATA_INT:
	        // Decode the 32bit value
	        object[name] = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        break;
	      case BSON.BSON_DATA_NUMBER:
	        // Decode the double value
	        object[name] = readIEEE754(buffer, index, 'little', 52, 8);
	        // Update the index
	        index = index + 8;
	        break;
	      case BSON.BSON_DATA_DATE:
	        // Unpack the low and high bits
	        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Set date object
	        object[name] = new Date(new Long(lowBits, highBits).toNumber());
	        break;
	      case BSON.BSON_DATA_BOOLEAN:
	        // Parse the boolean value
	        object[name] = buffer[index++] == 1;
	        break;
	      case BSON.BSON_DATA_NULL:
	        // Parse the boolean value
	        object[name] = null;
	        break;
	      case BSON.BSON_DATA_BINARY:
	        // Decode the size of the binary blob
	        var binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Decode the subtype
	        var subType = buffer[index++];
	        // Decode as raw Buffer object if options specifies it
	        if(buffer['slice'] != null) {
	          // If we have subtype 2 skip the 4 bytes for the size
	          if(subType == Binary.SUBTYPE_BYTE_ARRAY) {
	            binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	          }
	          // Slice the data
	          object[name] = new Binary(buffer.slice(index, index + binarySize), subType);
	        } else {
	          var _buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(binarySize)) : new Array(binarySize);
	          // If we have subtype 2 skip the 4 bytes for the size
	          if(subType == Binary.SUBTYPE_BYTE_ARRAY) {
	            binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	          }
	          // Copy the data
	          for(var i = 0; i < binarySize; i++) {
	            _buffer[i] = buffer[index + i];
	          }
	          // Create the binary object
	          object[name] = new Binary(_buffer, subType);
	        }
	        // Update the index
	        index = index + binarySize;
	        break;
	      case BSON.BSON_DATA_ARRAY:
	        options['index'] = index;
	        // Decode the size of the array document
	        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
	        // Set the array to the object
	        object[name] = BSON.deserialize(buffer, options, true);
	        // Adjust the index
	        index = index + objectSize;
	        break;
	      case BSON.BSON_DATA_OBJECT:
	        options['index'] = index;
	        // Decode the size of the object document
	        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
	        // Set the array to the object
	        object[name] = BSON.deserialize(buffer, options, false);
	        // Adjust the index
	        index = index + objectSize;
	        break;
	      case BSON.BSON_DATA_REGEXP:
	        // Create the regexp
	        var source = readCStyleString();
	        var regExpOptions = readCStyleString();
	        // For each option add the corresponding one for javascript
	        var optionsArray = new Array(regExpOptions.length);

	        // Parse options
	        for(var i = 0; i < regExpOptions.length; i++) {
	          switch(regExpOptions[i]) {
	            case 'm':
	              optionsArray[i] = 'm';
	              break;
	            case 's':
	              optionsArray[i] = 'g';
	              break;
	            case 'i':
	              optionsArray[i] = 'i';
	              break;
	          }
	        }

	        object[name] = new RegExp(source, optionsArray.join(''));
	        break;
	      case BSON.BSON_DATA_LONG:
	        // Unpack the low and high bits
	        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Create long object
	        var long = new Long(lowBits, highBits); 
	        // Promote the long if possible
	        if(promoteLongs) {
	          object[name] = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;
	        } else {
	          object[name] = long;
	        }
	        break;
	      case BSON.BSON_DATA_SYMBOL:
	        // Read the content of the field
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Add string to object
	        object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));
	        // Update parse index position
	        index = index + stringSize;
	        break;
	      case BSON.BSON_DATA_TIMESTAMP:
	        // Unpack the low and high bits
	        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Set the object
	        object[name] = new Timestamp(lowBits, highBits);
	        break;
	      case BSON.BSON_DATA_MIN_KEY:
	        // Parse the object
	        object[name] = new MinKey();
	        break;
	      case BSON.BSON_DATA_MAX_KEY:
	        // Parse the object
	        object[name] = new MaxKey();
	        break;
	      case BSON.BSON_DATA_CODE:
	        // Read the content of the field
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Function string
	        var functionString = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);

	        // If we are evaluating the functions
	        if(evalFunctions) {
	          // Contains the value we are going to set
	          var value = null;
	          // If we have cache enabled let's look for the md5 of the function in the cache
	          if(cacheFunctions) {
	            var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
	            // Got to do this to avoid V8 deoptimizing the call due to finding eval
	            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
	          } else {
	            // Set directly
	            object[name] = isolateEval(functionString);
	          }
	        } else {
	          object[name]  = new Code(functionString, {});
	        }

	        // Update parse index position
	        index = index + stringSize;
	        break;
	      case BSON.BSON_DATA_CODE_W_SCOPE:
	        // Read the content of the field
	        var totalSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Javascript function
	        var functionString = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);
	        // Update parse index position
	        index = index + stringSize;
	        // Parse the element
	        options['index'] = index;
	        // Decode the size of the object document
	        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
	        // Decode the scope object
	        var scopeObject = BSON.deserialize(buffer, options, false);
	        // Adjust the index
	        index = index + objectSize;

	        // If we are evaluating the functions
	        if(evalFunctions) {
	          // Contains the value we are going to set
	          var value = null;
	          // If we have cache enabled let's look for the md5 of the function in the cache
	          if(cacheFunctions) {
	            var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
	            // Got to do this to avoid V8 deoptimizing the call due to finding eval
	            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
	          } else {
	            // Set directly
	            object[name] = isolateEval(functionString);
	          }

	          // Set the scope on the object
	          object[name].scope = scopeObject;
	        } else {
	          object[name]  = new Code(functionString, scopeObject);
	        }

	        // Add string to object
	        break;
	    }
	  }

	  // Check if we have a db ref object
	  if(object['$id'] != null) object = new DBRef(object['$ref'], object['$id'], object['$db']);

	  // Return the final objects
	  return object;
	}

	/**
	 * Check if key name is valid.
	 *
	 * @ignore
	 * @api private
	 */
	BSON.checkKey = function checkKey (key, dollarsAndDotsOk) {
	  if (!key.length) return;
	  // Check if we have a legal key for the object
	  if (!!~key.indexOf("\x00")) {
	    // The BSON spec doesn't allow keys with null bytes because keys are
	    // null-terminated.
	    throw Error("key " + key + " must not contain null bytes");
	  }
	  if (!dollarsAndDotsOk) {
	    if('$' == key[0]) {
	      throw Error("key " + key + " must not start with '$'");
	    } else if (!!~key.indexOf('.')) {
	      throw Error("key " + key + " must not contain '.'");
	    }
	  }
	};

	/**
	 * Deserialize data as BSON.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *
	 * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @param {Boolean} [isArray] ignore used for recursive parsing.
	 * @return {Object} returns the deserialized Javascript Object.
	 * @api public
	 */
	BSON.prototype.deserialize = function(data, options) {
	  return BSON.deserialize(data, options);
	}

	/**
	 * Deserialize stream data as BSON documents.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *
	 * @param {Buffer} data the buffer containing the serialized set of BSON documents.
	 * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.
	 * @param {Number} numberOfDocuments number of documents to deserialize.
	 * @param {Array} documents an array where to store the deserialized documents.
	 * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.
	 * @api public
	 */
	BSON.prototype.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
	  return BSON.deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options);
	}

	/**
	 * Serialize a Javascript object.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Buffer} returns the Buffer object containing the serialized object.
	 * @api public
	 */
	BSON.prototype.serialize = function(object, checkKeys, asBuffer, serializeFunctions) {
	  return BSON.serialize(object, checkKeys, asBuffer, serializeFunctions);
	}

	/**
	 * Calculate the bson size for a passed in Javascript object.
	 *
	 * @param {Object} object the Javascript object to calculate the BSON byte size for.
	 * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.
	 * @return {Number} returns the number of bytes the BSON object will take up.
	 * @api public
	 */
	BSON.prototype.calculateObjectSize = function(object, serializeFunctions) {
	  return BSON.calculateObjectSize(object, serializeFunctions);
	}

	/**
	 * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.
	 * @param {Number} index the index in the buffer where we wish to start serializing into.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Number} returns the new write index in the Buffer.
	 * @api public
	 */
	BSON.prototype.serializeWithBufferAndIndex = function(object, checkKeys, buffer, startIndex, serializeFunctions) {
	  return BSON.serializeWithBufferAndIndex(object, checkKeys, buffer, startIndex, serializeFunctions);
	}

	/**
	 * @ignore
	 * @api private
	 */
	exports.Code = Code;
	exports.Symbol = Symbol;
	exports.BSON = BSON;
	exports.DBRef = DBRef;
	exports.Binary = Binary;
	exports.ObjectID = ObjectID;
	exports.Long = Long;
	exports.Timestamp = Timestamp;
	exports.Double = Double;
	exports.MinKey = MinKey;
	exports.MaxKey = MaxKey;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(259)
	var ieee754 = __webpack_require__(260)
	var isArray = __webpack_require__(261)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer, (function() { return this; }())))

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 260 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 261 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 262 */
/***/ function(module, exports) {

	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//
	// Copyright 2009 Google Inc. All Rights Reserved

	/**
	 * Defines a Long class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "Long". This
	 * implementation is derived from LongLib in GWT.
	 *
	 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	 * values as *signed* integers.  See the from* functions below for more
	 * convenient ways of constructing Longs.
	 *
	 * The internal representation of a Long is the two given signed, 32-bit values.
	 * We use 32-bit pieces because these are the size of integers on which
	 * Javascript performs bit-operations.  For operations like addition and
	 * multiplication, we split each number into 16-bit pieces, which can easily be
	 * multiplied within Javascript's floating-point representation without overflow
	 * or change in sign.
	 *
	 * In the algorithms below, we frequently reduce the negative case to the
	 * positive case by negating the input(s) and then post-processing the result.
	 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	 * a positive number, it overflows back into a negative).  Not handling this
	 * case would often result in infinite recursion.
	 *
	 * @class Represents the BSON Long type.
	 * @param {Number} low  the low (signed) 32 bits of the Long.
	 * @param {Number} high the high (signed) 32 bits of the Long.
	 */
	function Long(low, high) {
	  if(!(this instanceof Long)) return new Long(low, high);
	  
	  this._bsontype = 'Long';
	  /**
	   * @type {number}
	   * @api private
	   */
	  this.low_ = low | 0;  // force into 32 signed bits.

	  /**
	   * @type {number}
	   * @api private
	   */
	  this.high_ = high | 0;  // force into 32 signed bits.
	};

	/**
	 * Return the int value.
	 *
	 * @return {Number} the value, assuming it is a 32-bit integer.
	 * @api public
	 */
	Long.prototype.toInt = function() {
	  return this.low_;
	};

	/**
	 * Return the Number value.
	 *
	 * @return {Number} the closest floating-point representation to this value.
	 * @api public
	 */
	Long.prototype.toNumber = function() {
	  return this.high_ * Long.TWO_PWR_32_DBL_ +
	         this.getLowBitsUnsigned();
	};

	/**
	 * Return the JSON value.
	 *
	 * @return {String} the JSON representation.
	 * @api public
	 */
	Long.prototype.toJSON = function() {
	  return this.toString();
	}

	/**
	 * Return the String value.
	 *
	 * @param {Number} [opt_radix] the radix in which the text should be written.
	 * @return {String} the textual representation of this value.
	 * @api public
	 */
	Long.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (this.isZero()) {
	    return '0';
	  }

	  if (this.isNegative()) {
	    if (this.equals(Long.MIN_VALUE)) {
	      // We need to change the Long value before it can be negated, so we remove
	      // the bottom-most digit in this base and then recurse to do the rest.
	      var radixLong = Long.fromNumber(radix);
	      var div = this.div(radixLong);
	      var rem = div.multiply(radixLong).subtract(this);
	      return div.toString(radix) + rem.toInt().toString(radix);
	    } else {
	      return '-' + this.negate().toString(radix);
	    }
	  }

	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Long.fromNumber(Math.pow(radix, 6));

	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.div(radixToPower);
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	    var digits = intval.toString(radix);

	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};

	/**
	 * Return the high 32-bits value.
	 *
	 * @return {Number} the high 32-bits as a signed value.
	 * @api public
	 */
	Long.prototype.getHighBits = function() {
	  return this.high_;
	};

	/**
	 * Return the low 32-bits value.
	 *
	 * @return {Number} the low 32-bits as a signed value.
	 * @api public
	 */
	Long.prototype.getLowBits = function() {
	  return this.low_;
	};

	/**
	 * Return the low unsigned 32-bits value.
	 *
	 * @return {Number} the low 32-bits as an unsigned value.
	 * @api public
	 */
	Long.prototype.getLowBitsUnsigned = function() {
	  return (this.low_ >= 0) ?
	      this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;
	};

	/**
	 * Returns the number of bits needed to represent the absolute value of this Long.
	 *
	 * @return {Number} Returns the number of bits needed to represent the absolute value of this Long.
	 * @api public
	 */
	Long.prototype.getNumBitsAbs = function() {
	  if (this.isNegative()) {
	    if (this.equals(Long.MIN_VALUE)) {
	      return 64;
	    } else {
	      return this.negate().getNumBitsAbs();
	    }
	  } else {
	    var val = this.high_ != 0 ? this.high_ : this.low_;
	    for (var bit = 31; bit > 0; bit--) {
	      if ((val & (1 << bit)) != 0) {
	        break;
	      }
	    }
	    return this.high_ != 0 ? bit + 33 : bit + 1;
	  }
	};

	/**
	 * Return whether this value is zero.
	 *
	 * @return {Boolean} whether this value is zero.
	 * @api public
	 */
	Long.prototype.isZero = function() {
	  return this.high_ == 0 && this.low_ == 0;
	};

	/**
	 * Return whether this value is negative.
	 *
	 * @return {Boolean} whether this value is negative.
	 * @api public
	 */
	Long.prototype.isNegative = function() {
	  return this.high_ < 0;
	};

	/**
	 * Return whether this value is odd.
	 *
	 * @return {Boolean} whether this value is odd.
	 * @api public
	 */
	Long.prototype.isOdd = function() {
	  return (this.low_ & 1) == 1;
	};

	/**
	 * Return whether this Long equals the other
	 *
	 * @param {Long} other Long to compare against.
	 * @return {Boolean} whether this Long equals the other
	 * @api public
	 */
	Long.prototype.equals = function(other) {
	  return (this.high_ == other.high_) && (this.low_ == other.low_);
	};

	/**
	 * Return whether this Long does not equal the other.
	 *
	 * @param {Long} other Long to compare against.
	 * @return {Boolean} whether this Long does not equal the other.
	 * @api public
	 */
	Long.prototype.notEquals = function(other) {
	  return (this.high_ != other.high_) || (this.low_ != other.low_);
	};

	/**
	 * Return whether this Long is less than the other.
	 *
	 * @param {Long} other Long to compare against.
	 * @return {Boolean} whether this Long is less than the other.
	 * @api public
	 */
	Long.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};

	/**
	 * Return whether this Long is less than or equal to the other.
	 *
	 * @param {Long} other Long to compare against.
	 * @return {Boolean} whether this Long is less than or equal to the other.
	 * @api public
	 */
	Long.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};

	/**
	 * Return whether this Long is greater than the other.
	 *
	 * @param {Long} other Long to compare against.
	 * @return {Boolean} whether this Long is greater than the other.
	 * @api public
	 */
	Long.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};

	/**
	 * Return whether this Long is greater than or equal to the other.
	 *
	 * @param {Long} other Long to compare against.
	 * @return {Boolean} whether this Long is greater than or equal to the other.
	 * @api public
	 */
	Long.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};

	/**
	 * Compares this Long with the given one.
	 *
	 * @param {Long} other Long to compare against.
	 * @return {Boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
	 * @api public
	 */
	Long.prototype.compare = function(other) {
	  if (this.equals(other)) {
	    return 0;
	  }

	  var thisNeg = this.isNegative();
	  var otherNeg = other.isNegative();
	  if (thisNeg && !otherNeg) {
	    return -1;
	  }
	  if (!thisNeg && otherNeg) {
	    return 1;
	  }

	  // at this point, the signs are the same, so subtraction will not overflow
	  if (this.subtract(other).isNegative()) {
	    return -1;
	  } else {
	    return 1;
	  }
	};

	/**
	 * The negation of this value.
	 *
	 * @return {Long} the negation of this value.
	 * @api public
	 */
	Long.prototype.negate = function() {
	  if (this.equals(Long.MIN_VALUE)) {
	    return Long.MIN_VALUE;
	  } else {
	    return this.not().add(Long.ONE);
	  }
	};

	/**
	 * Returns the sum of this and the given Long.
	 *
	 * @param {Long} other Long to add to this one.
	 * @return {Long} the sum of this and the given Long.
	 * @api public
	 */
	Long.prototype.add = function(other) {
	  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 + b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 + b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 + b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 + b48;
	  c48 &= 0xFFFF;
	  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns the difference of this and the given Long.
	 *
	 * @param {Long} other Long to subtract from this.
	 * @return {Long} the difference of this and the given Long.
	 * @api public
	 */
	Long.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};

	/**
	 * Returns the product of this and the given Long.
	 *
	 * @param {Long} other Long to multiply with this.
	 * @return {Long} the product of this and the other.
	 * @api public
	 */
	Long.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return Long.ZERO;
	  } else if (other.isZero()) {
	    return Long.ZERO;
	  }

	  if (this.equals(Long.MIN_VALUE)) {
	    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;
	  } else if (other.equals(Long.MIN_VALUE)) {
	    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }

	  // If both Longs are small, use float multiplication
	  if (this.lessThan(Long.TWO_PWR_24_) &&
	      other.lessThan(Long.TWO_PWR_24_)) {
	    return Long.fromNumber(this.toNumber() * other.toNumber());
	  }

	  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.
	  // We can skip products that would overflow.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 * b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 * b00;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c16 += a00 * b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 * b00;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a16 * b16;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a00 * b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	  c48 &= 0xFFFF;
	  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns this Long divided by the given one.
	 *
	 * @param {Long} other Long by which to divide.
	 * @return {Long} this Long divided by the given one.
	 * @api public
	 */
	Long.prototype.div = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return Long.ZERO;
	  }

	  if (this.equals(Long.MIN_VALUE)) {
	    if (other.equals(Long.ONE) ||
	        other.equals(Long.NEG_ONE)) {
	      return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	    } else if (other.equals(Long.MIN_VALUE)) {
	      return Long.ONE;
	    } else {
	      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	      var halfThis = this.shiftRight(1);
	      var approx = halfThis.div(other).shiftLeft(1);
	      if (approx.equals(Long.ZERO)) {
	        return other.isNegative() ? Long.ONE : Long.NEG_ONE;
	      } else {
	        var rem = this.subtract(other.multiply(approx));
	        var result = approx.add(rem.div(other));
	        return result;
	      }
	    }
	  } else if (other.equals(Long.MIN_VALUE)) {
	    return Long.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().div(other.negate());
	    } else {
	      return this.negate().div(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.div(other.negate()).negate();
	  }

	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = Long.ZERO;
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = Long.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = Long.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }

	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = Long.ONE;
	    }

	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};

	/**
	 * Returns this Long modulo the given one.
	 *
	 * @param {Long} other Long by which to mod.
	 * @return {Long} this Long modulo the given one.
	 * @api public
	 */
	Long.prototype.modulo = function(other) {
	  return this.subtract(this.div(other).multiply(other));
	};

	/**
	 * The bitwise-NOT of this value.
	 *
	 * @return {Long} the bitwise-NOT of this value.
	 * @api public
	 */
	Long.prototype.not = function() {
	  return Long.fromBits(~this.low_, ~this.high_);
	};

	/**
	 * Returns the bitwise-AND of this Long and the given one.
	 *
	 * @param {Long} other the Long with which to AND.
	 * @return {Long} the bitwise-AND of this and the other.
	 * @api public
	 */
	Long.prototype.and = function(other) {
	  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
	};

	/**
	 * Returns the bitwise-OR of this Long and the given one.
	 *
	 * @param {Long} other the Long with which to OR.
	 * @return {Long} the bitwise-OR of this and the other.
	 * @api public
	 */
	Long.prototype.or = function(other) {
	  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
	};

	/**
	 * Returns the bitwise-XOR of this Long and the given one.
	 *
	 * @param {Long} other the Long with which to XOR.
	 * @return {Long} the bitwise-XOR of this and the other.
	 * @api public
	 */
	Long.prototype.xor = function(other) {
	  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
	};

	/**
	 * Returns this Long with bits shifted to the left by the given amount.
	 *
	 * @param {Number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the left by the given amount.
	 * @api public
	 */
	Long.prototype.shiftLeft = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var low = this.low_;
	    if (numBits < 32) {
	      var high = this.high_;
	      return Long.fromBits(
	                 low << numBits,
	                 (high << numBits) | (low >>> (32 - numBits)));
	    } else {
	      return Long.fromBits(0, low << (numBits - 32));
	    }
	  }
	};

	/**
	 * Returns this Long with bits shifted to the right by the given amount.
	 *
	 * @param {Number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the right by the given amount.
	 * @api public
	 */
	Long.prototype.shiftRight = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Long.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >> numBits);
	    } else {
	      return Long.fromBits(
	                 high >> (numBits - 32),
	                 high >= 0 ? 0 : -1);
	    }
	  }
	};

	/**
	 * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
	 *
	 * @param {Number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.
	 * @api public
	 */
	Long.prototype.shiftRightUnsigned = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Long.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >>> numBits);
	    } else if (numBits == 32) {
	      return Long.fromBits(high, 0);
	    } else {
	      return Long.fromBits(high >>> (numBits - 32), 0);
	    }
	  }
	};

	/**
	 * Returns a Long representing the given (32-bit) integer value.
	 *
	 * @param {Number} value the 32-bit integer in question.
	 * @return {Long} the corresponding Long value.
	 * @api public
	 */
	Long.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    var cachedObj = Long.INT_CACHE_[value];
	    if (cachedObj) {
	      return cachedObj;
	    }
	  }

	  var obj = new Long(value | 0, value < 0 ? -1 : 0);
	  if (-128 <= value && value < 128) {
	    Long.INT_CACHE_[value] = obj;
	  }
	  return obj;
	};

	/**
	 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	 *
	 * @param {Number} value the number in question.
	 * @return {Long} the corresponding Long value.
	 * @api public
	 */
	Long.fromNumber = function(value) {
	  if (isNaN(value) || !isFinite(value)) {
	    return Long.ZERO;
	  } else if (value <= -Long.TWO_PWR_63_DBL_) {
	    return Long.MIN_VALUE;
	  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {
	    return Long.MAX_VALUE;
	  } else if (value < 0) {
	    return Long.fromNumber(-value).negate();
	  } else {
	    return new Long(
	               (value % Long.TWO_PWR_32_DBL_) | 0,
	               (value / Long.TWO_PWR_32_DBL_) | 0);
	  }
	};

	/**
	 * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
	 *
	 * @param {Number} lowBits the low 32-bits.
	 * @param {Number} highBits the high 32-bits.
	 * @return {Long} the corresponding Long value.
	 * @api public
	 */
	Long.fromBits = function(lowBits, highBits) {
	  return new Long(lowBits, highBits);
	};

	/**
	 * Returns a Long representation of the given string, written using the given radix.
	 *
	 * @param {String} str the textual representation of the Long.
	 * @param {Number} opt_radix the radix in which the text is written.
	 * @return {Long} the corresponding Long value.
	 * @api public
	 */
	Long.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }

	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (str.charAt(0) == '-') {
	    return Long.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character: ' + str);
	  }

	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Long.fromNumber(Math.pow(radix, 8));

	  var result = Long.ZERO;
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = Long.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(Long.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(Long.fromNumber(value));
	    }
	  }
	  return result;
	};

	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.


	/**
	 * A cache of the Long representations of small integer values.
	 * @type {Object}
	 * @api private
	 */
	Long.INT_CACHE_ = {};

	// NOTE: the compiler should inline these constant values below and then remove
	// these variables, so there should be no runtime penalty for these.

	/**
	 * Number used repeated below in calculations.  This must appear before the
	 * first call to any from* function below.
	 * @type {number}
	 * @api private
	 */
	Long.TWO_PWR_16_DBL_ = 1 << 16;

	/**
	 * @type {number}
	 * @api private
	 */
	Long.TWO_PWR_24_DBL_ = 1 << 24;

	/**
	 * @type {number}
	 * @api private
	 */
	Long.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @api private
	 */
	Long.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;

	/**
	 * @type {number}
	 * @api private
	 */
	Long.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @api private
	 */
	Long.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;

	/**
	 * @type {number}
	 * @api private
	 */
	Long.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;

	/** @type {Long} */
	Long.ZERO = Long.fromInt(0);

	/** @type {Long} */
	Long.ONE = Long.fromInt(1);

	/** @type {Long} */
	Long.NEG_ONE = Long.fromInt(-1);

	/** @type {Long} */
	Long.MAX_VALUE =
	    Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);

	/** @type {Long} */
	Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);

	/**
	 * @type {Long}
	 * @api private
	 */
	Long.TWO_PWR_24_ = Long.fromInt(1 << 24);

	/**
	 * Expose.
	 */
	exports.Long = Long;

/***/ },
/* 263 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON Double type.
	 *
	 * @class Represents the BSON Double type.
	 * @param {Number} value the number we want to represent as a double.
	 * @return {Double}
	 */
	function Double(value) {
	  if(!(this instanceof Double)) return new Double(value);
	  
	  this._bsontype = 'Double';
	  this.value = value;
	}

	/**
	 * Access the number value.
	 *
	 * @return {Number} returns the wrapped double number.
	 * @api public
	 */
	Double.prototype.valueOf = function() {
	  return this.value;
	};

	/**
	 * @ignore
	 * @api private
	 */
	Double.prototype.toJSON = function() {
	  return this.value;
	}

	exports.Double = Double;

/***/ },
/* 264 */
/***/ function(module, exports) {

	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//
	// Copyright 2009 Google Inc. All Rights Reserved

	/**
	 * Defines a Timestamp class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "Timestamp". This
	 * implementation is derived from TimestampLib in GWT.
	 *
	 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	 * values as *signed* integers.  See the from* functions below for more
	 * convenient ways of constructing Timestamps.
	 *
	 * The internal representation of a Timestamp is the two given signed, 32-bit values.
	 * We use 32-bit pieces because these are the size of integers on which
	 * Javascript performs bit-operations.  For operations like addition and
	 * multiplication, we split each number into 16-bit pieces, which can easily be
	 * multiplied within Javascript's floating-point representation without overflow
	 * or change in sign.
	 *
	 * In the algorithms below, we frequently reduce the negative case to the
	 * positive case by negating the input(s) and then post-processing the result.
	 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	 * a positive number, it overflows back into a negative).  Not handling this
	 * case would often result in infinite recursion.
	 *
	 * @class Represents the BSON Timestamp type.
	 * @param {Number} low  the low (signed) 32 bits of the Timestamp.
	 * @param {Number} high the high (signed) 32 bits of the Timestamp.
	 */
	function Timestamp(low, high) {
	  if(!(this instanceof Timestamp)) return new Timestamp(low, high);
	  this._bsontype = 'Timestamp';
	  /**
	   * @type {number}
	   * @api private
	   */
	  this.low_ = low | 0;  // force into 32 signed bits.

	  /**
	   * @type {number}
	   * @api private
	   */
	  this.high_ = high | 0;  // force into 32 signed bits.
	};

	/**
	 * Return the int value.
	 *
	 * @return {Number} the value, assuming it is a 32-bit integer.
	 * @api public
	 */
	Timestamp.prototype.toInt = function() {
	  return this.low_;
	};

	/**
	 * Return the Number value.
	 *
	 * @return {Number} the closest floating-point representation to this value.
	 * @api public
	 */
	Timestamp.prototype.toNumber = function() {
	  return this.high_ * Timestamp.TWO_PWR_32_DBL_ +
	         this.getLowBitsUnsigned();
	};

	/**
	 * Return the JSON value.
	 *
	 * @return {String} the JSON representation.
	 * @api public
	 */
	Timestamp.prototype.toJSON = function() {
	  return this.toString();
	}

	/**
	 * Return the String value.
	 *
	 * @param {Number} [opt_radix] the radix in which the text should be written.
	 * @return {String} the textual representation of this value.
	 * @api public
	 */
	Timestamp.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (this.isZero()) {
	    return '0';
	  }

	  if (this.isNegative()) {
	    if (this.equals(Timestamp.MIN_VALUE)) {
	      // We need to change the Timestamp value before it can be negated, so we remove
	      // the bottom-most digit in this base and then recurse to do the rest.
	      var radixTimestamp = Timestamp.fromNumber(radix);
	      var div = this.div(radixTimestamp);
	      var rem = div.multiply(radixTimestamp).subtract(this);
	      return div.toString(radix) + rem.toInt().toString(radix);
	    } else {
	      return '-' + this.negate().toString(radix);
	    }
	  }

	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));

	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.div(radixToPower);
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	    var digits = intval.toString(radix);

	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};

	/**
	 * Return the high 32-bits value.
	 *
	 * @return {Number} the high 32-bits as a signed value.
	 * @api public
	 */
	Timestamp.prototype.getHighBits = function() {
	  return this.high_;
	};

	/**
	 * Return the low 32-bits value.
	 *
	 * @return {Number} the low 32-bits as a signed value.
	 * @api public
	 */
	Timestamp.prototype.getLowBits = function() {
	  return this.low_;
	};

	/**
	 * Return the low unsigned 32-bits value.
	 *
	 * @return {Number} the low 32-bits as an unsigned value.
	 * @api public
	 */
	Timestamp.prototype.getLowBitsUnsigned = function() {
	  return (this.low_ >= 0) ?
	      this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;
	};

	/**
	 * Returns the number of bits needed to represent the absolute value of this Timestamp.
	 *
	 * @return {Number} Returns the number of bits needed to represent the absolute value of this Timestamp.
	 * @api public
	 */
	Timestamp.prototype.getNumBitsAbs = function() {
	  if (this.isNegative()) {
	    if (this.equals(Timestamp.MIN_VALUE)) {
	      return 64;
	    } else {
	      return this.negate().getNumBitsAbs();
	    }
	  } else {
	    var val = this.high_ != 0 ? this.high_ : this.low_;
	    for (var bit = 31; bit > 0; bit--) {
	      if ((val & (1 << bit)) != 0) {
	        break;
	      }
	    }
	    return this.high_ != 0 ? bit + 33 : bit + 1;
	  }
	};

	/**
	 * Return whether this value is zero.
	 *
	 * @return {Boolean} whether this value is zero.
	 * @api public
	 */
	Timestamp.prototype.isZero = function() {
	  return this.high_ == 0 && this.low_ == 0;
	};

	/**
	 * Return whether this value is negative.
	 *
	 * @return {Boolean} whether this value is negative.
	 * @api public
	 */
	Timestamp.prototype.isNegative = function() {
	  return this.high_ < 0;
	};

	/**
	 * Return whether this value is odd.
	 *
	 * @return {Boolean} whether this value is odd.
	 * @api public
	 */
	Timestamp.prototype.isOdd = function() {
	  return (this.low_ & 1) == 1;
	};

	/**
	 * Return whether this Timestamp equals the other
	 *
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {Boolean} whether this Timestamp equals the other
	 * @api public
	 */
	Timestamp.prototype.equals = function(other) {
	  return (this.high_ == other.high_) && (this.low_ == other.low_);
	};

	/**
	 * Return whether this Timestamp does not equal the other.
	 *
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {Boolean} whether this Timestamp does not equal the other.
	 * @api public
	 */
	Timestamp.prototype.notEquals = function(other) {
	  return (this.high_ != other.high_) || (this.low_ != other.low_);
	};

	/**
	 * Return whether this Timestamp is less than the other.
	 *
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {Boolean} whether this Timestamp is less than the other.
	 * @api public
	 */
	Timestamp.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};

	/**
	 * Return whether this Timestamp is less than or equal to the other.
	 *
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {Boolean} whether this Timestamp is less than or equal to the other.
	 * @api public
	 */
	Timestamp.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};

	/**
	 * Return whether this Timestamp is greater than the other.
	 *
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {Boolean} whether this Timestamp is greater than the other.
	 * @api public
	 */
	Timestamp.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};

	/**
	 * Return whether this Timestamp is greater than or equal to the other.
	 *
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {Boolean} whether this Timestamp is greater than or equal to the other.
	 * @api public
	 */
	Timestamp.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};

	/**
	 * Compares this Timestamp with the given one.
	 *
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {Boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
	 * @api public
	 */
	Timestamp.prototype.compare = function(other) {
	  if (this.equals(other)) {
	    return 0;
	  }

	  var thisNeg = this.isNegative();
	  var otherNeg = other.isNegative();
	  if (thisNeg && !otherNeg) {
	    return -1;
	  }
	  if (!thisNeg && otherNeg) {
	    return 1;
	  }

	  // at this point, the signs are the same, so subtraction will not overflow
	  if (this.subtract(other).isNegative()) {
	    return -1;
	  } else {
	    return 1;
	  }
	};

	/**
	 * The negation of this value.
	 *
	 * @return {Timestamp} the negation of this value.
	 * @api public
	 */
	Timestamp.prototype.negate = function() {
	  if (this.equals(Timestamp.MIN_VALUE)) {
	    return Timestamp.MIN_VALUE;
	  } else {
	    return this.not().add(Timestamp.ONE);
	  }
	};

	/**
	 * Returns the sum of this and the given Timestamp.
	 *
	 * @param {Timestamp} other Timestamp to add to this one.
	 * @return {Timestamp} the sum of this and the given Timestamp.
	 * @api public
	 */
	Timestamp.prototype.add = function(other) {
	  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 + b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 + b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 + b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 + b48;
	  c48 &= 0xFFFF;
	  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns the difference of this and the given Timestamp.
	 *
	 * @param {Timestamp} other Timestamp to subtract from this.
	 * @return {Timestamp} the difference of this and the given Timestamp.
	 * @api public
	 */
	Timestamp.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};

	/**
	 * Returns the product of this and the given Timestamp.
	 *
	 * @param {Timestamp} other Timestamp to multiply with this.
	 * @return {Timestamp} the product of this and the other.
	 * @api public
	 */
	Timestamp.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return Timestamp.ZERO;
	  } else if (other.isZero()) {
	    return Timestamp.ZERO;
	  }

	  if (this.equals(Timestamp.MIN_VALUE)) {
	    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;
	  } else if (other.equals(Timestamp.MIN_VALUE)) {
	    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }

	  // If both Timestamps are small, use float multiplication
	  if (this.lessThan(Timestamp.TWO_PWR_24_) &&
	      other.lessThan(Timestamp.TWO_PWR_24_)) {
	    return Timestamp.fromNumber(this.toNumber() * other.toNumber());
	  }

	  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.
	  // We can skip products that would overflow.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 * b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 * b00;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c16 += a00 * b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 * b00;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a16 * b16;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a00 * b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	  c48 &= 0xFFFF;
	  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns this Timestamp divided by the given one.
	 *
	 * @param {Timestamp} other Timestamp by which to divide.
	 * @return {Timestamp} this Timestamp divided by the given one.
	 * @api public
	 */
	Timestamp.prototype.div = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return Timestamp.ZERO;
	  }

	  if (this.equals(Timestamp.MIN_VALUE)) {
	    if (other.equals(Timestamp.ONE) ||
	        other.equals(Timestamp.NEG_ONE)) {
	      return Timestamp.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	    } else if (other.equals(Timestamp.MIN_VALUE)) {
	      return Timestamp.ONE;
	    } else {
	      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	      var halfThis = this.shiftRight(1);
	      var approx = halfThis.div(other).shiftLeft(1);
	      if (approx.equals(Timestamp.ZERO)) {
	        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;
	      } else {
	        var rem = this.subtract(other.multiply(approx));
	        var result = approx.add(rem.div(other));
	        return result;
	      }
	    }
	  } else if (other.equals(Timestamp.MIN_VALUE)) {
	    return Timestamp.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().div(other.negate());
	    } else {
	      return this.negate().div(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.div(other.negate()).negate();
	  }

	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = Timestamp.ZERO;
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = Timestamp.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = Timestamp.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }

	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = Timestamp.ONE;
	    }

	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};

	/**
	 * Returns this Timestamp modulo the given one.
	 *
	 * @param {Timestamp} other Timestamp by which to mod.
	 * @return {Timestamp} this Timestamp modulo the given one.
	 * @api public
	 */
	Timestamp.prototype.modulo = function(other) {
	  return this.subtract(this.div(other).multiply(other));
	};

	/**
	 * The bitwise-NOT of this value.
	 *
	 * @return {Timestamp} the bitwise-NOT of this value.
	 * @api public
	 */
	Timestamp.prototype.not = function() {
	  return Timestamp.fromBits(~this.low_, ~this.high_);
	};

	/**
	 * Returns the bitwise-AND of this Timestamp and the given one.
	 *
	 * @param {Timestamp} other the Timestamp with which to AND.
	 * @return {Timestamp} the bitwise-AND of this and the other.
	 * @api public
	 */
	Timestamp.prototype.and = function(other) {
	  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);
	};

	/**
	 * Returns the bitwise-OR of this Timestamp and the given one.
	 *
	 * @param {Timestamp} other the Timestamp with which to OR.
	 * @return {Timestamp} the bitwise-OR of this and the other.
	 * @api public
	 */
	Timestamp.prototype.or = function(other) {
	  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);
	};

	/**
	 * Returns the bitwise-XOR of this Timestamp and the given one.
	 *
	 * @param {Timestamp} other the Timestamp with which to XOR.
	 * @return {Timestamp} the bitwise-XOR of this and the other.
	 * @api public
	 */
	Timestamp.prototype.xor = function(other) {
	  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
	};

	/**
	 * Returns this Timestamp with bits shifted to the left by the given amount.
	 *
	 * @param {Number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the left by the given amount.
	 * @api public
	 */
	Timestamp.prototype.shiftLeft = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var low = this.low_;
	    if (numBits < 32) {
	      var high = this.high_;
	      return Timestamp.fromBits(
	                 low << numBits,
	                 (high << numBits) | (low >>> (32 - numBits)));
	    } else {
	      return Timestamp.fromBits(0, low << (numBits - 32));
	    }
	  }
	};

	/**
	 * Returns this Timestamp with bits shifted to the right by the given amount.
	 *
	 * @param {Number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the right by the given amount.
	 * @api public
	 */
	Timestamp.prototype.shiftRight = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Timestamp.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >> numBits);
	    } else {
	      return Timestamp.fromBits(
	                 high >> (numBits - 32),
	                 high >= 0 ? 0 : -1);
	    }
	  }
	};

	/**
	 * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
	 *
	 * @param {Number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.
	 * @api public
	 */
	Timestamp.prototype.shiftRightUnsigned = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Timestamp.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >>> numBits);
	    } else if (numBits == 32) {
	      return Timestamp.fromBits(high, 0);
	    } else {
	      return Timestamp.fromBits(high >>> (numBits - 32), 0);
	    }
	  }
	};

	/**
	 * Returns a Timestamp representing the given (32-bit) integer value.
	 *
	 * @param {Number} value the 32-bit integer in question.
	 * @return {Timestamp} the corresponding Timestamp value.
	 * @api public
	 */
	Timestamp.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    var cachedObj = Timestamp.INT_CACHE_[value];
	    if (cachedObj) {
	      return cachedObj;
	    }
	  }

	  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);
	  if (-128 <= value && value < 128) {
	    Timestamp.INT_CACHE_[value] = obj;
	  }
	  return obj;
	};

	/**
	 * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	 *
	 * @param {Number} value the number in question.
	 * @return {Timestamp} the corresponding Timestamp value.
	 * @api public
	 */
	Timestamp.fromNumber = function(value) {
	  if (isNaN(value) || !isFinite(value)) {
	    return Timestamp.ZERO;
	  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {
	    return Timestamp.MIN_VALUE;
	  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {
	    return Timestamp.MAX_VALUE;
	  } else if (value < 0) {
	    return Timestamp.fromNumber(-value).negate();
	  } else {
	    return new Timestamp(
	               (value % Timestamp.TWO_PWR_32_DBL_) | 0,
	               (value / Timestamp.TWO_PWR_32_DBL_) | 0);
	  }
	};

	/**
	 * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
	 *
	 * @param {Number} lowBits the low 32-bits.
	 * @param {Number} highBits the high 32-bits.
	 * @return {Timestamp} the corresponding Timestamp value.
	 * @api public
	 */
	Timestamp.fromBits = function(lowBits, highBits) {
	  return new Timestamp(lowBits, highBits);
	};

	/**
	 * Returns a Timestamp representation of the given string, written using the given radix.
	 *
	 * @param {String} str the textual representation of the Timestamp.
	 * @param {Number} opt_radix the radix in which the text is written.
	 * @return {Timestamp} the corresponding Timestamp value.
	 * @api public
	 */
	Timestamp.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }

	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (str.charAt(0) == '-') {
	    return Timestamp.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character: ' + str);
	  }

	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));

	  var result = Timestamp.ZERO;
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = Timestamp.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(Timestamp.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(Timestamp.fromNumber(value));
	    }
	  }
	  return result;
	};

	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.


	/**
	 * A cache of the Timestamp representations of small integer values.
	 * @type {Object}
	 * @api private
	 */
	Timestamp.INT_CACHE_ = {};

	// NOTE: the compiler should inline these constant values below and then remove
	// these variables, so there should be no runtime penalty for these.

	/**
	 * Number used repeated below in calculations.  This must appear before the
	 * first call to any from* function below.
	 * @type {number}
	 * @api private
	 */
	Timestamp.TWO_PWR_16_DBL_ = 1 << 16;

	/**
	 * @type {number}
	 * @api private
	 */
	Timestamp.TWO_PWR_24_DBL_ = 1 << 24;

	/**
	 * @type {number}
	 * @api private
	 */
	Timestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @api private
	 */
	Timestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;

	/**
	 * @type {number}
	 * @api private
	 */
	Timestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @api private
	 */
	Timestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;

	/**
	 * @type {number}
	 * @api private
	 */
	Timestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;

	/** @type {Timestamp} */
	Timestamp.ZERO = Timestamp.fromInt(0);

	/** @type {Timestamp} */
	Timestamp.ONE = Timestamp.fromInt(1);

	/** @type {Timestamp} */
	Timestamp.NEG_ONE = Timestamp.fromInt(-1);

	/** @type {Timestamp} */
	Timestamp.MAX_VALUE =
	    Timestamp.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);

	/** @type {Timestamp} */
	Timestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);

	/**
	 * @type {Timestamp}
	 * @api private
	 */
	Timestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);

	/**
	 * Expose.
	 */
	exports.Timestamp = Timestamp;

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Module dependencies.
	 */
	var BinaryParser = __webpack_require__(266).BinaryParser;

	/**
	 * Machine id.
	 *
	 * Create a random 3-byte value (i.e. unique for this
	 * process). Other drivers use a md5 of the machine id here, but
	 * that would mean an asyc call to gethostname, so we don't bother.
	 */
	var MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);

	// Regular expression that checks for hex value
	var checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");

	/**
	* Create a new ObjectID instance
	*
	* @class Represents the BSON ObjectID type
	* @param {String|Number} id Can be a 24 byte hex string, 12 byte binary string or a Number.
	* @return {Object} instance of ObjectID.
	*/
	var ObjectID = function ObjectID(id, _hex) {
	  if(!(this instanceof ObjectID)) return new ObjectID(id, _hex);

	  this._bsontype = 'ObjectID';
	  var __id = null;

	  // Throw an error if it's not a valid setup
	  if(id != null && 'number' != typeof id && (id.length != 12 && id.length != 24))
	    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");

	  // Generate id based on the input
	  if(id == null || typeof id == 'number') {
	    // convert to 12 byte binary string
	    this.id = this.generate(id);
	  } else if(id != null && id.length === 12) {
	    // assume 12 byte string
	    this.id = id;
	  } else if(checkForHexRegExp.test(id)) {
	    return ObjectID.createFromHexString(id);
	  } else {
	    throw new Error("Value passed in is not a valid 24 character hex string");
	  }

	  if(ObjectID.cacheHexString) this.__id = this.toHexString();
	};

	// Allow usage of ObjectId aswell as ObjectID
	var ObjectId = ObjectID;

	/**
	* Return the ObjectID id as a 24 byte hex string representation
	*
	* @return {String} return the 24 byte hex string representation.
	* @api public
	*/
	ObjectID.prototype.toHexString = function() {
	  if(ObjectID.cacheHexString && this.__id) return this.__id;

	  var hexString = ''
	    , number
	    , value;

	  for (var index = 0, len = this.id.length; index < len; index++) {
	    value = BinaryParser.toByte(this.id[index]);
	    number = value <= 15
	      ? '0' + value.toString(16)
	      : value.toString(16);
	    hexString = hexString + number;
	  }

	  if(ObjectID.cacheHexString) this.__id = hexString;
	  return hexString;
	};

	/**
	* Update the ObjectID index used in generating new ObjectID's on the driver
	*
	* @return {Number} returns next index value.
	* @api private
	*/
	ObjectID.prototype.get_inc = function() {
	  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;
	};

	/**
	* Update the ObjectID index used in generating new ObjectID's on the driver
	*
	* @return {Number} returns next index value.
	* @api private
	*/
	ObjectID.prototype.getInc = function() {
	  return this.get_inc();
	};

	/**
	* Generate a 12 byte id string used in ObjectID's
	*
	* @param {Number} [time] optional parameter allowing to pass in a second based timestamp.
	* @return {String} return the 12 byte id binary string.
	* @api private
	*/
	ObjectID.prototype.generate = function(time) {
	  if ('number' == typeof time) {
	    var time4Bytes = BinaryParser.encodeInt(time, 32, true, true);
	    /* for time-based ObjectID the bytes following the time will be zeroed */
	    var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);
	    var pid2Bytes = BinaryParser.fromShort(typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid);
	    var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);
	  } else {
	  	var unixTime = parseInt(Date.now()/1000,10);
	    var time4Bytes = BinaryParser.encodeInt(unixTime, 32, true, true);
	    var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);
	    var pid2Bytes = BinaryParser.fromShort(typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid);
	    var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);
	  }

	  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;
	};

	/**
	* Converts the id into a 24 byte hex string for printing
	*
	* @return {String} return the 24 byte hex string representation.
	* @api private
	*/
	ObjectID.prototype.toString = function() {
	  return this.toHexString();
	};

	/**
	* Converts to a string representation of this Id.
	*
	* @return {String} return the 24 byte hex string representation.
	* @api private
	*/
	ObjectID.prototype.inspect = ObjectID.prototype.toString;

	/**
	* Converts to its JSON representation.
	*
	* @return {String} return the 24 byte hex string representation.
	* @api private
	*/
	ObjectID.prototype.toJSON = function() {
	  return this.toHexString();
	};

	/**
	* Compares the equality of this ObjectID with `otherID`.
	*
	* @param {Object} otherID ObjectID instance to compare against.
	* @return {Bool} the result of comparing two ObjectID's
	* @api public
	*/
	ObjectID.prototype.equals = function equals (otherID) {
	  var id = (otherID instanceof ObjectID || otherID.toHexString)
	    ? otherID.id
	    : ObjectID.createFromHexString(otherID).id;

	  return this.id === id;
	}

	/**
	* Returns the generation date (accurate up to the second) that this ID was generated.
	*
	* @return {Date} the generation date
	* @api public
	*/
	ObjectID.prototype.getTimestamp = function() {
	  var timestamp = new Date();
	  timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true)) * 1000);
	  return timestamp;
	}

	/**
	* @ignore
	* @api private
	*/
	ObjectID.index = 0;

	ObjectID.createPk = function createPk () {
	  return new ObjectID();
	};

	/**
	* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
	*
	* @param {Number} time an integer number representing a number of seconds.
	* @return {ObjectID} return the created ObjectID
	* @api public
	*/
	ObjectID.createFromTime = function createFromTime (time) {
	  var id = BinaryParser.encodeInt(time, 32, true, true) +
	           BinaryParser.encodeInt(0, 64, true, true);
	  return new ObjectID(id);
	};

	/**
	* Creates an ObjectID from a hex string representation of an ObjectID.
	*
	* @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.
	* @return {ObjectID} return the created ObjectID
	* @api public
	*/
	ObjectID.createFromHexString = function createFromHexString (hexString) {
	  // Throw an error if it's not a valid setup
	  if(typeof hexString === 'undefined' || hexString != null && hexString.length != 24)
	    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");

	  var len = hexString.length;

	  if(len > 12*2) {
	    throw new Error('Id cannot be longer than 12 bytes');
	  }

	  var result = ''
	    , string
	    , number;

	  for (var index = 0; index < len; index += 2) {
	    string = hexString.substr(index, 2);
	    number = parseInt(string, 16);
	    result += BinaryParser.fromByte(number);
	  }

	  return new ObjectID(result, hexString);
	};

	/**
	* @ignore
	*/
	Object.defineProperty(ObjectID.prototype, "generationTime", {
	   enumerable: true
	 , get: function () {
	     return Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true));
	   }
	 , set: function (value) {
	     var value = BinaryParser.encodeInt(value, 32, true, true);
	     this.id = value + this.id.substr(4);
	     // delete this.__id;
	     this.toHexString();
	   }
	});

	/**
	 * Expose.
	 */
	exports.ObjectID = ObjectID;
	exports.ObjectId = ObjectID;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Binary Parser.
	 * Jonas Raoni Soares Silva
	 * http://jsfromhell.com/classes/binary-parser [v1.0]
	 */
	var chr = String.fromCharCode;

	var maxBits = [];
	for (var i = 0; i < 64; i++) {
		maxBits[i] = Math.pow(2, i);
	}

	function BinaryParser (bigEndian, allowExceptions) {
	  if(!(this instanceof BinaryParser)) return new BinaryParser(bigEndian, allowExceptions);
	  
		this.bigEndian = bigEndian;
		this.allowExceptions = allowExceptions;
	};

	BinaryParser.warn = function warn (msg) {
		if (this.allowExceptions) {
			throw new Error(msg);
	  }

		return 1;
	};

	BinaryParser.decodeFloat = function decodeFloat (data, precisionBits, exponentBits) {
		var b = new this.Buffer(this.bigEndian, data);

		b.checkBuffer(precisionBits + exponentBits + 1);

		var bias = maxBits[exponentBits - 1] - 1
	    , signal = b.readBits(precisionBits + exponentBits, 1)
	    , exponent = b.readBits(precisionBits, exponentBits)
	    , significand = 0
	    , divisor = 2
	    , curByte = b.buffer.length + (-precisionBits >> 3) - 1;

		do {
			for (var byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; ( byteValue & mask ) && ( significand += 1 / divisor ), divisor *= 2 );
		} while (precisionBits -= startBit);

		return exponent == ( bias << 1 ) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : ( 1 + signal * -2 ) * ( exponent || significand ? !exponent ? Math.pow( 2, -bias + 1 ) * significand : Math.pow( 2, exponent - bias ) * ( 1 + significand ) : 0 );
	};

	BinaryParser.decodeInt = function decodeInt (data, bits, signed, forceBigEndian) {
	  var b = new this.Buffer(this.bigEndian || forceBigEndian, data)
	      , x = b.readBits(0, bits)
	      , max = maxBits[bits]; //max = Math.pow( 2, bits );
	  
	  return signed && x >= max / 2
	      ? x - max
	      : x;
	};

	BinaryParser.encodeFloat = function encodeFloat (data, precisionBits, exponentBits) {
		var bias = maxBits[exponentBits - 1] - 1
	    , minExp = -bias + 1
	    , maxExp = bias
	    , minUnnormExp = minExp - precisionBits
	    , n = parseFloat(data)
	    , status = isNaN(n) || n == -Infinity || n == +Infinity ? n : 0
	    ,	exp = 0
	    , len = 2 * bias + 1 + precisionBits + 3
	    , bin = new Array(len)
	    , signal = (n = status !== 0 ? 0 : n) < 0
	    , intPart = Math.floor(n = Math.abs(n))
	    , floatPart = n - intPart
	    , lastBit
	    , rounded
	    , result
	    , i
	    , j;

		for (i = len; i; bin[--i] = 0);

		for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));

		for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0 ) && --floatPart);

		for (i = -1; ++i < len && !bin[i];);

		if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]) {
			if (!(rounded = bin[lastBit])) {
				for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);
			}

			for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));
		}

		for (i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);

		if ((exp = bias + 1 - i) >= minExp && exp <= maxExp) {
			++i;
	  } else if (exp < minExp) {
			exp != bias + 1 - len && exp < minUnnormExp && this.warn("encodeFloat::float underflow");
			i = bias + 1 - (exp = minExp - 1);
		}

		if (intPart || status !== 0) {
			this.warn(intPart ? "encodeFloat::float overflow" : "encodeFloat::" + status);
			exp = maxExp + 1;
			i = bias + 2;

			if (status == -Infinity) {
				signal = 1;
	    } else if (isNaN(status)) {
				bin[i] = 1;
	    }
		}

		for (n = Math.abs(exp + bias), j = exponentBits + 1, result = ""; --j; result = (n % 2) + result, n = n >>= 1);

		for (n = 0, j = 0, i = (result = (signal ? "1" : "0") + result + bin.slice(i, i + precisionBits).join("")).length, r = []; i; j = (j + 1) % 8) {
			n += (1 << j) * result.charAt(--i);
			if (j == 7) {
				r[r.length] = String.fromCharCode(n);
				n = 0;
			}
		}

		r[r.length] = n
	    ? String.fromCharCode(n)
	    : "";

		return (this.bigEndian ? r.reverse() : r).join("");
	};

	BinaryParser.encodeInt = function encodeInt (data, bits, signed, forceBigEndian) {
		var max = maxBits[bits];

	  if (data >= max || data < -(max / 2)) {
	    this.warn("encodeInt::overflow");
	    data = 0;
	  }

		if (data < 0) {
	    data += max;
	  }

		for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256));

		for (bits = -(-bits >> 3) - r.length; bits--; r[r.length] = "\0");

	  return ((this.bigEndian || forceBigEndian) ? r.reverse() : r).join("");
	};

	BinaryParser.toSmall    = function( data ){ return this.decodeInt( data,  8, true  ); };
	BinaryParser.fromSmall  = function( data ){ return this.encodeInt( data,  8, true  ); };
	BinaryParser.toByte     = function( data ){ return this.decodeInt( data,  8, false ); };
	BinaryParser.fromByte   = function( data ){ return this.encodeInt( data,  8, false ); };
	BinaryParser.toShort    = function( data ){ return this.decodeInt( data, 16, true  ); };
	BinaryParser.fromShort  = function( data ){ return this.encodeInt( data, 16, true  ); };
	BinaryParser.toWord     = function( data ){ return this.decodeInt( data, 16, false ); };
	BinaryParser.fromWord   = function( data ){ return this.encodeInt( data, 16, false ); };
	BinaryParser.toInt      = function( data ){ return this.decodeInt( data, 32, true  ); };
	BinaryParser.fromInt    = function( data ){ return this.encodeInt( data, 32, true  ); };
	BinaryParser.toLong     = function( data ){ return this.decodeInt( data, 64, true  ); };
	BinaryParser.fromLong   = function( data ){ return this.encodeInt( data, 64, true  ); };
	BinaryParser.toDWord    = function( data ){ return this.decodeInt( data, 32, false ); };
	BinaryParser.fromDWord  = function( data ){ return this.encodeInt( data, 32, false ); };
	BinaryParser.toQWord    = function( data ){ return this.decodeInt( data, 64, true ); };
	BinaryParser.fromQWord  = function( data ){ return this.encodeInt( data, 64, true ); };
	BinaryParser.toFloat    = function( data ){ return this.decodeFloat( data, 23, 8   ); };
	BinaryParser.fromFloat  = function( data ){ return this.encodeFloat( data, 23, 8   ); };
	BinaryParser.toDouble   = function( data ){ return this.decodeFloat( data, 52, 11  ); };
	BinaryParser.fromDouble = function( data ){ return this.encodeFloat( data, 52, 11  ); };

	// Factor out the encode so it can be shared by add_header and push_int32
	BinaryParser.encode_int32 = function encode_int32 (number, asArray) {
	  var a, b, c, d, unsigned;
	  unsigned = (number < 0) ? (number + 0x100000000) : number;
	  a = Math.floor(unsigned / 0xffffff);
	  unsigned &= 0xffffff;
	  b = Math.floor(unsigned / 0xffff);
	  unsigned &= 0xffff;
	  c = Math.floor(unsigned / 0xff);
	  unsigned &= 0xff;
	  d = Math.floor(unsigned);
	  return asArray ? [chr(a), chr(b), chr(c), chr(d)] : chr(a) + chr(b) + chr(c) + chr(d);
	};

	BinaryParser.encode_int64 = function encode_int64 (number) {
	  var a, b, c, d, e, f, g, h, unsigned;
	  unsigned = (number < 0) ? (number + 0x10000000000000000) : number;
	  a = Math.floor(unsigned / 0xffffffffffffff);
	  unsigned &= 0xffffffffffffff;
	  b = Math.floor(unsigned / 0xffffffffffff);
	  unsigned &= 0xffffffffffff;
	  c = Math.floor(unsigned / 0xffffffffff);
	  unsigned &= 0xffffffffff;
	  d = Math.floor(unsigned / 0xffffffff);
	  unsigned &= 0xffffffff;
	  e = Math.floor(unsigned / 0xffffff);
	  unsigned &= 0xffffff;
	  f = Math.floor(unsigned / 0xffff);
	  unsigned &= 0xffff;
	  g = Math.floor(unsigned / 0xff);
	  unsigned &= 0xff;
	  h = Math.floor(unsigned);
	  return chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);
	};

	/**
	 * UTF8 methods
	 */

	// Take a raw binary string and return a utf8 string
	BinaryParser.decode_utf8 = function decode_utf8 (binaryStr) {
	  var len = binaryStr.length
	    , decoded = ''
	    , i = 0
	    , c = 0
	    , c1 = 0
	    , c2 = 0
	    , c3;

	  while (i < len) {
	    c = binaryStr.charCodeAt(i);
	    if (c < 128) {
	      decoded += String.fromCharCode(c);
	      i++;
	    } else if ((c > 191) && (c < 224)) {
		    c2 = binaryStr.charCodeAt(i+1);
	      decoded += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
	      i += 2;
	    } else {
		    c2 = binaryStr.charCodeAt(i+1);
		    c3 = binaryStr.charCodeAt(i+2);
	      decoded += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	      i += 3;
	    }
	  }

	  return decoded;
	};

	// Encode a cstring
	BinaryParser.encode_cstring = function encode_cstring (s) {
	  return unescape(encodeURIComponent(s)) + BinaryParser.fromByte(0);
	};

	// Take a utf8 string and return a binary string
	BinaryParser.encode_utf8 = function encode_utf8 (s) {
	  var a = ""
	    , c;

	  for (var n = 0, len = s.length; n < len; n++) {
	    c = s.charCodeAt(n);

	    if (c < 128) {
		    a += String.fromCharCode(c);
	    } else if ((c > 127) && (c < 2048)) {
		    a += String.fromCharCode((c>>6) | 192) ;
		    a += String.fromCharCode((c&63) | 128);
	    } else {
	      a += String.fromCharCode((c>>12) | 224);
	      a += String.fromCharCode(((c>>6) & 63) | 128);
	      a += String.fromCharCode((c&63) | 128);
	    }
	  }

	  return a;
	};

	BinaryParser.hprint = function hprint (s) {
	  var number;

	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);        
	      process.stdout.write(number + " ")
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	        process.stdout.write(number + " ")
	    }
	  }
	  
	  process.stdout.write("\n\n");
	};

	BinaryParser.ilprint = function hprint (s) {
	  var number;

	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(10)
	        : s.charCodeAt(i).toString(10);

	      __webpack_require__(267).debug(number+' : ');
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(10)
	        : s.charCodeAt(i).toString(10);
	      __webpack_require__(267).debug(number+' : '+ s.charAt(i));
	    }
	  }
	};

	BinaryParser.hlprint = function hprint (s) {
	  var number;

	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	      __webpack_require__(267).debug(number+' : ');
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	      __webpack_require__(267).debug(number+' : '+ s.charAt(i));
	    }
	  }
	};

	/**
	 * BinaryParser buffer constructor.
	 */
	function BinaryParserBuffer (bigEndian, buffer) {
	  this.bigEndian = bigEndian || 0;
	  this.buffer = [];
	  this.setBuffer(buffer);
	};

	BinaryParserBuffer.prototype.setBuffer = function setBuffer (data) {
	  var l, i, b;

		if (data) {
	    i = l = data.length;
	    b = this.buffer = new Array(l);
			for (; i; b[l - i] = data.charCodeAt(--i));
			this.bigEndian && b.reverse();
		}
	};

	BinaryParserBuffer.prototype.hasNeededBits = function hasNeededBits (neededBits) {
		return this.buffer.length >= -(-neededBits >> 3);
	};

	BinaryParserBuffer.prototype.checkBuffer = function checkBuffer (neededBits) {
		if (!this.hasNeededBits(neededBits)) {
			throw new Error("checkBuffer::missing bytes");
	  }
	};

	BinaryParserBuffer.prototype.readBits = function readBits (start, length) {
		//shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)

		function shl (a, b) {
			for (; b--; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);
			return a;
		}

		if (start < 0 || length <= 0) {
			return 0;
	  }

		this.checkBuffer(start + length);

	  var offsetLeft
	    , offsetRight = start % 8
	    , curByte = this.buffer.length - ( start >> 3 ) - 1
	    , lastByte = this.buffer.length + ( -( start + length ) >> 3 )
	    , diff = curByte - lastByte
	    , sum = ((this.buffer[ curByte ] >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1)) + (diff && (offsetLeft = (start + length) % 8) ? (this.buffer[lastByte++] & ((1 << offsetLeft) - 1)) << (diff-- << 3) - offsetRight : 0);

		for(; diff; sum += shl(this.buffer[lastByte++], (diff-- << 3) - offsetRight));

		return sum;
	};

	/**
	 * Expose.
	 */
	BinaryParser.Buffer = BinaryParserBuffer;

	exports.BinaryParser = BinaryParser;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(268);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(269);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5)))

/***/ },
/* 268 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 269 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 270 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON Symbol type.
	 *
	 * @class Represents the BSON Symbol type.
	 * @param {String} value the string representing the symbol.
	 * @return {Symbol}
	 */
	function Symbol(value) {
	  if(!(this instanceof Symbol)) return new Symbol(value);
	  this._bsontype = 'Symbol';
	  this.value = value;
	}

	/**
	 * Access the wrapped string value.
	 *
	 * @return {String} returns the wrapped string.
	 * @api public
	 */
	Symbol.prototype.valueOf = function() {
	  return this.value;
	};

	/**
	 * @ignore
	 * @api private
	 */
	Symbol.prototype.toString = function() {
	  return this.value;
	}

	/**
	 * @ignore
	 * @api private
	 */
	Symbol.prototype.inspect = function() {
	  return this.value;
	}

	/**
	 * @ignore
	 * @api private
	 */
	Symbol.prototype.toJSON = function() {
	  return this.value;
	}

	exports.Symbol = Symbol;

/***/ },
/* 271 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON Code type.
	 *
	 * @class Represents the BSON Code type.
	 * @param {String|Function} code a string or function.
	 * @param {Object} [scope] an optional scope for the function.
	 * @return {Code}
	 */
	function Code(code, scope) {
	  if(!(this instanceof Code)) return new Code(code, scope);
	  
	  this._bsontype = 'Code';
	  this.code = code;
	  this.scope = scope == null ? {} : scope;
	};

	/**
	 * @ignore
	 * @api private
	 */
	Code.prototype.toJSON = function() {
	  return {scope:this.scope, code:this.code};
	}

	exports.Code = Code;

/***/ },
/* 272 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON MinKey type.
	 *
	 * @class Represents the BSON MinKey type.
	 * @return {MinKey}
	 */
	function MinKey() {
	  if(!(this instanceof MinKey)) return new MinKey();
	  
	  this._bsontype = 'MinKey';
	}

	exports.MinKey = MinKey;

/***/ },
/* 273 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON MaxKey type.
	 *
	 * @class Represents the BSON MaxKey type.
	 * @return {MaxKey}
	 */
	function MaxKey() {
	  if(!(this instanceof MaxKey)) return new MaxKey();
	  
	  this._bsontype = 'MaxKey';  
	}

	exports.MaxKey = MaxKey;

/***/ },
/* 274 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON DBRef type.
	 *
	 * @class Represents the BSON DBRef type.
	 * @param {String} namespace the collection name.
	 * @param {ObjectID} oid the reference ObjectID.
	 * @param {String} [db] optional db name, if omitted the reference is local to the current db.
	 * @return {DBRef}
	 */
	function DBRef(namespace, oid, db) {
	  if(!(this instanceof DBRef)) return new DBRef(namespace, oid, db);
	  
	  this._bsontype = 'DBRef';
	  this.namespace = namespace;
	  this.oid = oid;
	  this.db = db;
	};

	/**
	 * @ignore
	 * @api private
	 */
	DBRef.prototype.toJSON = function() {
	  return {
	    '$ref':this.namespace,
	    '$id':this.oid,
	    '$db':this.db == null ? '' : this.db
	  };
	}

	exports.DBRef = DBRef;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	if(typeof window === 'undefined') { 
	  var Buffer = __webpack_require__(258).Buffer; // TODO just use global Buffer
	}

	// Binary default subtype
	var BSON_BINARY_SUBTYPE_DEFAULT = 0;

	/**
	 * @ignore
	 * @api private
	 */
	var writeStringToArray = function(data) {
	  // Create a buffer
	  var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length);
	  // Write the content to the buffer
	  for(var i = 0; i < data.length; i++) {
	    buffer[i] = data.charCodeAt(i);
	  }  
	  // Write the string to the buffer
	  return buffer;
	}

	/**
	 * Convert Array ot Uint8Array to Binary String
	 *
	 * @ignore
	 * @api private
	 */
	var convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {
	  var result = "";
	  for(var i = startIndex; i < endIndex; i++) {
	   result = result + String.fromCharCode(byteArray[i]);
	  }
	  return result;  
	};

	/**
	 * A class representation of the BSON Binary type.
	 * 
	 * Sub types
	 *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.
	 *
	 * @class Represents the Binary BSON type.
	 * @param {Buffer} buffer a buffer object containing the binary data.
	 * @param {Number} [subType] the option binary type.
	 * @return {Grid}
	 */
	function Binary(buffer, subType) {
	  if(!(this instanceof Binary)) return new Binary(buffer, subType);
	  
	  this._bsontype = 'Binary';

	  if(buffer instanceof Number) {
	    this.sub_type = buffer;
	    this.position = 0;
	  } else {    
	    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;
	    this.position = 0;
	  }

	  if(buffer != null && !(buffer instanceof Number)) {
	    // Only accept Buffer, Uint8Array or Arrays
	    if(typeof buffer == 'string') {
	      // Different ways of writing the length of the string for the different types
	      if(typeof Buffer != 'undefined') {
	        this.buffer = new Buffer(buffer);
	      } else if(typeof Uint8Array != 'undefined' || (Object.prototype.toString.call(buffer) == '[object Array]')) {
	        this.buffer = writeStringToArray(buffer);
	      } else {
	        throw new Error("only String, Buffer, Uint8Array or Array accepted");
	      }
	    } else {
	      this.buffer = buffer;      
	    }
	    this.position = buffer.length;
	  } else {
	    if(typeof Buffer != 'undefined') {
	      this.buffer =  new Buffer(Binary.BUFFER_SIZE);      
	    } else if(typeof Uint8Array != 'undefined'){
	      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));
	    } else {
	      this.buffer = new Array(Binary.BUFFER_SIZE);
	    }
	    // Set position to start of buffer
	    this.position = 0;
	  }
	};

	/**
	 * Updates this binary with byte_value.
	 *
	 * @param {Character} byte_value a single byte we wish to write.
	 * @api public
	 */
	Binary.prototype.put = function put(byte_value) {
	  // If it's a string and a has more than one character throw an error
	  if(byte_value['length'] != null && typeof byte_value != 'number' && byte_value.length != 1) throw new Error("only accepts single character String, Uint8Array or Array");
	  if(typeof byte_value != 'number' && byte_value < 0 || byte_value > 255) throw new Error("only accepts number in a valid unsigned byte range 0-255");
	  
	  // Decode the byte value once
	  var decoded_byte = null;
	  if(typeof byte_value == 'string') {
	    decoded_byte = byte_value.charCodeAt(0);      
	  } else if(byte_value['length'] != null) {
	    decoded_byte = byte_value[0];
	  } else {
	    decoded_byte = byte_value;
	  }
	  
	  if(this.buffer.length > this.position) {
	    this.buffer[this.position++] = decoded_byte;
	  } else {
	    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {    
	      // Create additional overflow buffer
	      var buffer = new Buffer(Binary.BUFFER_SIZE + this.buffer.length);
	      // Combine the two buffers together
	      this.buffer.copy(buffer, 0, 0, this.buffer.length);
	      this.buffer = buffer;
	      this.buffer[this.position++] = decoded_byte;
	    } else {
	      var buffer = null;
	      // Create a new buffer (typed or normal array)
	      if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {
	        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));
	      } else {
	        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);
	      }      
	      
	      // We need to copy all the content to the new array
	      for(var i = 0; i < this.buffer.length; i++) {
	        buffer[i] = this.buffer[i];
	      }
	      
	      // Reassign the buffer
	      this.buffer = buffer;
	      // Write the byte
	      this.buffer[this.position++] = decoded_byte;
	    }
	  }
	};

	/**
	 * Writes a buffer or string to the binary.
	 *
	 * @param {Buffer|String} string a string or buffer to be written to the Binary BSON object.
	 * @param {Number} offset specify the binary of where to write the content.
	 * @api public
	 */
	Binary.prototype.write = function write(string, offset) {
	  offset = typeof offset == 'number' ? offset : this.position;

	  // If the buffer is to small let's extend the buffer
	  if(this.buffer.length < offset + string.length) {
	    var buffer = null;
	    // If we are in node.js
	    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {      
	      buffer = new Buffer(this.buffer.length + string.length);
	      this.buffer.copy(buffer, 0, 0, this.buffer.length);      
	    } else if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {
	      // Create a new buffer
	      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length))
	      // Copy the content
	      for(var i = 0; i < this.position; i++) {
	        buffer[i] = this.buffer[i];
	      }
	    }
	    
	    // Assign the new buffer
	    this.buffer = buffer;
	  }

	  if(typeof Buffer != 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {
	    string.copy(this.buffer, offset, 0, string.length);
	    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;
	    // offset = string.length
	  } else if(typeof Buffer != 'undefined' && typeof string == 'string' && Buffer.isBuffer(this.buffer)) {
	    this.buffer.write(string, 'binary', offset);
	    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;
	    // offset = string.length;
	  } else if(Object.prototype.toString.call(string) == '[object Uint8Array]' 
	    || Object.prototype.toString.call(string) == '[object Array]' && typeof string != 'string') {      
	    for(var i = 0; i < string.length; i++) {
	      this.buffer[offset++] = string[i];
	    }    

	    this.position = offset > this.position ? offset : this.position;
	  } else if(typeof string == 'string') {
	    for(var i = 0; i < string.length; i++) {
	      this.buffer[offset++] = string.charCodeAt(i);
	    }

	    this.position = offset > this.position ? offset : this.position;
	  }
	};

	/**
	 * Reads **length** bytes starting at **position**.
	 *
	 * @param {Number} position read from the given position in the Binary.
	 * @param {Number} length the number of bytes to read.
	 * @return {Buffer}
	 * @api public
	 */
	Binary.prototype.read = function read(position, length) {
	  length = length && length > 0
	    ? length
	    : this.position;
	  
	  // Let's return the data based on the type we have
	  if(this.buffer['slice']) {
	    return this.buffer.slice(position, position + length);
	  } else {
	    // Create a buffer to keep the result
	    var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);
	    for(var i = 0; i < length; i++) {
	      buffer[i] = this.buffer[position++];
	    }
	  }
	  // Return the buffer
	  return buffer;
	};

	/**
	 * Returns the value of this binary as a string.
	 *
	 * @return {String}
	 * @api public
	 */
	Binary.prototype.value = function value(asRaw) {
	  asRaw = asRaw == null ? false : asRaw;  
	  
	  // If it's a node.js buffer object
	  if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {
	    return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);
	  } else {
	    if(asRaw) {
	      // we support the slice command use it
	      if(this.buffer['slice'] != null) {
	        return this.buffer.slice(0, this.position);
	      } else {
	        // Create a new buffer to copy content to
	        var newBuffer = Object.prototype.toString.call(this.buffer) == '[object Uint8Array]' ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position);
	        // Copy content
	        for(var i = 0; i < this.position; i++) {
	          newBuffer[i] = this.buffer[i];
	        }
	        // Return the buffer
	        return newBuffer;
	      }
	    } else {
	      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);
	    }
	  }
	};

	/**
	 * Length.
	 *
	 * @return {Number} the length of the binary.
	 * @api public
	 */
	Binary.prototype.length = function length() {
	  return this.position;
	};

	/**
	 * @ignore
	 * @api private
	 */
	Binary.prototype.toJSON = function() {
	  return this.buffer != null ? this.buffer.toString('base64') : '';
	}

	/**
	 * @ignore
	 * @api private
	 */
	Binary.prototype.toString = function(format) {
	  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';
	}

	Binary.BUFFER_SIZE = 256;

	/**
	 * Default BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_DEFAULT = 0;
	/**
	 * Function BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_FUNCTION = 1;
	/**
	 * Byte Array BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * OLD UUID BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_UUID_OLD = 3;
	/**
	 * UUID BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_UUID = 4;
	/**
	 * MD5 BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_MD5 = 5;
	/**
	 * User BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_USER_DEFINED = 128;

	/**
	 * Expose.
	 */
	exports.Binary = Binary;



/***/ },
/* 276 */
/***/ function(module, exports) {

	// Copyright (c) 2008, Fair Oaks Labs, Inc.
	// All rights reserved.
	// 
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions are met:
	// 
	//  * Redistributions of source code must retain the above copyright notice,
	//    this list of conditions and the following disclaimer.
	// 
	//  * Redistributions in binary form must reproduce the above copyright notice,
	//    this list of conditions and the following disclaimer in the documentation
	//    and/or other materials provided with the distribution.
	// 
	//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors
	//    may be used to endorse or promote products derived from this software
	//    without specific prior written permission.
	// 
	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
	// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	// POSSIBILITY OF SUCH DAMAGE.
	//
	//
	// Modifications to writeIEEE754 to support negative zeroes made by Brian White

	var readIEEE754 = function(buffer, offset, endian, mLen, nBytes) {
	  var e, m,
	      bBE = (endian === 'big'),
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = bBE ? 0 : (nBytes - 1),
	      d = bBE ? 1 : -1,
	      s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};

	var writeIEEE754 = function(buffer, value, offset, endian, mLen, nBytes) {
	  var e, m, c,
	      bBE = (endian === 'big'),
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = bBE ? (nBytes-1) : 0,
	      d = bBE ? -1 : 1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e+eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

	  buffer[offset + i - d] |= s * 128;
	};

	exports.readIEEE754 = readIEEE754;
	exports.writeIEEE754 = writeIEEE754;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var bson = null;

	// Load the precompiled win32 binary
	if(process.platform == "win32" && process.arch == "x64") {
	  bson = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./win32/x64/bson\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));  
	} else if(process.platform == "win32" && process.arch == "ia32") {
	  bson = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./win32/ia32/bson\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));  
	} else {
	  bson = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../build/Release/bson\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));  
	}

	exports.BSON = bson.BSON;
	exports.Long = __webpack_require__(262).Long;
	exports.ObjectID = __webpack_require__(265).ObjectID;
	exports.DBRef = __webpack_require__(274).DBRef;
	exports.Code = __webpack_require__(271).Code;
	exports.Timestamp = __webpack_require__(264).Timestamp;
	exports.Binary = __webpack_require__(275).Binary;
	exports.Double = __webpack_require__(263).Double;
	exports.MaxKey = __webpack_require__(273).MaxKey;
	exports.MinKey = __webpack_require__(272).MinKey;
	exports.Symbol = __webpack_require__(270).Symbol;

	// Just add constants tot he Native BSON parser
	exports.BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;
	exports.BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;
	exports.BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
	exports.BSON.BSON_BINARY_SUBTYPE_UUID = 3;
	exports.BSON.BSON_BINARY_SUBTYPE_MD5 = 4;
	exports.BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./binary": 275,
		"./binary.js": 275,
		"./binary_parser": 266,
		"./binary_parser.js": 266,
		"./bson": 257,
		"./bson.js": 257,
		"./code": 271,
		"./code.js": 271,
		"./db_ref": 274,
		"./db_ref.js": 274,
		"./double": 263,
		"./double.js": 263,
		"./float_parser": 276,
		"./float_parser.js": 276,
		"./index": 256,
		"./index.js": 256,
		"./long": 262,
		"./long.js": 262,
		"./max_key": 273,
		"./max_key.js": 273,
		"./min_key": 272,
		"./min_key.js": 272,
		"./objectid": 265,
		"./objectid.js": 265,
		"./symbol": 270,
		"./symbol.js": 270,
		"./timestamp": 264,
		"./timestamp.js": 264
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 278;


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./admin": 280,
		"./admin.js": 280,
		"./auth/mongodb_cr": 328,
		"./auth/mongodb_cr.js": 328,
		"./auth/mongodb_gssapi": 329,
		"./auth/mongodb_gssapi.js": 329,
		"./auth/mongodb_plain": 337,
		"./auth/mongodb_plain.js": 337,
		"./auth/mongodb_sspi": 338,
		"./auth/mongodb_sspi.js": 338,
		"./collection": 281,
		"./collection.js": 281,
		"./commands/base_command": 283,
		"./commands/base_command.js": 283,
		"./commands/db_command": 287,
		"./commands/db_command.js": 287,
		"./commands/delete_command": 285,
		"./commands/delete_command.js": 285,
		"./commands/get_more_command": 306,
		"./commands/get_more_command.js": 306,
		"./commands/insert_command": 282,
		"./commands/insert_command.js": 282,
		"./commands/kill_cursor_command": 307,
		"./commands/kill_cursor_command.js": 307,
		"./commands/query_command": 284,
		"./commands/query_command.js": 284,
		"./commands/update_command": 286,
		"./commands/update_command.js": 286,
		"./connection/base": 339,
		"./connection/base.js": 339,
		"./connection/connection": 340,
		"./connection/connection.js": 340,
		"./connection/connection_pool": 342,
		"./connection/connection_pool.js": 342,
		"./connection/connection_utils": 341,
		"./connection/connection_utils.js": 341,
		"./connection/mongos": 344,
		"./connection/mongos.js": 344,
		"./connection/read_preference": 308,
		"./connection/read_preference.js": 308,
		"./connection/repl_set/ha": 346,
		"./connection/repl_set/ha.js": 346,
		"./connection/repl_set/options": 351,
		"./connection/repl_set/options.js": 351,
		"./connection/repl_set/repl_set": 348,
		"./connection/repl_set/repl_set.js": 348,
		"./connection/repl_set/repl_set_state": 352,
		"./connection/repl_set/repl_set_state.js": 352,
		"./connection/repl_set/strategies/ping_strategy": 349,
		"./connection/repl_set/strategies/ping_strategy.js": 349,
		"./connection/repl_set/strategies/statistics_strategy": 350,
		"./connection/repl_set/strategies/statistics_strategy.js": 350,
		"./connection/server": 345,
		"./connection/server.js": 345,
		"./connection/url_parser": 354,
		"./connection/url_parser.js": 354,
		"./cursor": 305,
		"./cursor.js": 305,
		"./cursorstream": 309,
		"./cursorstream.js": 309,
		"./db": 347,
		"./db.js": 347,
		"./gridfs/chunk": 355,
		"./gridfs/chunk.js": 355,
		"./gridfs/grid": 356,
		"./gridfs/grid.js": 356,
		"./gridfs/gridstore": 357,
		"./gridfs/gridstore.js": 357,
		"./gridfs/readstream": 358,
		"./gridfs/readstream.js": 358,
		"./index": 255,
		"./index.js": 255,
		"./mongo_client": 353,
		"./mongo_client.js": 353,
		"./responses/mongo_reply": 343,
		"./responses/mongo_reply.js": 343,
		"./utils": 288,
		"./utils.js": 288
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 279;


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Module dependencies.
	 */
	var Collection = __webpack_require__(281).Collection,
	    Cursor = __webpack_require__(305).Cursor,
	    DbCommand = __webpack_require__(287).DbCommand,
	    utils = __webpack_require__(288);

	/**
	 * Allows the user to access the admin functionality of MongoDB
	 *
	 * @class Represents the Admin methods of MongoDB.
	 * @param {Object} db Current db instance we wish to perform Admin operations on.
	 * @return {Function} Constructor for Admin type.
	 */
	function Admin(db) {
	  if(!(this instanceof Admin)) return new Admin(db);
	  this.db = db;
	};

	/**
	 * Retrieve the server information for the current
	 * instance of the db client
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from buildInfo or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.buildInfo = function(callback) {
	  this.serverInfo(callback);
	}

	/**
	 * Retrieve the server information for the current
	 * instance of the db client
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverInfo or null if an error occured.
	 * @return {null} Returns no result
	 * @api private
	 */
	Admin.prototype.serverInfo = function(callback) {
	  this.db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {
	    if(err != null) return callback(err, null);
	    return callback(null, doc.documents[0]);
	  });
	}

	/**
	 * Retrieve this db's server status.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverStatus or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Admin.prototype.serverStatus = function(callback) {
	  var self = this;

	  this.db.executeDbAdminCommand({serverStatus: 1}, function(err, doc) {
	    if(err == null && doc.documents[0].ok === 1) {
	      callback(null, doc.documents[0]);
	    } else {
	      if(err) return callback(err, false);
	      return callback(utils.toError(doc.documents[0]), false);
	    }
	  });
	};

	/**
	 * Retrieve the current profiling Level for MongoDB
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from profilingLevel or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.profilingLevel = function(callback) {
	  var self = this;

	  this.db.executeDbAdminCommand({profile:-1}, function(err, doc) {
	    doc = doc.documents[0];

	    if(err == null && doc.ok === 1) {
	      var was = doc.was;
	      if(was == 0) return callback(null, "off");
	      if(was == 1) return callback(null, "slow_only");
	      if(was == 2) return callback(null, "all");
	        return callback(new Error("Error: illegal profiling level value " + was), null);
	    } else {
	      err != null ? callback(err, null) : callback(new Error("Error with profile command"), null);
	    }
	  });
	};

	/**
	 * Ping the MongoDB server and retrieve results
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from ping or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.ping = function(options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();

	  this.db.executeDbAdminCommand({ping: 1}, callback);
	}

	/**
	 * Authenticate against MongoDB
	 *
	 * @param {String} username The user name for the authentication.
	 * @param {String} password The password for the authentication.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from authenticate or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.authenticate = function(username, password, callback) {
	  this.db.authenticate(username, password, {authdb: 'admin'}, function(err, doc) {
	    return callback(err, doc);
	  })
	}

	/**
	 * Logout current authenticated user
	 *
	 * @param {Object} [options] Optional parameters to the command.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from logout or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.logout = function(callback) {
	  this.db.logout({authdb: 'admin'},  function(err, doc) {
	    return callback(err, doc);
	  })
	}

	/**
	 * Add a user to the MongoDB server, if the user exists it will
	 * overwrite the current password
	 *
	 * Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {String} username The user name for the authentication.
	 * @param {String} password The password for the authentication.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from addUser or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.addUser = function(username, password, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() : {};

	  options.dbName = 'admin';
	  // Add user
	  this.db.addUser(username, password, options, function(err, doc) {
	    return callback(err, doc);
	  })
	}

	/**
	 * Remove a user from the MongoDB server
	 *
	 * Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {String} username The user name for the authentication.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from removeUser or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.removeUser = function(username, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() : {};
	  options.dbName = 'admin';

	  this.db.removeUser(username, options, function(err, doc) {
	    return callback(err, doc);
	  })
	}

	/**
	 * Set the current profiling level of MongoDB
	 *
	 * @param {String} level The new profiling level (off, slow_only, all)
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from setProfilingLevel or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.setProfilingLevel = function(level, callback) {
	  var self = this;
	  var command = {};
	  var profile = 0;

	  if(level == "off") {
	    profile = 0;
	  } else if(level == "slow_only") {
	    profile = 1;
	  } else if(level == "all") {
	    profile = 2;
	  } else {
	    return callback(new Error("Error: illegal profiling level value " + level));
	  }

	  // Set up the profile number
	  command['profile'] = profile;

	  this.db.executeDbAdminCommand(command, function(err, doc) {
	    doc = doc.documents[0];

	    if(err == null && doc.ok === 1)
	      return callback(null, level);
	    return err != null ? callback(err, null) : callback(new Error("Error with profile command"), null);
	  });
	};

	/**
	 * Retrive the current profiling information for MongoDB
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from profilingInfo or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.profilingInfo = function(callback) {
	  try {
	    new Cursor(this.db, new Collection(this.db, DbCommand.SYSTEM_PROFILE_COLLECTION), {}, {}, {dbName: 'admin'}).toArray(function(err, items) {
	        return callback(err, items);
	    });
	  } catch (err) {
	    return callback(err, null);
	  }
	};

	/**
	 * Execute a db command against the Admin database
	 *
	 * @param {Object} command A command object `{ping:1}`.
	 * @param {Object} [options] Optional parameters to the command.
	 * @param {Function} callback this will be called after executing this method. The command always return the whole result of the command as the second parameter.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.command = function(command, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() : {};

	  // Execute a command
	  this.db.executeDbAdminCommand(command, options, function(err, doc) {
	    // Ensure change before event loop executes
	    return callback != null ? callback(err, doc) : null;
	  });
	}

	/**
	 * Validate an existing collection
	 *
	 * @param {String} collectionName The name of the collection to validate.
	 * @param {Object} [options] Optional parameters to the command.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from validateCollection or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.validateCollection = function(collectionName, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() : {};

	  var self = this;
	  var command = {validate: collectionName};
	  var keys = Object.keys(options);

	  // Decorate command with extra options
	  for(var i = 0; i < keys.length; i++) {
	    if(options.hasOwnProperty(keys[i])) {
	      command[keys[i]] = options[keys[i]];
	    }
	  }

	  this.db.executeDbCommand(command, function(err, doc) {
	    if(err != null) return callback(err, null);
	    doc = doc.documents[0];

	    if(doc.ok === 0)
	      return callback(new Error("Error with validate command"), null);
	    if(doc.result != null && doc.result.constructor != String)
	      return callback(new Error("Error with validation data"), null);
	    if(doc.result != null && doc.result.match(/exception|corrupt/) != null)
	      return callback(new Error("Error: invalid collection " + collectionName), null);
	    if(doc.valid != null && !doc.valid)
	      return callback(new Error("Error: invalid collection " + collectionName), null);

	    return callback(null, doc);
	  });
	};

	/**
	 * List the available databases
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from listDatabases or null if an error occured.
	 * @return {null} Returns no result
	 * @api public
	 */
	Admin.prototype.listDatabases = function(callback) {
	  // Execute the listAllDatabases command
	  this.db.executeDbAdminCommand({listDatabases:1}, {}, function(err, doc) {
	    if(err != null) return callback(err, null);
	    return callback(null, doc.documents[0]);
	  });
	}

	/**
	 * Get ReplicaSet status
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from replSetGetStatus or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Admin.prototype.replSetGetStatus = function(callback) {
	  var self = this;

	  this.db.executeDbAdminCommand({replSetGetStatus:1}, function(err, doc) {
	    if(err == null && doc.documents[0].ok === 1)
	      return callback(null, doc.documents[0]);
	    if(err) return callback(err, false);
	    return callback(utils.toError(doc.documents[0]), false);
	  });
	};

	/**
	 * @ignore
	 */
	exports.Admin = Admin;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	 * Module dependencies.
	 * @ignore
	 */
	var InsertCommand = __webpack_require__(282).InsertCommand
	  , QueryCommand = __webpack_require__(284).QueryCommand
	  , DeleteCommand = __webpack_require__(285).DeleteCommand
	  , UpdateCommand = __webpack_require__(286).UpdateCommand
	  , DbCommand = __webpack_require__(287).DbCommand
	  , ObjectID = __webpack_require__(256).ObjectID
	  , Code = __webpack_require__(256).Code
	  , Cursor = __webpack_require__(305).Cursor
	  , utils = __webpack_require__(288);

	/**
	 * Precompiled regexes
	 * @ignore
	**/
	const eErrorMessages = /No matching object found/;

	/**
	 * toString helper.
	 * @ignore
	 */
	var toString = Object.prototype.toString;

	/**
	 * Create a new Collection instance (INTERNAL TYPE)
	 *
	 * Options
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **slaveOk** {Boolean, default:false}, Allow reads from secondaries.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *
	 * @class Represents a Collection
	 * @param {Object} db db instance.
	 * @param {String} collectionName collection name.
	 * @param {Object} [pkFactory] alternative primary key factory.
	 * @param {Object} [options] additional options for the collection.
	 * @return {Object} a collection instance.
	 */
	function Collection (db, collectionName, pkFactory, options) {
	  if(!(this instanceof Collection)) return new Collection(db, collectionName, pkFactory, options);

	  checkCollectionName(collectionName);

	  this.db = db;
	  this.collectionName = collectionName;
	  this.internalHint = null;
	  this.opts = options != null && ('object' === typeof options) ? options : {};
	  this.slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;
	  this.serializeFunctions = options == null || options.serializeFunctions == null ? db.serializeFunctions : options.serializeFunctions;
	  this.raw = options == null || options.raw == null ? db.raw : options.raw;

	  this.readPreference = options == null || options.readPreference == null ? db.serverConfig.options.readPreference : options.readPreference;
	  this.readPreference = this.readPreference == null ? 'primary' : this.readPreference;

	  this.pkFactory = pkFactory == null
	    ? ObjectID
	    : pkFactory;

	  var self = this;
	}

	/**
	 * Inserts a single document or a an array of documents into MongoDB.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **continueOnError/keepGoing** {Boolean, default:false}, keep inserting documents even if one document has an error, *mongodb 1.9.1 >*.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **forceServerObjectId** {Boolean, default:false}, let server assign ObjectId instead of the driver
	 *  - **checkKeys** {Boolean, default:true}, allows for disabling of document key checking (WARNING OPENS YOU UP TO INJECTION ATTACKS)
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Array|Object} docs
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} [callback] optional callback for the function, must be provided when using a writeconcern
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.insert = function insert (docs, options, callback) {
	  if ('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  var self = this;
	  insertAll(self, Array.isArray(docs) ? docs : [docs], options, callback);
	  return this;
	};

	/**
	 * @ignore
	 */
	var checkCollectionName = function checkCollectionName (collectionName) {
	  if('string' !== typeof collectionName) {
	    throw Error("collection name must be a String");
	  }

	  if(!collectionName || collectionName.indexOf('..') != -1) {
	    throw Error("collection names cannot be empty");
	  }

	  if(collectionName.indexOf('$') != -1 &&
	      collectionName.match(/((^\$cmd)|(oplog\.\$main))/) == null) {
	    throw Error("collection names must not contain '$'");
	  }

	  if(collectionName.match(/^\.|\.$/) != null) {
	    throw Error("collection names must not start or end with '.'");
	  }

	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~collectionName.indexOf("\x00")) {
	    throw new Error("collection names cannot contain a null character");
	  }
	};

	/**
	 * Removes documents specified by `selector` from the db.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **single** {Boolean, default:false}, removes the first document found.
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Object} [selector] optional select, no selector is equivalent to removing all documents.
	 * @param {Object} [options] additional options during remove.
	 * @param {Function} [callback] must be provided if you performing a remove with a writeconcern
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.remove = function remove(selector, options, callback) {
	  if ('function' === typeof selector) {
	    callback = selector;
	    selector = options = {};
	  } else if ('function' === typeof options) {
	    callback = options;
	    options = {};
	  }

	  // Ensure options
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  // Ensure we have at least an empty selector
	  selector = selector == null ? {} : selector;
	  // Set up flags for the command, if we have a single document remove
	  var flags = 0 | (options.single ? 1 : 0);

	  // DbName
	  var dbName = options['dbName'];
	  // If no dbname defined use the db one
	  if(dbName == null) {
	    dbName = this.db.databaseName;
	  }

	  // Create a delete command
	  var deleteCommand = new DeleteCommand(
	      this.db
	    , dbName + "." + this.collectionName
	    , selector
	    , flags);

	  var self = this;
	  var errorOptions = _getWriteConcern(self, options, callback);
	  // Execute the command, do not add a callback as it's async
	  if(_hasWriteConcern(errorOptions) && typeof callback == 'function') {
	    // Insert options
	    var commandOptions = {read:false};
	    // If we have safe set set async to false
	    if(errorOptions == null) commandOptions['async'] = true;
	    // Set safe option
	    commandOptions['safe'] = true;
	    // If we have an error option
	    if(typeof errorOptions == 'object') {
	      var keys = Object.keys(errorOptions);
	      for(var i = 0; i < keys.length; i++) {
	        commandOptions[keys[i]] = errorOptions[keys[i]];
	      }
	    }

	    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)
	    this.db._executeRemoveCommand(deleteCommand, commandOptions, function (err, error) {
	      error = error && error.documents;
	      if(!callback) return;

	      if(err) {
	        callback(err);
	      } else if(error[0].err || error[0].errmsg) {
	        callback(utils.toError(error[0]));
	      } else {
	        callback(null, error[0].n);
	      }
	    });
	  } else if(_hasWriteConcern(errorOptions) && callback == null) {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  } else {
	    var result = this.db._executeRemoveCommand(deleteCommand);
	    // If no callback just return
	    if (!callback) return;
	    // If error return error
	    if (result instanceof Error) {
	      return callback(result);
	    }
	    // Otherwise just return
	    return callback();
	  }
	};

	/**
	 * Renames the collection.
	 *
	 * Options
	 *  - **dropTarget** {Boolean, default:false}, drop the target name collection if it previously exists.
	 *
	 * @param {String} newName the new name of the collection.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback the callback accepting the result
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.rename = function rename(newName, options, callback) {
	  var self = this;
	  if(typeof options == 'function') {
	    callback = options;
	    options = {}
	  }

	  // Ensure the new name is valid
	  checkCollectionName(newName);
	  
	  // Execute the command, return the new renamed collection if successful
	  self.db._executeQueryCommand(DbCommand.createRenameCollectionCommand(self.db, self.collectionName, newName, options)
	    , utils.handleSingleCommandResultReturn(true, false, function(err, result) {
	      if(err) return callback(err, null)
	      try {
	        if(options.new_collection)
	          return callback(null, new Collection(self.db, newName, self.db.pkFactory));
	        self.collectionName = newName;
	        callback(null, self);
	      } catch(err) {
	        callback(err, null);
	      }
	    }));
	}

	/**
	 * @ignore
	 */
	var insertAll = function insertAll (self, docs, options, callback) {
	  if('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;

	  // Insert options (flags for insert)
	  var insertFlags = {};
	  // If we have a mongodb version >= 1.9.1 support keepGoing attribute
	  if(options['keepGoing'] != null) {
	    insertFlags['keepGoing'] = options['keepGoing'];
	  }

	  // If we have a mongodb version >= 1.9.1 support keepGoing attribute
	  if(options['continueOnError'] != null) {
	    insertFlags['continueOnError'] = options['continueOnError'];
	  }

	  // DbName
	  var dbName = options['dbName'];
	  // If no dbname defined use the db one
	  if(dbName == null) {
	    dbName = self.db.databaseName;
	  }

	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  if(options['serializeFunctions'] != null) {
	    insertFlags['serializeFunctions'] = options['serializeFunctions'];
	  } else {
	    insertFlags['serializeFunctions'] = self.serializeFunctions;
	  }

	  // Get checkKeys value
	  var checkKeys = typeof options.checkKeys != 'boolean' ? true : options.checkKeys;

	  // Pass in options
	  var insertCommand = new InsertCommand(
	      self.db
	    , dbName + "." + self.collectionName, checkKeys, insertFlags);

	  // Add the documents and decorate them with id's if they have none
	  for(var index = 0, len = docs.length; index < len; ++index) {
	    var doc = docs[index];

	    // Add id to each document if it's not already defined
	    if (!(Buffer.isBuffer(doc))
	      && doc['_id'] == null
	      && self.db.forceServerObjectId != true
	      && options.forceServerObjectId != true) {
	        doc['_id'] = self.pkFactory.createPk();
	    }

	    insertCommand.add(doc);
	  }

	  // Collect errorOptions
	  var errorOptions = _getWriteConcern(self, options, callback);
	  // Default command options
	  var commandOptions = {};
	  // If safe is defined check for error message
	  if(_hasWriteConcern(errorOptions) && typeof callback == 'function') {
	    // Insert options
	    commandOptions['read'] = false;
	    // If we have safe set set async to false
	    if(errorOptions == null) commandOptions['async'] = true;

	    // Set safe option
	    commandOptions['safe'] = errorOptions;
	    // If we have an error option
	    if(typeof errorOptions == 'object') {
	      var keys = Object.keys(errorOptions);
	      for(var i = 0; i < keys.length; i++) {
	        commandOptions[keys[i]] = errorOptions[keys[i]];
	      }
	    }

	    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)
	    self.db._executeInsertCommand(insertCommand, commandOptions, function (err, error) {
	      error = error && error.documents;
	      if(!callback) return;

	      if (err) {
	        callback(err);
	      } else if(error[0].err || error[0].errmsg) {
	        callback(utils.toError(error[0]));
	      } else {
	        callback(null, docs);
	      }
	    });
	  } else if(_hasWriteConcern(errorOptions) && callback == null) {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  } else {
	    // Execute the call without a write concern
	    var result = self.db._executeInsertCommand(insertCommand, commandOptions);
	    // If no callback just return
	    if(!callback) return;
	    // If error return error
	    if(result instanceof Error) {
	      return callback(result);
	    }

	    // Otherwise just return
	    return callback(null, docs);
	  }
	};

	/**
	 * Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic
	 * operators and update instead for more efficient operations.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Object} [doc] the document to save
	 * @param {Object} [options] additional options during remove.
	 * @param {Function} [callback] must be provided if you performing a safe save
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.save = function save(doc, options, callback) {
	  if('function' === typeof options) callback = options, options = null;
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  // Throw an error if attempting to perform a bulk operation
	  if(Array.isArray(doc)) throw new Error("doc parameter must be a single document");
	  // Extract the id, if we have one we need to do a update command
	  var id = doc['_id'];
	  var commandOptions = _getWriteConcern(this, options, callback);

	  if(id) {
	    commandOptions.upsert = true;
	    this.update({ _id: id }, doc, commandOptions, callback);
	  } else {
	    this.insert(doc, commandOptions, callback && function (err, docs) {
	      if(err) return callback(err, null);

	      if(Array.isArray(docs)) {
	        callback(err, docs[0]);
	      } else {
	        callback(err, docs);
	      }
	    });
	  }
	};

	/**
	 * Updates documents.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **upsert** {Boolean, default:false}, perform an upsert operation.
	 *  - **multi** {Boolean, default:false}, update all documents matching the selector.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **checkKeys** {Boolean, default:true}, allows for disabling of document key checking (WARNING OPENS YOU UP TO INJECTION ATTACKS)
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Object} selector the query to select the document/documents to be updated
	 * @param {Object} document the fields/vals to be updated, or in the case of an upsert operation, inserted.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} [callback] must be provided if you performing an update with a writeconcern
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.update = function update(selector, document, options, callback) {
	  if('function' === typeof options) callback = options, options = null;
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;

	  // DbName
	  var dbName = options['dbName'];
	  // If no dbname defined use the db one
	  if(dbName == null) {
	    dbName = this.db.databaseName;
	  }

	  // If we are not providing a selector or document throw
	  if(selector == null || typeof selector != 'object') return callback(new Error("selector must be a valid JavaScript object"));
	  if(document == null || typeof document != 'object') return callback(new Error("document must be a valid JavaScript object"));

	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  if(options['serializeFunctions'] != null) {
	    options['serializeFunctions'] = options['serializeFunctions'];
	  } else {
	    options['serializeFunctions'] = this.serializeFunctions;
	  }

	  // Build the options command
	  var updateCommand = new UpdateCommand(
	      this.db
	    , dbName + "." + this.collectionName
	    , selector
	    , document
	    , options);

	  var self = this;
	  // Unpack the error options if any
	  var errorOptions = _getWriteConcern(this, options, callback);
	  // If safe is defined check for error message
	  if(_hasWriteConcern(errorOptions) && typeof callback == 'function') {
	    // Insert options
	    var commandOptions = {read:false};
	    // If we have safe set set async to false
	    if(errorOptions == null) commandOptions['async'] = true;
	    // Set safe option
	    commandOptions['safe'] = errorOptions;
	    // If we have an error option
	    if(typeof errorOptions == 'object') {
	      var keys = Object.keys(errorOptions);
	      for(var i = 0; i < keys.length; i++) {
	        commandOptions[keys[i]] = errorOptions[keys[i]];
	      }
	    }

	    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)
	    this.db._executeUpdateCommand(updateCommand, commandOptions, function (err, error) {
	      error = error && error.documents;
	      if(!callback) return;

	      if(err) {
	        callback(err);
	      } else if(error[0].err || error[0].errmsg) {
	        callback(utils.toError(error[0]));
	      } else {
	        // Perform the callback
	        callback(null, error[0].n, error[0]);
	      }
	    });
	  } else if(_hasWriteConcern(errorOptions) && callback == null) {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  } else {
	    // Execute update
	    var result = this.db._executeUpdateCommand(updateCommand);
	    // If no callback just return
	    if (!callback) return;
	    // If error return error
	    if (result instanceof Error) {
	      return callback(result);
	    }
	    // Otherwise just return
	    return callback();
	  }
	};

	/**
	 * The distinct command returns returns a list of distinct values for the given key across a collection.
	 *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {String} key key to run distinct against.
	 * @param {Object} [query] option query to narrow the returned objects.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from distinct or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.distinct = function distinct(key, query, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  query = args.length ? args.shift() || {} : {};
	  options = args.length ? args.shift() || {} : {};

	  var mapCommandHash = {
	      'distinct': this.collectionName
	    , 'query': query
	    , 'key': key
	  };

	  // Set read preference if we set one
	  var readPreference = options['readPreference'] ? options['readPreference'] : false;
	  // Execute the command
	  this.db._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this.db, mapCommandHash)
	    , {read:readPreference}
	    , utils.handleSingleCommandResultReturn(null, null, function(err, result) {
	      if(err) return callback(err, null);
	      callback(null, result.values);
	    }));
	};

	/**
	 * Count number of matching documents in the db to a query.
	 *
	 * Options
	 *  - **skip** {Number}, The number of documents to skip for the count.
	 *  - **limit** {Number}, The limit of documents to count.
	 *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Object} [query] query to filter by before performing count.
	 * @param {Object} [options] additional options during count.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the count method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.count = function count (query, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  query = args.length ? args.shift() || {} : {};
	  options = args.length ? args.shift() || {} : {};
	  var skip = options.skip;
	  var limit = options.limit;

	  // Final query
	  var commandObject = {
	      'count': this.collectionName
	    , 'query': query
	    , 'fields': null
	  };

	  // Add limit and skip if defined
	  if(typeof skip == 'number') commandObject.skip = skip;
	  if(typeof limit == 'number') commandObject.limit = limit;

	  // Set read preference if we set one
	  var readPreference = _getReadConcern(this, options);

	  // Execute the command
	  this.db._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this.db, commandObject)
	    , {read: readPreference}
	    , utils.handleSingleCommandResultReturn(null, null, function(err, result) {
	      if(err) return callback(err, null);
	      if(result == null) return callback(new Error("no result returned for count"), null);
	      callback(null, result.n);
	    }));
	};


	/**
	 * Drop the collection
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the drop method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.drop = function drop(callback) {
	  this.db.dropCollection(this.collectionName, callback);
	};

	/**
	 * Find and update a document.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **remove** {Boolean, default:false}, set to true to remove the object before returning.
	 *  - **upsert** {Boolean, default:false}, perform an upsert operation.
	 *  - **new** {Boolean, default:false}, set to true if you want to return the modified object rather than the original. Ignored for remove.
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Object} query query object to locate the object to modify
	 * @param {Array}  sort - if multiple docs match, choose the first one in the specified sort order as the object to manipulate
	 * @param {Object} doc - the fields/vals to be updated
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the findAndModify method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.findAndModify = function findAndModify (query, sort, doc, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  sort = args.length ? args.shift() || [] : [];
	  doc = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};
	  var self = this;

	  var queryObject = {
	      'findandmodify': this.collectionName
	    , 'query': query
	    , 'sort': utils.formattedOrderClause(sort)
	  };

	  queryObject.new = options.new ? 1 : 0;
	  queryObject.remove = options.remove ? 1 : 0;
	  queryObject.upsert = options.upsert ? 1 : 0;

	  if (options.fields) {
	    queryObject.fields = options.fields;
	  }

	  if (doc && !options.remove) {
	    queryObject.update = doc;
	  }

	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  if(options['serializeFunctions'] != null) {
	    options['serializeFunctions'] = options['serializeFunctions'];
	  } else {
	    options['serializeFunctions'] = this.serializeFunctions;
	  }

	  // Only run command and rely on getLastError command
	  var command = DbCommand.createDbCommand(this.db, queryObject, options)
	  // Execute command
	  this.db._executeQueryCommand(command
	    , {read:false}, utils.handleSingleCommandResultReturn(null, null, function(err, result) {
	      if(err) return callback(err, null);
	      return callback(null, result.value, result);
	    }));
	}

	/**
	 * Find and remove a document
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Object} query query object to locate the object to modify
	 * @param {Array}  sort - if multiple docs match, choose the first one in the specified sort order as the object to manipulate
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the findAndRemove method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.findAndRemove = function(query, sort, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  sort = args.length ? args.shift() || [] : [];
	  options = args.length ? args.shift() || {} : {};
	  // Add the remove option
	  options['remove'] = true;
	  // Execute the callback
	  this.findAndModify(query, sort, null, options, callback);
	}

	var testForFields = {
	    limit: 1, sort: 1, fields:1, skip: 1, hint: 1, explain: 1, snapshot: 1, timeout: 1, tailable: 1, tailableRetryInterval: 1
	  , numberOfRetries: 1, awaitdata: 1, exhaust: 1, batchSize: 1, returnKey: 1, maxScan: 1, min: 1, max: 1, showDiskLoc: 1
	  , comment: 1, raw: 1, readPreference: 1, partial: 1, read: 1, dbName: 1
	};

	/**
	 * Creates a cursor for a query that can be used to iterate over results from MongoDB
	 *
	 * Various argument possibilities
	 *  - callback?
	 *  - selector, callback?,
	 *  - selector, fields, callback?
	 *  - selector, options, callback?
	 *  - selector, fields, options, callback?
	 *  - selector, fields, skip, limit, callback?
	 *  - selector, fields, skip, limit, timeout, callback?
	 *
	 * Options
	 *  - **limit** {Number, default:0}, sets the limit of documents returned in the query.
	 *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
	 *  - **fields** {Object}, the fields to return in the query. Object of fields to include or exclude (not both), {'a':1}
	 *  - **skip** {Number, default:0}, set to skip N documents ahead in your query (useful for pagination).
	 *  - **hint** {Object}, tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
	 *  - **explain** {Boolean, default:false}, explain the query instead of returning the data.
	 *  - **snapshot** {Boolean, default:false}, snapshot query.
	 *  - **timeout** {Boolean, default:false}, specify if the cursor can timeout.
	 *  - **tailable** {Boolean, default:false}, specify if the cursor is tailable.
	 *  - **tailableRetryInterval** {Number, default:100}, specify the miliseconds between getMores on tailable cursor.
	 *  - **numberOfRetries** {Number, default:5}, specify the number of times to retry the tailable cursor.
	 *  - **awaitdata** {Boolean, default:false} allow the cursor to wait for data, only applicable for tailable cursor.
	 *  - **exhaust** {Boolean, default:false} have the server send all the documents at once as getMore packets, not recommended.
	 *  - **batchSize** {Number, default:0}, set the batchSize for the getMoreCommand when iterating over the query results.
	 *  - **returnKey** {Boolean, default:false}, only return the index key.
	 *  - **maxScan** {Number}, Limit the number of items to scan.
	 *  - **min** {Number}, Set index bounds.
	 *  - **max** {Number}, Set index bounds.
	 *  - **showDiskLoc** {Boolean, default:false}, Show disk location of results.
	 *  - **comment** {String}, You can put a $comment field on a query to make looking in the profiler logs simpler.
	 *  - **raw** {Boolean, default:false}, Return all BSON documents as Raw Buffer documents.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *  - **numberOfRetries** {Number, default:5}, if using awaidata specifies the number of times to retry on timeout.
	 *  - **partial** {Boolean, default:false}, specify if the cursor should return partial results when querying against a sharded system
	 *
	 * @param {Object|ObjectID} query query object to locate the object to modify
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the find method or null if an error occured.
	 * @return {Cursor} returns a cursor to the query
	 * @api public
	 */
	Collection.prototype.find = function find () {
	  var options
	    , args = Array.prototype.slice.call(arguments, 0)
	    , has_callback = typeof args[args.length - 1] === 'function'
	    , has_weird_callback = typeof args[0] === 'function'
	    , callback = has_callback ? args.pop() : (has_weird_callback ? args.shift() : null)
	    , len = args.length
	    , selector = len >= 1 ? args[0] : {}
	    , fields = len >= 2 ? args[1] : undefined;

	  if(len === 1 && has_weird_callback) {
	    // backwards compat for callback?, options case
	    selector = {};
	    options = args[0];
	  }

	  if(len === 2 && !Array.isArray(fields)) {
	    var fieldKeys = Object.getOwnPropertyNames(fields);
	    var is_option = false;

	    for(var i = 0; i < fieldKeys.length; i++) {
	      if(testForFields[fieldKeys[i]] != null) {
	        is_option = true;
	        break;
	      }
	    }

	    if(is_option) {
	      options = fields;
	      fields = undefined;
	    } else {
	      options = {};
	    }
	  } else if(len === 2 && Array.isArray(fields) && !Array.isArray(fields[0])) {
	    var newFields = {};
	    // Rewrite the array
	    for(var i = 0; i < fields.length; i++) {
	      newFields[fields[i]] = 1;
	    }
	    // Set the fields
	    fields = newFields;
	  }

	  if(3 === len) {
	    options = args[2];
	  }

	  // Ensure selector is not null
	  selector = selector == null ? {} : selector;
	  // Validate correctness off the selector
	  var object = selector;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length)  {
	      var error = new Error("query selector raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  // Validate correctness of the field selector
	  var object = fields;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length)  {
	      var error = new Error("query fields raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  // Check special case where we are using an objectId
	  if(selector instanceof ObjectID || (selector != null && selector._bsontype == 'ObjectID')) {
	    selector = {_id:selector};
	  }

	  // If it's a serialized fields field we need to just let it through
	  // user be warned it better be good
	  if(options && options.fields && !(Buffer.isBuffer(options.fields))) {
	    fields = {};

	    if(Array.isArray(options.fields)) {
	      if(!options.fields.length) {
	        fields['_id'] = 1;
	      } else {
	        for (var i = 0, l = options.fields.length; i < l; i++) {
	          fields[options.fields[i]] = 1;
	        }
	      }
	    } else {
	      fields = options.fields;
	    }
	  }

	  if (!options) options = {};
	  options.skip = len > 3 ? args[2] : options.skip ? options.skip : 0;
	  options.limit = len > 3 ? args[3] : options.limit ? options.limit : 0;
	  options.raw = options.raw != null && typeof options.raw === 'boolean' ? options.raw : this.raw;
	  options.hint = options.hint != null ? normalizeHintField(options.hint) : this.internalHint;
	  options.timeout = len == 5 ? args[4] : typeof options.timeout === 'undefined' ? undefined : options.timeout;
	  // If we have overridden slaveOk otherwise use the default db setting
	  options.slaveOk = options.slaveOk != null ? options.slaveOk : this.db.slaveOk;

	  // Set option
	  var o = options;
	  // Support read/readPreference
	  if(o["read"] != null) o["readPreference"] = o["read"];
	  // Set the read preference
	  o.read = o["readPreference"] ? o.readPreference : this.readPreference;
	  // Adjust slave ok if read preference is secondary or secondary only
	  if(o.read == "secondary" || o.read == "secondaryOnly") options.slaveOk = true;

	  // callback for backward compatibility
	  if(callback) {
	    // TODO refactor Cursor args
	    callback(null, new Cursor(this.db, this, selector, fields, o));
	  } else {
	    return new Cursor(this.db, this, selector, fields, o);
	  }
	};

	/**
	 * Normalizes a `hint` argument.
	 *
	 * @param {String|Object|Array} hint
	 * @return {Object}
	 * @api private
	 */
	var normalizeHintField = function normalizeHintField(hint) {
	  var finalHint = null;

	  if(typeof hint == 'string') {
	    finalHint = hint;
	  } else if(Array.isArray(hint)) {
	    finalHint = {};

	    hint.forEach(function(param) {
	      finalHint[param] = 1;
	    });
	  } else if(hint != null && typeof hint == 'object') {
	    finalHint = {};
	    for (var name in hint) {
	      finalHint[name] = hint[name];
	    }
	  }

	  return finalHint;
	};

	/**
	 * Finds a single document based on the query
	 *
	 * Various argument possibilities
	 *  - callback?
	 *  - selector, callback?,
	 *  - selector, fields, callback?
	 *  - selector, options, callback?
	 *  - selector, fields, options, callback?
	 *  - selector, fields, skip, limit, callback?
	 *  - selector, fields, skip, limit, timeout, callback?
	 *
	 * Options
	 *  - **limit** {Number, default:0}, sets the limit of documents returned in the query.
	 *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
	 *  - **fields** {Object}, the fields to return in the query. Object of fields to include or exclude (not both), {'a':1}
	 *  - **skip** {Number, default:0}, set to skip N documents ahead in your query (useful for pagination).
	 *  - **hint** {Object}, tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
	 *  - **explain** {Boolean, default:false}, explain the query instead of returning the data.
	 *  - **snapshot** {Boolean, default:false}, snapshot query.
	 *  - **timeout** {Boolean, default:false}, specify if the cursor can timeout.
	 *  - **tailable** {Boolean, default:false}, specify if the cursor is tailable.
	 *  - **batchSize** {Number, default:0}, set the batchSize for the getMoreCommand when iterating over the query results.
	 *  - **returnKey** {Boolean, default:false}, only return the index key.
	 *  - **maxScan** {Number}, Limit the number of items to scan.
	 *  - **min** {Number}, Set index bounds.
	 *  - **max** {Number}, Set index bounds.
	 *  - **showDiskLoc** {Boolean, default:false}, Show disk location of results.
	 *  - **comment** {String}, You can put a $comment field on a query to make looking in the profiler logs simpler.
	 *  - **raw** {Boolean, default:false}, Return all BSON documents as Raw Buffer documents.
	 *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *  - **partial** {Boolean, default:false}, specify if the cursor should return partial results when querying against a sharded system
	 *
	 * @param {Object|ObjectID} query query object to locate the object to modify
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the findOne method or null if an error occured.
	 * @return {Cursor} returns a cursor to the query
	 * @api public
	 */
	Collection.prototype.findOne = function findOne () {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  var callback = args.pop();
	  var cursor = this.find.apply(this, args).limit(-1).batchSize(1);
	  // Return the item
	  cursor.nextObject(function(err, item) {
	    if(err != null) return callback(utils.toError(err), null);
	    callback(null, item);
	  });
	};

	/**
	 * Creates an index on the collection.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the createIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.createIndex = function createIndex (fieldOrSpec, options, callback) {
	  // Clean up call
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  options = typeof callback === 'function' ? options : callback;
	  options = options == null ? {} : options;

	  // Collect errorOptions
	  var errorOptions = _getWriteConcern(this, options, callback);
	  // Execute create index
	  this.db.createIndex(this.collectionName, fieldOrSpec, options, callback);
	};

	/**
	 * Ensures that an index exists, if it does not it creates it
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 *
	 * Deprecated Options
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the ensureIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.ensureIndex = function ensureIndex (fieldOrSpec, options, callback) {
	  // Clean up call
	  if (typeof callback === 'undefined' && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  if (options == null) {
	    options = {};
	  }

	  // Execute create index
	  this.db.ensureIndex(this.collectionName, fieldOrSpec, options, callback);
	};

	/**
	 * Retrieves this collections index info.
	 *
	 * Options
	 *  - **full** {Boolean, default:false}, returns the full raw index information.
	 *
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the indexInformation method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.indexInformation = function indexInformation (options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  // Call the index information
	  this.db.indexInformation(this.collectionName, options, callback);
	};

	/**
	 * Drops an index from this collection.
	 *
	 * @param {String} name
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the dropIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.dropIndex = function dropIndex (name, callback) {
	  this.db.dropIndex(this.collectionName, name, callback);
	};

	/**
	 * Drops all indexes from this collection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the dropAllIndexes method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.dropAllIndexes = function dropIndexes (callback) {
	  this.db.dropIndex(this.collectionName, '*', function (err, result) {
	    if(err) return callback(err, false);
	    callback(null, true);
	  });
	}

	/**
	 * Drops all indexes from this collection.
	 *
	 * @deprecated
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the dropIndexes method or null if an error occured.
	 * @return {null}
	 * @api private
	 */
	Collection.prototype.dropIndexes = Collection.prototype.dropAllIndexes;

	/**
	 * Reindex all indexes on the collection
	 * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the reIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	**/
	Collection.prototype.reIndex = function(callback) {
	  this.db.reIndex(this.collectionName, callback);
	}

	/**
	 * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.
	 *
	 * Options
	 *  - **out** {Object}, sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*
	 *  - **query** {Object}, query filter object.
	 *  - **sort** {Object}, sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.
	 *  - **limit** {Number}, number of objects to return from collection.
	 *  - **keeptemp** {Boolean, default:false}, keep temporary data.
	 *  - **finalize** {Function | String}, finalize function.
	 *  - **scope** {Object}, can pass in variables that can be access from map/reduce/finalize.
	 *  - **jsMode** {Boolean, default:false}, it is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.
	 *  - **verbose** {Boolean, default:false}, provide statistics on job execution time.
	 *  - **readPreference** {String, only for inline results}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Function|String} map the mapping function.
	 * @param {Function|String} reduce the reduce function.
	 * @param {Objects} [options] options for the map reduce job.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the mapReduce method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.mapReduce = function mapReduce (map, reduce, options, callback) {
	  if ('function' === typeof options) callback = options, options = {};
	  // Out must allways be defined (make sure we don't break weirdly on pre 1.8+ servers)
	  if(null == options.out) {
	    throw new Error("the out option parameter must be defined, see mongodb docs for possible values");
	  }

	  if ('function' === typeof map) {
	    map = map.toString();
	  }

	  if ('function' === typeof reduce) {
	    reduce = reduce.toString();
	  }

	  if ('function' === typeof options.finalize) {
	    options.finalize = options.finalize.toString();
	  }

	  var mapCommandHash = {
	      mapreduce: this.collectionName
	    , map: map
	    , reduce: reduce
	  };

	  // Add any other options passed in
	  for (var name in options) {
	    if ('scope' == name) {
	      mapCommandHash[name] = processScope(options[name]);
	    } else {
	      mapCommandHash[name] = options[name];
	    }
	  }

	  // Set read preference if we set one
	  var readPreference = _getReadConcern(this, options);

	  // If we have a read preference and inline is not set as output fail hard
	  if((readPreference != false && readPreference != 'primary') 
	    && options['out'] && (options['out'].inline != 1 && options['out'] != 'inline')) {
	      throw new Error("a readPreference can only be provided when performing an inline mapReduce");
	  }

	  // self
	  var self = this;
	  var cmd = DbCommand.createDbCommand(this.db, mapCommandHash);

	  this.db._executeQueryCommand(cmd, {read:readPreference}, function (err, result) {
	    if(err) return callback(err);
	    if(!result || !result.documents || result.documents.length == 0)
	      return callback(Error("command failed to return results"), null)

	    // Check if we have an error
	    if(1 != result.documents[0].ok || result.documents[0].err || result.documents[0].errmsg) {
	      return callback(utils.toError(result.documents[0]));
	    }

	    // Create statistics value
	    var stats = {};
	    if(result.documents[0].timeMillis) stats['processtime'] = result.documents[0].timeMillis;
	    if(result.documents[0].counts) stats['counts'] = result.documents[0].counts;
	    if(result.documents[0].timing) stats['timing'] = result.documents[0].timing;

	    // invoked with inline?
	    if(result.documents[0].results) {
	      return callback(null, result.documents[0].results, stats);
	    }

	    // The returned collection
	    var collection = null;

	    // If we have an object it's a different db
	    if(result.documents[0].result != null && typeof result.documents[0].result == 'object') {
	      var doc = result.documents[0].result;
	      collection = self.db.db(doc.db).collection(doc.collection);
	    } else {
	      // Create a collection object that wraps the result collection
	      collection = self.db.collection(result.documents[0].result)
	    }

	    // If we wish for no verbosity
	    if(options['verbose'] == null || !options['verbose']) {
	      return callback(err, collection);
	    }

	    // Return stats as third set of values
	    callback(err, collection, stats);
	  });
	};

	/**
	 * Functions that are passed as scope args must
	 * be converted to Code instances.
	 * @ignore
	 */
	function processScope (scope) {
	  if (!utils.isObject(scope)) {
	    return scope;
	  }

	  var keys = Object.keys(scope);
	  var i = keys.length;
	  var key;

	  while (i--) {
	    key = keys[i];
	    if ('function' == typeof scope[key]) {
	      scope[key] = new Code(String(scope[key]));
	    }
	  }

	  return scope;
	}

	/**
	 * Group function helper
	 * @ignore
	 */
	var groupFunction = function () {
	  var c = db[ns].find(condition);
	  var map = new Map();
	  var reduce_function = reduce;

	  while (c.hasNext()) {
	    var obj = c.next();
	    var key = {};

	    for (var i = 0, len = keys.length; i < len; ++i) {
	      var k = keys[i];
	      key[k] = obj[k];
	    }

	    var aggObj = map.get(key);

	    if (aggObj == null) {
	      var newObj = Object.extend({}, key);
	      aggObj = Object.extend(newObj, initial);
	      map.put(key, aggObj);
	    }

	    reduce_function(obj, aggObj);
	  }

	  return { "result": map.values() };
	}.toString();

	/**
	 * Run a group command across a collection
	  *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Object|Array|Function|Code} keys an object, array or function expressing the keys to group by.
	 * @param {Object} condition an optional condition that must be true for a row to be considered.
	 * @param {Object} initial initial value of the aggregation counter object.
	 * @param {Function|Code} reduce the reduce function aggregates (reduces) the objects iterated
	 * @param {Function|Code} finalize an optional function to be run on each item in the result set just before the item is returned.
	 * @param {Boolean} command specify if you wish to run using the internal group command or using eval, default is true.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the group method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.group = function group(keys, condition, initial, reduce, finalize, command, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 3);
	  callback = args.pop();
	  // Fetch all commands
	  reduce = args.length ? args.shift() : null;
	  finalize = args.length ? args.shift() : null;
	  command = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};

	  // Make sure we are backward compatible
	  if(!(typeof finalize == 'function')) {
	    command = finalize;
	    finalize = null;
	  }

	  if (!Array.isArray(keys) && keys instanceof Object && typeof(keys) !== 'function' && !(keys instanceof Code)) {
	    keys = Object.keys(keys);
	  }

	  if(typeof reduce === 'function') {
	    reduce = reduce.toString();
	  }

	  if(typeof finalize === 'function') {
	    finalize = finalize.toString();
	  }

	  // Set up the command as default
	  command = command == null ? true : command;

	  // Execute using the command
	  if(command) {
	    var reduceFunction = reduce instanceof Code
	        ? reduce
	        : new Code(reduce);

	    var selector = {
	      group: {
	          'ns': this.collectionName
	        , '$reduce': reduceFunction
	        , 'cond': condition
	        , 'initial': initial
	        , 'out': "inline"
	      }
	    };

	    // if finalize is defined
	    if(finalize != null) selector.group['finalize'] = finalize;
	    // Set up group selector
	    if ('function' === typeof keys || keys instanceof Code) {
	      selector.group.$keyf = keys instanceof Code
	        ? keys
	        : new Code(keys);
	    } else {
	      var hash = {};
	      keys.forEach(function (key) {
	        hash[key] = 1;
	      });
	      selector.group.key = hash;
	    }

	    var cmd = DbCommand.createDbSlaveOkCommand(this.db, selector);
	    // Set read preference if we set one
	    var readPreference = _getReadConcern(this, options);
	    // Execute the command
	    this.db._executeQueryCommand(cmd
	      , {read:readPreference}
	      , utils.handleSingleCommandResultReturn(null, null, function(err, result) {
	        if(err) return callback(err, null);
	        callback(null, result.retval);
	      }));
	  } else {
	    // Create execution scope
	    var scope = reduce != null && reduce instanceof Code
	      ? reduce.scope
	      : {};

	    scope.ns = this.collectionName;
	    scope.keys = keys;
	    scope.condition = condition;
	    scope.initial = initial;

	    // Pass in the function text to execute within mongodb.
	    var groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');

	    this.db.eval(new Code(groupfn, scope), function (err, results) {
	      if (err) return callback(err, null);
	      callback(null, results.result || results);
	    });
	  }
	};

	/**
	 * Returns the options of the collection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the options method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.options = function options(callback) {
	  this.db.collectionsInfo(this.collectionName, function (err, cursor) {
	    if (err) return callback(err);
	    cursor.nextObject(function (err, document) {
	      callback(err, document && document.options || null);
	    });
	  });
	};

	/**
	 * Returns if the collection is a capped collection
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the isCapped method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.isCapped = function isCapped(callback) {
	  this.options(function(err, document) {
	    if(err != null) {
	      callback(err);
	    } else {
	      callback(null, document && document.capped);
	    }
	  });
	};

	/**
	 * Checks if one or more indexes exist on the collection
	 *
	 * @param {String|Array} indexNames check if one or more indexes exist on the collection.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the indexExists method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.indexExists = function indexExists(indexes, callback) {
	 this.indexInformation(function(err, indexInformation) {
	   // If we have an error return
	   if(err != null) return callback(err, null);
	   // Let's check for the index names
	   if(Array.isArray(indexes)) {
	     for(var i = 0; i < indexes.length; i++) {
	       if(indexInformation[indexes[i]] == null) {
	         return callback(null, false);
	       }
	     }

	     // All keys found return true
	     return callback(null, true);
	   } else {
	     return callback(null, indexInformation[indexes] != null);
	   }
	 });
	}

	/**
	 * Execute the geoNear command to search for items in the collection
	 *
	 * Options
	 *  - **num** {Number}, max number of results to return.
	 *  - **maxDistance** {Number}, include results up to maxDistance from the point.
	 *  - **distanceMultiplier** {Number}, include a value to multiply the distances with allowing for range conversions.
	 *  - **query** {Object}, filter the results by a query.
	 *  - **spherical** {Boolean, default:false}, perform query using a spherical model.
	 *  - **uniqueDocs** {Boolean, default:false}, the closest location in a document to the center of the search region will always be returned MongoDB > 2.X.
	 *  - **includeLocs** {Boolean, default:false}, include the location data fields in the top level of the results MongoDB > 2.X.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Number} x point to search on the x axis, ensure the indexes are ordered in the same order.
	 * @param {Number} y point to search on the y axis, ensure the indexes are ordered in the same order.
	 * @param {Objects} [options] options for the map reduce job.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the geoNear method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.geoNear = function geoNear(x, y, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};

	  // Build command object
	  var commandObject = {
	    geoNear:this.collectionName,
	    near: [x, y]
	  }

	  // Decorate object if any with known properties
	  if(options['num'] != null) commandObject['num'] = options['num'];
	  if(options['maxDistance'] != null) commandObject['maxDistance'] = options['maxDistance'];
	  if(options['distanceMultiplier'] != null) commandObject['distanceMultiplier'] = options['distanceMultiplier'];
	  if(options['query'] != null) commandObject['query'] = options['query'];
	  if(options['spherical'] != null) commandObject['spherical'] = options['spherical'];
	  if(options['uniqueDocs'] != null) commandObject['uniqueDocs'] = options['uniqueDocs'];
	  if(options['includeLocs'] != null) commandObject['includeLocs'] = options['includeLocs'];

	  // Ensure we have the right read preference inheritance
	  options.readPreference = _getReadConcern(this, options);

	  // Execute the command
	  this.db.command(commandObject, options, function (err, res) {
	    if (err) {
	      callback(err);
	    } else if (res.err || res.errmsg) {
	      callback(utils.toError(res));
	    } else {
	      // should we only be returning res.results here? Not sure if the user
	      // should see the other return information
	      callback(null, res);
	    }
	  });
	}

	/**
	 * Execute a geo search using a geo haystack index on a collection.
	 *
	 * Options
	 *  - **maxDistance** {Number}, include results up to maxDistance from the point.
	 *  - **search** {Object}, filter the results by a query.
	 *  - **limit** {Number}, max number of results to return.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Number} x point to search on the x axis, ensure the indexes are ordered in the same order.
	 * @param {Number} y point to search on the y axis, ensure the indexes are ordered in the same order.
	 * @param {Objects} [options] options for the map reduce job.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the geoHaystackSearch method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.geoHaystackSearch = function geoHaystackSearch(x, y, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};

	  // Build command object
	  var commandObject = {
	    geoSearch:this.collectionName,
	    near: [x, y]
	  }

	  // Decorate object if any with known properties
	  if(options['maxDistance'] != null) commandObject['maxDistance'] = options['maxDistance'];
	  if(options['query'] != null) commandObject['search'] = options['query'];
	  if(options['search'] != null) commandObject['search'] = options['search'];
	  if(options['limit'] != null) commandObject['limit'] = options['limit'];

	  // Ensure we have the right read preference inheritance
	  options.readPreference = _getReadConcern(this, options);

	  // Execute the command
	  this.db.command(commandObject, options, function (err, res) {
	    if (err) {
	      callback(err);
	    } else if (res.err || res.errmsg) {
	      callback(utils.toError(res));
	    } else {
	      // should we only be returning res.results here? Not sure if the user
	      // should see the other return information
	      callback(null, res);
	    }
	  });
	}

	/**
	 * Retrieve all the indexes on the collection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the indexes method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.indexes = function indexes(callback) {
	  // Return all the index information
	  this.db.indexInformation(this.collectionName, {full:true}, callback);
	}

	/**
	 * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.1
	 *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Array} array containing all the aggregation framework commands for the execution.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the aggregate method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.aggregate = function(pipeline, options, callback) {
	  // *  - **explain** {Boolean}, return the query plan for the aggregation pipeline instead of the results. 2.3, 2.4
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  var self = this;

	  // If we have any of the supported options in the options object
	  var opts = args[args.length - 1];
	  options = opts.readPreference || opts.explain ? args.pop() : {}

	  // Convert operations to an array
	  if(!Array.isArray(args[0])) {
	    pipeline = [];
	    // Push all the operations to the pipeline
	    for(var i = 0; i < args.length; i++) pipeline.push(args[i]);
	  }

	  // Build the command
	  var command = { aggregate : this.collectionName, pipeline : pipeline};

	  // Ensure we have the right read preference inheritance
	  options.readPreference = _getReadConcern(this, options);

	  // Execute the command
	  this.db.command(command, options, function(err, result) {
	    if(err) {
	      callback(err);
	    } else if(result['err'] || result['errmsg']) {
	      callback(utils.toError(result));
	    } else if(typeof result == 'object' && result['serverPipeline']) {
	      callback(null, result);
	    } else {
	      callback(null, result.result);
	    }
	  });
	}

	/**
	 * Get all the collection statistics.
	 *
	 * Options
	 *  - **scale** {Number}, divide the returned sizes by scale value.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Objects} [options] options for the stats command.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the stats method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.stats = function stats(options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};

	  // Build command object
	  var commandObject = {
	    collStats:this.collectionName,
	  }

	  // Check if we have the scale value
	  if(options['scale'] != null) commandObject['scale'] = options['scale'];

	  // Ensure we have the right read preference inheritance
	  options.readPreference = _getReadConcern(this, options);

	  // Execute the command
	  this.db.command(commandObject, options, callback);
	}

	/**
	 * @ignore
	 */
	Object.defineProperty(Collection.prototype, "hint", {
	    enumerable: true
	  , get: function () {
	      return this.internalHint;
	    }
	  , set: function (v) {
	      this.internalHint = normalizeHintField(v);
	    }
	});

	var _getReadConcern = function(self, options) {
	  if(options.readPreference) return options.readPreference;
	  if(self.readPreference) return self.readPreference;
	  if(self.db.readPreference) return self.readPreference;
	  return 'primary';
	}

	/**
	 * @ignore
	 */
	var _hasWriteConcern = function(errorOptions) {
	  return errorOptions == true
	    || errorOptions.w > 0
	    || errorOptions.w == 'majority'
	    || errorOptions.j == true
	    || errorOptions.journal == true
	    || errorOptions.fsync == true
	}

	/**
	 * @ignore
	 */
	var _setWriteConcernHash = function(options) {
	  var finalOptions = {};
	  if(options.w != null) finalOptions.w = options.w;
	  if(options.journal == true) finalOptions.j = options.journal;
	  if(options.j == true) finalOptions.j = options.j;
	  if(options.fsync == true) finalOptions.fsync = options.fsync;
	  if(options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;
	  return finalOptions;
	}

	/**
	 * @ignore
	 */
	var _getWriteConcern = function(self, options, callback) {
	  // Final options
	  var finalOptions = {w:1};
	  // Local options verification
	  if(options.w != null || typeof options.j == 'boolean' || typeof options.journal == 'boolean' || typeof options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(options);
	  } else if(typeof options.safe == "boolean") {
	    finalOptions = {w: (options.safe ? 1 : 0)};
	  } else if(options.safe != null && typeof options.safe == 'object') {
	    finalOptions = _setWriteConcernHash(options.safe);
	  } else if(self.opts.w != null || typeof self.opts.j == 'boolean' || typeof self.opts.journal == 'boolean' || typeof self.opts.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.opts);
	  } else if(typeof self.opts.safe == "boolean") {
	    finalOptions = {w: (self.opts.safe ? 1 : 0)};
	  } else if(self.db.safe.w != null || typeof self.db.safe.j == 'boolean' || typeof self.db.safe.journal == 'boolean' || typeof self.db.safe.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.db.safe);
	  } else if(self.db.options.w != null || typeof self.db.options.j == 'boolean' || typeof self.db.options.journal == 'boolean' || typeof self.db.options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.db.options);
	  } else if(typeof self.db.safe == "boolean") {
	    finalOptions = {w: (self.db.safe ? 1 : 0)};
	  }

	  // Ensure we don't have an invalid combination of write concerns
	  if(finalOptions.w < 1
	    && (finalOptions.journal == true || finalOptions.j == true || finalOptions.fsync == true)) throw new Error("No acknowlegement using w < 1 cannot be combined with journal:true or fsync:true");

	  // Return the options
	  return finalOptions;
	}

	/**
	 * Expose.
	 */
	exports.Collection = Collection;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(283).BaseCommand,
	  inherits = __webpack_require__(267).inherits;

	/**
	  Insert Document Command
	**/
	var InsertCommand = exports.InsertCommand = function(db, collectionName, checkKeys, options) {
	  BaseCommand.call(this);

	  this.collectionName = collectionName;
	  this.documents = [];
	  this.checkKeys = checkKeys == null ? true : checkKeys;
	  this.db = db;
	  this.flags = 0;
	  this.serializeFunctions = false;

	  // Ensure valid options hash
	  options = options == null ? {} : options;

	  // Check if we have keepGoing set -> set flag if it's the case
	  if(options['keepGoing'] != null && options['keepGoing']) {
	    // This will finish inserting all non-index violating documents even if it returns an error
	    this.flags = 1;
	  }

	  // Check if we have keepGoing set -> set flag if it's the case
	  if(options['continueOnError'] != null && options['continueOnError']) {
	    // This will finish inserting all non-index violating documents even if it returns an error
	    this.flags = 1;
	  }

	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};

	inherits(InsertCommand, BaseCommand);

	// OpCodes
	InsertCommand.OP_INSERT =	2002;

	InsertCommand.prototype.add = function(document) {
	  if(Buffer.isBuffer(document)) {
	    var object_size = document[0] | document[1] << 8 | document[2] << 16 | document[3] << 24;
	    if(object_size != document.length)  {
	      var error = new Error("insert raw message size does not match message header size [" + document.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  this.documents.push(document);
	  return this;
	};

	/*
	struct {
	    MsgHeader header;             // standard message header
	    int32     ZERO;               // 0 - reserved for future use
	    cstring   fullCollectionName; // "dbname.collectionname"
	    BSON[]    documents;          // one or more documents to insert into the collection
	}
	*/
	InsertCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }

	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + (4 * 4);
	  // var docLength = 0
	  for(var i = 0; i < this.documents.length; i++) {
	    if(Buffer.isBuffer(this.documents[i])) {
	      totalLengthOfCommand += this.documents[i].length;
	    } else {
	      // Calculate size of document
	      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.documents[i], this.serializeFunctions, true);
	    }
	  }

	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");

	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");

	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (InsertCommand.OP_INSERT >> 24) & 0xff;
	  _command[_index + 2] = (InsertCommand.OP_INSERT >> 16) & 0xff;
	  _command[_index + 1] = (InsertCommand.OP_INSERT >> 8) & 0xff;
	  _command[_index] = InsertCommand.OP_INSERT & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write flags if any
	  _command[_index + 3] = (this.flags >> 24) & 0xff;
	  _command[_index + 2] = (this.flags >> 16) & 0xff;
	  _command[_index + 1] = (this.flags >> 8) & 0xff;
	  _command[_index] = this.flags & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;

	  // Write all the bson documents to the buffer at the index offset
	  for(var i = 0; i < this.documents.length; i++) {
	    // Document binary length
	    var documentLength = 0
	    var object = this.documents[i];

	    // Serialize the selector
	    // If we are passing a raw buffer, do minimal validation
	    if(Buffer.isBuffer(object)) {
	      documentLength = object.length;
	      // Copy the data into the current buffer
	      object.copy(_command, _index);
	    } else {
	      // Serialize the document straight to the buffer
	      documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;
	    }

	    // Write the length to the document
	    _command[_index + 3] = (documentLength >> 24) & 0xff;
	    _command[_index + 2] = (documentLength >> 16) & 0xff;
	    _command[_index + 1] = (documentLength >> 8) & 0xff;
	    _command[_index] = documentLength & 0xff;
	    // Update index in buffer
	    _index = _index + documentLength;
	    // Add terminating 0 for the object
	    _command[_index - 1] = 0;
	  }

	  return _command;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 283 */
/***/ function(module, exports) {

	/**
	  Base object used for common functionality
	**/
	var BaseCommand = exports.BaseCommand = function BaseCommand() {
	};

	var id = 1;
	BaseCommand.prototype.getRequestId = function getRequestId() {
	  if (!this.requestId) this.requestId = id++;
	  return this.requestId;
	};

	BaseCommand.prototype.setMongosReadPreference = function setMongosReadPreference(readPreference, tags) {}

	BaseCommand.prototype.updateRequestId = function() {
	  this.requestId = id++;
	  return this.requestId;
	};

	// OpCodes
	BaseCommand.OP_REPLY = 1;
	BaseCommand.OP_MSG = 1000;
	BaseCommand.OP_UPDATE = 2001;
	BaseCommand.OP_INSERT =	2002;
	BaseCommand.OP_GET_BY_OID = 2003;
	BaseCommand.OP_QUERY = 2004;
	BaseCommand.OP_GET_MORE = 2005;
	BaseCommand.OP_DELETE =	2006;
	BaseCommand.OP_KILL_CURSORS =	2007;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(283).BaseCommand,
	  inherits = __webpack_require__(267).inherits;

	/**
	  Insert Document Command
	**/
	var QueryCommand = exports.QueryCommand = function(db, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {
	  BaseCommand.call(this);

	  // Validate correctness off the selector
	  var object = query,
	    object_size;
	  if(Buffer.isBuffer(object)) {
	    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) {
	      var error = new Error("query selector raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  object = returnFieldSelector;
	  if(Buffer.isBuffer(object)) {
	    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) {
	      var error = new Error("query fields raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  // Make sure we don't get a null exception
	  options = options == null ? {} : options;
	  // Set up options
	  this.collectionName = collectionName;
	  this.queryOptions = queryOptions;
	  this.numberToSkip = numberToSkip;
	  this.numberToReturn = numberToReturn;

	  // Ensure we have no null query
	  query = query == null ? {} : query;
	  // Wrap query in the $query parameter so we can add read preferences for mongos
	  this.query = query;
	  this.returnFieldSelector = returnFieldSelector;
	  this.db = db;

	  // Force the slave ok flag to be set if we are not using primary read preference
	  if(this.db && this.db.slaveOk) {
	    this.queryOptions |= QueryCommand.OPTS_SLAVE;
	  }

	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};

	inherits(QueryCommand, BaseCommand);

	QueryCommand.OP_QUERY = 2004;

	/*
	 * Adds the read prefrence to the current command
	 */
	QueryCommand.prototype.setMongosReadPreference = function(readPreference, tags) {
	  // If we have readPreference set to true set to secondary prefered
	  if(readPreference == true) {
	    readPreference = 'secondaryPreferred';
	  } else if(readPreference == 'false') {
	    readPreference = 'primary';
	  }

	  // Force the slave ok flag to be set if we are not using primary read preference
	  if(readPreference != false && readPreference != 'primary') {
	    this.queryOptions |= QueryCommand.OPTS_SLAVE;
	  }

	  // Backward compatibility, ensure $query only set on read preference so 1.8.X works
	  if((readPreference != null || tags != null) && this.query['$query'] == null) {
	    this.query = {'$query': this.query};
	  }

	  // If we have no readPreference set and no tags, check if the slaveOk bit is set
	  if(readPreference == null && tags == null) {
	    // If we have a slaveOk bit set the read preference for MongoS
	    if(this.queryOptions & QueryCommand.OPTS_SLAVE) {
	      this.query['$readPreference'] = {mode: 'secondary'}
	    } else {
	      this.query['$readPreference'] = {mode: 'primary'}
	    }
	  }

	  // Build read preference object
	  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {
	    this.query['$readPreference'] = readPreference.toObject();
	  } else if(readPreference != null) {
	    // Add the read preference
	    this.query['$readPreference'] = {mode: readPreference};

	    // If we have tags let's add them
	    if(tags != null) {
	      this.query['$readPreference']['tags'] = tags;
	    }
	  }
	}

	/*
	struct {
	    MsgHeader header;                 // standard message header
	    int32     opts;                   // query options.  See below for details.
	    cstring   fullCollectionName;     // "dbname.collectionname"
	    int32     numberToSkip;           // number of documents to skip when returning results
	    int32     numberToReturn;         // number of documents to return in the first OP_REPLY
	    BSON      query ;                 // query object.  See below for details.
	  [ BSON      returnFieldSelector; ]  // OPTIONAL : selector indicating the fields to return.  See below for details.
	}
	*/
	QueryCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }

	  // Total length of the command
	  var totalLengthOfCommand = 0;
	  // Calculate total length of the document
	  if(Buffer.isBuffer(this.query)) {
	    totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.query.length + (4 * 4);
	  } else {
	    totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.db.bson.calculateObjectSize(this.query, this.serializeFunctions, true) + (4 * 4);
	  }

	  // Calculate extra fields size
	  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {
	    if(Object.keys(this.returnFieldSelector).length > 0) {
	      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.returnFieldSelector, this.serializeFunctions, true);
	    }
	  } else if(Buffer.isBuffer(this.returnFieldSelector)) {
	    totalLengthOfCommand += this.returnFieldSelector.length;
	  }

	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");

	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");

	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (QueryCommand.OP_QUERY >> 24) & 0xff;
	  _command[_index + 2] = (QueryCommand.OP_QUERY >> 16) & 0xff;
	  _command[_index + 1] = (QueryCommand.OP_QUERY >> 8) & 0xff;
	  _command[_index] = QueryCommand.OP_QUERY & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Write the query options
	  _command[_index + 3] = (this.queryOptions >> 24) & 0xff;
	  _command[_index + 2] = (this.queryOptions >> 16) & 0xff;
	  _command[_index + 1] = (this.queryOptions >> 8) & 0xff;
	  _command[_index] = this.queryOptions & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;

	  // Write the number of documents to skip
	  _command[_index + 3] = (this.numberToSkip >> 24) & 0xff;
	  _command[_index + 2] = (this.numberToSkip >> 16) & 0xff;
	  _command[_index + 1] = (this.numberToSkip >> 8) & 0xff;
	  _command[_index] = this.numberToSkip & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Write the number of documents to return
	  _command[_index + 3] = (this.numberToReturn >> 24) & 0xff;
	  _command[_index + 2] = (this.numberToReturn >> 16) & 0xff;
	  _command[_index + 1] = (this.numberToReturn >> 8) & 0xff;
	  _command[_index] = this.numberToReturn & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Document binary length
	  var documentLength = 0
	  var object = this.query;

	  // Serialize the selector
	  if(Buffer.isBuffer(object)) {
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);
	  } else {
	    // Serialize the document straight to the buffer
	    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;
	  }

	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // Add terminating 0 for the object
	  _command[_index - 1] = 0;

	  // Push field selector if available
	  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {
	    if(Object.keys(this.returnFieldSelector).length > 0) {
	      var documentLength = this.db.bson.serializeWithBufferAndIndex(this.returnFieldSelector, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;
	      // Write the length to the document
	      _command[_index + 3] = (documentLength >> 24) & 0xff;
	      _command[_index + 2] = (documentLength >> 16) & 0xff;
	      _command[_index + 1] = (documentLength >> 8) & 0xff;
	      _command[_index] = documentLength & 0xff;
	      // Update index in buffer
	      _index = _index + documentLength;
	      // Add terminating 0 for the object
	      _command[_index - 1] = 0;
	    }
	  } if(this.returnFieldSelector != null && Buffer.isBuffer(this.returnFieldSelector))  {
	    // Document binary length
	    var documentLength = 0
	    var object = this.returnFieldSelector;

	    // Serialize the selector
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);

	    // Write the length to the document
	    _command[_index + 3] = (documentLength >> 24) & 0xff;
	    _command[_index + 2] = (documentLength >> 16) & 0xff;
	    _command[_index + 1] = (documentLength >> 8) & 0xff;
	    _command[_index] = documentLength & 0xff;
	    // Update index in buffer
	    _index = _index + documentLength;
	    // Add terminating 0 for the object
	    _command[_index - 1] = 0;
	  }

	  // Return finished command
	  return _command;
	};

	// Constants
	QueryCommand.OPTS_NONE = 0;
	QueryCommand.OPTS_TAILABLE_CURSOR = 2;
	QueryCommand.OPTS_SLAVE = 4;
	QueryCommand.OPTS_OPLOG_REPLY = 8;
	QueryCommand.OPTS_NO_CURSOR_TIMEOUT = 16;
	QueryCommand.OPTS_AWAIT_DATA = 32;
	QueryCommand.OPTS_EXHAUST = 64;
	QueryCommand.OPTS_PARTIAL = 128;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(283).BaseCommand,
	  inherits = __webpack_require__(267).inherits;

	/**
	  Insert Document Command
	**/
	var DeleteCommand = exports.DeleteCommand = function(db, collectionName, selector, flags) {
	  BaseCommand.call(this);

	  // Validate correctness off the selector
	  var object = selector;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;        
	    if(object_size != object.length)  {
	      var error = new Error("delete raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	  
	  this.flags = flags;
	  this.collectionName = collectionName;
	  this.selector = selector;
	  this.db = db;
	};

	inherits(DeleteCommand, BaseCommand);

	DeleteCommand.OP_DELETE =	2006;

	/*
	struct {
	    MsgHeader header;                 // standard message header
	    int32     ZERO;                   // 0 - reserved for future use
	    cstring   fullCollectionName;     // "dbname.collectionname"
	    int32     ZERO;                   // 0 - reserved for future use
	    mongo.BSON      selector;               // query object.  See below for details.
	}
	*/
	DeleteCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }

	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.selector, false, true) + (4 * 4);
	  
	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");

	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");

	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;     
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (DeleteCommand.OP_DELETE >> 24) & 0xff;     
	  _command[_index + 2] = (DeleteCommand.OP_DELETE >> 16) & 0xff;
	  _command[_index + 1] = (DeleteCommand.OP_DELETE >> 8) & 0xff;
	  _command[_index] = DeleteCommand.OP_DELETE & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;

	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;    

	  // Write the flags
	  _command[_index + 3] = (this.flags >> 24) & 0xff;     
	  _command[_index + 2] = (this.flags >> 16) & 0xff;
	  _command[_index + 1] = (this.flags >> 8) & 0xff;
	  _command[_index] = this.flags & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Document binary length
	  var documentLength = 0

	  // Serialize the selector
	  // If we are passing a raw buffer, do minimal validation
	  if(Buffer.isBuffer(this.selector)) {
	    documentLength = this.selector.length;
	    // Copy the data into the current buffer
	    this.selector.copy(_command, _index);
	  } else {
	    documentLength = this.db.bson.serializeWithBufferAndIndex(this.selector, this.checkKeys, _command, _index) - _index + 1;
	  }
	  
	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;     
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // Add terminating 0 for the object
	  _command[_index - 1] = 0;      
	  return _command;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(283).BaseCommand,
	  inherits = __webpack_require__(267).inherits;

	/**
	  Update Document Command
	**/
	var UpdateCommand = exports.UpdateCommand = function(db, collectionName, spec, document, options) {
	  BaseCommand.call(this);

	  var object = spec;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    
	    if(object_size != object.length)  {
	      var error = new Error("update spec raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  var object = document;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    
	    if(object_size != object.length)  {
	      var error = new Error("update document raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  this.collectionName = collectionName;
	  this.spec = spec;
	  this.document = document;
	  this.db = db;
	  this.serializeFunctions = false;
	  this.checkKeys = typeof options.checkKeys != 'boolean' ? false : options.checkKeys;

	  // Generate correct flags
	  var db_upsert = 0;
	  var db_multi_update = 0;
	  db_upsert = options != null && options['upsert'] != null ? (options['upsert'] == true ? 1 : 0) : db_upsert;
	  db_multi_update = options != null && options['multi'] != null ? (options['multi'] == true ? 1 : 0) : db_multi_update;

	  // Flags
	  this.flags = parseInt(db_multi_update.toString() + db_upsert.toString(), 2);
	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};

	inherits(UpdateCommand, BaseCommand);

	UpdateCommand.OP_UPDATE = 2001;

	/*
	struct {
	    MsgHeader header;             // standard message header
	    int32     ZERO;               // 0 - reserved for future use
	    cstring   fullCollectionName; // "dbname.collectionname"
	    int32     flags;              // bit vector. see below
	    BSON      spec;               // the query to select the document
	    BSON      document;           // the document data to update with or insert
	}
	*/
	UpdateCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }

	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.spec, false, true) +
	      this.db.bson.calculateObjectSize(this.document, this.serializeFunctions, true) + (4 * 4);

	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");

	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");

	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;     
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (UpdateCommand.OP_UPDATE >> 24) & 0xff;     
	  _command[_index + 2] = (UpdateCommand.OP_UPDATE >> 16) & 0xff;
	  _command[_index + 1] = (UpdateCommand.OP_UPDATE >> 8) & 0xff;
	  _command[_index] = UpdateCommand.OP_UPDATE & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;

	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;    

	  // Write the update flags
	  _command[_index + 3] = (this.flags >> 24) & 0xff;     
	  _command[_index + 2] = (this.flags >> 16) & 0xff;
	  _command[_index + 1] = (this.flags >> 8) & 0xff;
	  _command[_index] = this.flags & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Document binary length
	  var documentLength = 0
	  var object = this.spec;

	  // Serialize the selector
	  // If we are passing a raw buffer, do minimal validation
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) throw new Error("raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);
	  } else {
	    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, false) - _index + 1;
	  }

	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;     
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // Add terminating 0 for the object
	  _command[_index - 1] = 0;    

	  // Document binary length
	  var documentLength = 0
	  var object = this.document;

	  // Serialize the document
	  // If we are passing a raw buffer, do minimal validation
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) throw new Error("raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);
	  } else {    
	    documentLength = this.db.bson.serializeWithBufferAndIndex(object, false, _command, _index, this.serializeFunctions) - _index + 1;
	  }

	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;     
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // Add terminating 0 for the object
	  _command[_index - 1] = 0;    

	  return _command;
	};

	// Constants
	UpdateCommand.DB_UPSERT = 0;
	UpdateCommand.DB_MULTI_UPDATE = 1;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	var QueryCommand = __webpack_require__(284).QueryCommand,
	  InsertCommand = __webpack_require__(282).InsertCommand,
	  inherits = __webpack_require__(267).inherits,
	  utils = __webpack_require__(288),
	  crypto = __webpack_require__(290);

	/**
	  Db Command
	**/
	var DbCommand = exports.DbCommand = function(dbInstance, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {
	  QueryCommand.call(this);
	  this.collectionName = collectionName;
	  this.queryOptions = queryOptions;
	  this.numberToSkip = numberToSkip;
	  this.numberToReturn = numberToReturn;
	  this.query = query;
	  this.returnFieldSelector = returnFieldSelector;
	  this.db = dbInstance;

	  if(this.db && this.db.slaveOk) {
	    this.queryOptions |= QueryCommand.OPTS_SLAVE;
	  }

	  // Make sure we don't get a null exception
	  options = options == null ? {} : options;
	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};

	inherits(DbCommand, QueryCommand);

	// Constants
	DbCommand.SYSTEM_NAMESPACE_COLLECTION = "system.namespaces";
	DbCommand.SYSTEM_INDEX_COLLECTION = "system.indexes";
	DbCommand.SYSTEM_PROFILE_COLLECTION = "system.profile";
	DbCommand.SYSTEM_USER_COLLECTION = "system.users";
	DbCommand.SYSTEM_COMMAND_COLLECTION = "$cmd";
	DbCommand.SYSTEM_JS_COLLECTION = "system.js";

	// New commands
	DbCommand.NcreateIsMasterCommand = function(db, databaseName) {
	  return new DbCommand(db, databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);
	};

	// Provide constructors for different db commands
	DbCommand.createIsMasterCommand = function(db) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);
	};

	DbCommand.createCollectionInfoCommand = function(db, selector) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_NAMESPACE_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, 0, selector, null);
	};

	DbCommand.createGetNonceCommand = function(db, options) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getnonce':1}, null);
	};

	DbCommand.createAuthenticationCommand = function(db, username, password, nonce, authdb) {
	  // Use node md5 generator
	  var md5 = crypto.createHash('md5');
	  // Generate keys used for authentication
	  md5.update(username + ":mongo:" + password);
	  var hash_password = md5.digest('hex');
	  // Final key
	  md5 = crypto.createHash('md5');
	  md5.update(nonce + username + hash_password);
	  var key = md5.digest('hex');
	  // Creat selector
	  var selector = {'authenticate':1, 'user':username, 'nonce':nonce, 'key':key};
	  // Create db command
	  return new DbCommand(db, authdb + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NONE, 0, -1, selector, null);
	};

	DbCommand.createLogoutCommand = function(db) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'logout':1}, null);
	};

	DbCommand.createCreateCollectionCommand = function(db, collectionName, options) {
	  var selector = {'create':collectionName};
	  // Modify the options to ensure correct behaviour
	  for(var name in options) {
	    if(options[name] != null && options[name].constructor != Function) selector[name] = options[name];
	  }
	  // Execute the command
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, selector, null);
	};

	DbCommand.createDropCollectionCommand = function(db, collectionName) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'drop':collectionName}, null);
	};

	DbCommand.createRenameCollectionCommand = function(db, fromCollectionName, toCollectionName, options) {
	  var renameCollection = db.databaseName + "." + fromCollectionName;
	  var toCollection = db.databaseName + "." + toCollectionName;
	  var dropTarget = options && options.dropTarget ? options.dropTarget : false;
	  return new DbCommand(db, "admin." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'renameCollection':renameCollection, 'to':toCollection, 'dropTarget':dropTarget}, null);
	};

	DbCommand.createGetLastErrorCommand = function(options, db) {

	  if (typeof db === 'undefined') {
	    db =  options;
	    options = {};
	  }
	  // Final command
	  var command = {'getlasterror':1};
	  // If we have an options Object let's merge in the fields (fsync/wtimeout/w)
	  if('object' === typeof options) {
	    for(var name in options) {
	      command[name] = options[name]
	    }
	  }

	  // Special case for w == 1, remove the w
	  if(1 == command.w) {
	    delete command.w;
	  }

	  // Execute command
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command, null);
	};

	DbCommand.createGetLastStatusCommand = DbCommand.createGetLastErrorCommand;

	DbCommand.createGetPreviousErrorsCommand = function(db) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getpreverror':1}, null);
	};

	DbCommand.createResetErrorHistoryCommand = function(db) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reseterror':1}, null);
	};

	DbCommand.createCreateIndexCommand = function(db, collectionName, fieldOrSpec, options) {
	  var fieldHash = {};
	  var indexes = [];
	  var keys;

	  // Get all the fields accordingly
	  if('string' == typeof fieldOrSpec) {
	    // 'type'
	    indexes.push(fieldOrSpec + '_' + 1);
	    fieldHash[fieldOrSpec] = 1;

	  } else if(utils.isArray(fieldOrSpec)) {

	    fieldOrSpec.forEach(function(f) {
	      if('string' == typeof f) {
	        // [{location:'2d'}, 'type']
	        indexes.push(f + '_' + 1);
	        fieldHash[f] = 1;
	      } else if(utils.isArray(f)) {
	        // [['location', '2d'],['type', 1]]
	        indexes.push(f[0] + '_' + (f[1] || 1));
	        fieldHash[f[0]] = f[1] || 1;
	      } else if(utils.isObject(f)) {
	        // [{location:'2d'}, {type:1}]
	        keys = Object.keys(f);
	        keys.forEach(function(k) {
	          indexes.push(k + '_' + f[k]);
	          fieldHash[k] = f[k];
	        });
	      } else {
	        // undefined (ignore)
	      }
	    });

	  } else if(utils.isObject(fieldOrSpec)) {
	    // {location:'2d', type:1}
	    keys = Object.keys(fieldOrSpec);
	    keys.forEach(function(key) {
	      indexes.push(key + '_' + fieldOrSpec[key]);
	      fieldHash[key] = fieldOrSpec[key];
	    });
	  }

	  // Generate the index name
	  var indexName = typeof options.name == 'string'
	    ? options.name
	    : indexes.join("_");

	  var selector = {
	    'ns': db.databaseName + "." + collectionName,
	    'key': fieldHash,
	    'name': indexName
	  }

	  // Ensure we have a correct finalUnique
	  var finalUnique = options == null || 'object' === typeof options
	    ? false
	    : options;

	  // Set up options
	  options = options == null || typeof options == 'boolean'
	    ? {}
	    : options;

	  // Add all the options
	  var keys = Object.keys(options);
	  for(var i = 0; i < keys.length; i++) {
	    selector[keys[i]] = options[keys[i]];
	  }

	  if(selector['unique'] == null)
	    selector['unique'] = finalUnique;

	  var name = db.databaseName + "." + DbCommand.SYSTEM_INDEX_COLLECTION;
	  var cmd = new InsertCommand(db, name, false);
	  return cmd.add(selector);
	};

	DbCommand.logoutCommand = function(db, command_hash, options) {
	  var dbName = options != null && options['authdb'] != null ? options['authdb'] : db.databaseName;
	  return new DbCommand(db, dbName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);
	}

	DbCommand.createDropIndexCommand = function(db, collectionName, indexName) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'deleteIndexes':collectionName, 'index':indexName}, null);
	};

	DbCommand.createReIndexCommand = function(db, collectionName) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reIndex':collectionName}, null);
	};

	DbCommand.createDropDatabaseCommand = function(db) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'dropDatabase':1}, null);
	};

	DbCommand.createDbCommand = function(db, command_hash, options, auth_db) {
	  var db_name = (auth_db ? auth_db : db.databaseName) + "." + DbCommand.SYSTEM_COMMAND_COLLECTION;
	  return new DbCommand(db, db_name, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null, options);
	};

	DbCommand.createAdminDbCommand = function(db, command_hash) {
	  return new DbCommand(db, "admin." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);
	};

	DbCommand.createAdminDbCommandSlaveOk = function(db, command_hash) {
	  return new DbCommand(db, "admin." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null);
	};

	DbCommand.createDbSlaveOkCommand = function(db, command_hash, options) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null, options);
	};


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {var timers = __webpack_require__(289);

	/**
	 * Sort functions, Normalize and prepare sort parameters
	 */
	var formatSortValue = exports.formatSortValue = function(sortDirection) {
	  var value = ("" + sortDirection).toLowerCase();

	  switch (value) {
	    case 'ascending':
	    case 'asc':
	    case '1':
	      return 1;
	    case 'descending':
	    case 'desc':
	    case '-1':
	      return -1;
	    default:
	      throw new Error("Illegal sort clause, must be of the form "
	                    + "[['field1', '(ascending|descending)'], "
	                    + "['field2', '(ascending|descending)']]");
	  }
	};

	var formattedOrderClause = exports.formattedOrderClause = function(sortValue) {
	  var orderBy = {};

	  if (Array.isArray(sortValue)) {
	    for(var i = 0; i < sortValue.length; i++) {
	      if(sortValue[i].constructor == String) {
	        orderBy[sortValue[i]] = 1;
	      } else {
	        orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);
	      }      
	    }
	  } else if(Object.prototype.toString.call(sortValue) === '[object Object]') {
	    orderBy = sortValue;
	  } else if (sortValue.constructor == String) {
	    orderBy[sortValue] = 1;
	  } else {
	    throw new Error("Illegal sort clause, must be of the form " +
	      "[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]");
	  }

	  return orderBy;
	};

	exports.encodeInt = function(value) {
	  var buffer = new Buffer(4);
	  buffer[3] = (value >> 24) & 0xff;      
	  buffer[2] = (value >> 16) & 0xff;
	  buffer[1] = (value >> 8) & 0xff;
	  buffer[0] = value & 0xff;
	  return buffer;
	}

	exports.encodeIntInPlace = function(value, buffer, index) {
	  buffer[index + 3] = (value >> 24) & 0xff;			
		buffer[index + 2] = (value >> 16) & 0xff;
		buffer[index + 1] = (value >> 8) & 0xff;
		buffer[index] = value & 0xff;
	}

	exports.encodeCString = function(string) {
	  var buf = new Buffer(string, 'utf8');
	  return [buf, new Buffer([0])];
	}

	exports.decodeUInt32 = function(array, index) {
	  return array[index] | array[index + 1] << 8 | array[index + 2] << 16 | array[index + 3] << 24;
	}

	// Decode the int
	exports.decodeUInt8 = function(array, index) {
	  return array[index];
	}

	/**
	 * Context insensitive type checks
	 */

	var toString = Object.prototype.toString;

	exports.isObject = function (arg) {
	  return '[object Object]' == toString.call(arg)
	}

	exports.isArray = function (arg) {
	  return Array.isArray(arg) ||
	    'object' == typeof arg && '[object Array]' == toString.call(arg)
	}

	exports.isDate = function (arg) {
	  return 'object' == typeof arg && '[object Date]' == toString.call(arg)
	}

	exports.isRegExp = function (arg) {
	  return 'object' == typeof arg && '[object RegExp]' == toString.call(arg)
	}

	/**
	 * Wrap a Mongo error document in an Error instance
	 * @ignore
	 * @api private
	 */
	var toError = function(error) {
	  if (error instanceof Error) return error;

	  var msg = error.err || error.errmsg || error;
	  var e = new Error(msg);
	  e.name = 'MongoError';

	  // Get all object keys
	  var keys = typeof error == 'object'
	    ? Object.keys(error)
	    : [];

	  for(var i = 0; i < keys.length; i++) {
	    e[keys[i]] = error[keys[i]];
	  }

	  return e;
	}
	exports.toError = toError;

	/**
	 * Convert a single level object to an array
	 * @ignore
	 * @api private
	 */
	exports.objectToArray = function(object) {
	  var list = [];

	  for(var name in object) {
	    list.push(object[name])
	  }

	  return list;
	}

	/**
	 * Handle single command document return
	 * @ignore
	 * @api private
	 */
	exports.handleSingleCommandResultReturn = function(override_value_true, override_value_false, callback) {
	  return function(err, result, connection) {
	    if(err) return callback(err, null);
	    if(!result || !result.documents || result.documents.length == 0)
	      if(callback) return callback(toError("command failed to return results"), null)
	    if(result.documents[0].ok == 1) {
	      if(override_value_true) return callback(null, override_value_true)
	      if(callback) return callback(null, result.documents[0]);
	    }

	    // Return the error from the document
	    if(callback) return callback(toError(result.documents[0]), override_value_false);    
	  }
	}

	/**
	 * Return correct processor
	 * @ignore
	 * @api private
	 */
	exports.processor = function() {
	  // Set processor, setImmediate if 0.10 otherwise nextTick
	  process.maxTickDepth = Infinity;
	  var processor = timers.setImmediate ? timers.setImmediate : process.nextTick;
	  // processor = process.nextTick;
	  return processor;  
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer, __webpack_require__(5)))

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(5).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(289).setImmediate, __webpack_require__(289).clearImmediate))

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(291)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(293)

	exports.createHmac = __webpack_require__(302)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(303)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(292)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(258).Buffer))

/***/ },
/* 292 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(294)

	var md5 = toConstructor(__webpack_require__(299))
	var rmd160 = toConstructor(__webpack_require__(301))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(258).Buffer
	var Hash   = __webpack_require__(295)(Buffer)

	exports.sha1 = __webpack_require__(296)(Buffer, Hash)
	exports.sha256 = __webpack_require__(297)(Buffer, Hash)
	exports.sha512 = __webpack_require__(298)(Buffer, Hash)


/***/ },
/* 295 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(267).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(267).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(267).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(300);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(293)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(304)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	var QueryCommand = __webpack_require__(284).QueryCommand,
	  GetMoreCommand = __webpack_require__(306).GetMoreCommand,
	  KillCursorCommand = __webpack_require__(307).KillCursorCommand,
	  Long = __webpack_require__(256).Long,
	  ReadPreference = __webpack_require__(308).ReadPreference,
	  CursorStream = __webpack_require__(309),
	  timers = __webpack_require__(289),
	  utils = __webpack_require__(288);

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	 * Constructor for a cursor object that handles all the operations on query result
	 * using find. This cursor object is unidirectional and cannot traverse backwards. Clients should not be creating a cursor directly,
	 * but use find to acquire a cursor. (INTERNAL TYPE)
	 *
	 * Options
	 *  - **skip** {Number} skip number of documents to skip.
	 *  - **limit** {Number}, limit the number of results to return. -1 has a special meaning and is used by Db.eval. A value of 1 will also be treated as if it were -1.
	 *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
	 *  - **hint**  {Object}, hint force the query to use a specific index.
	 *  - **explain** {Boolean}, explain return the explaination of the query.
	 *  - **snapshot** {Boolean}, snapshot Snapshot mode assures no duplicates are returned.
	 *  - **timeout** {Boolean}, timeout allow the query to timeout.
	 *  - **tailable** {Boolean}, tailable allow the cursor to be tailable.
	 *  - **awaitdata** {Boolean}, awaitdata allow the cursor to wait for data, only applicable for tailable cursor.
	 *  - **batchSize** {Number}, batchSize the number of the subset of results to request the database to return for every request. This should initially be greater than 1 otherwise the database will automatically close the cursor. The batch size can be set to 1 with cursorInstance.batchSize after performing the initial query to the database.
	 *  - **raw** {Boolean}, raw return all query documents as raw buffers (default false).
	 *  - **read** {Boolean}, read specify override of read from source (primary/secondary).
	 *  - **returnKey** {Boolean}, returnKey only return the index key.
	 *  - **maxScan** {Number}, maxScan limit the number of items to scan.
	 *  - **min** {Number}, min set index bounds.
	 *  - **max** {Number}, max set index bounds.
	 *  - **showDiskLoc** {Boolean}, showDiskLoc show disk location of results.
	 *  - **comment** {String}, comment you can put a $comment field on a query to make looking in the profiler logs simpler.
	 *  - **numberOfRetries** {Number}, numberOfRetries if using awaidata specifies the number of times to retry on timeout.
	 *  - **dbName** {String}, dbName override the default dbName.
	 *  - **tailableRetryInterval** {Number}, tailableRetryInterval specify the miliseconds between getMores on tailable cursor.
	 *  - **exhaust** {Boolean}, exhaust have the server send all the documents at once as getMore packets.
	 *  - **partial** {Boolean}, partial have the sharded system return a partial result from mongos.
	 *
	 * @class Represents a Cursor.
	 * @param {Db} db the database object to work with.
	 * @param {Collection} collection the collection to query.
	 * @param {Object} selector the query selector.
	 * @param {Object} fields an object containing what fields to include or exclude from objects returned.
	 * @param {Object} [options] additional options for the collection.
	*/
	function Cursor(db, collection, selector, fields, options) {
	  this.db = db;
	  this.collection = collection;
	  this.selector = selector;
	  this.fields = fields;
	  options = !options ? {} : options;

	  this.skipValue = options.skip == null ? 0 : options.skip;
	  this.limitValue = options.limit == null ? 0 : options.limit;
	  this.sortValue = options.sort;
	  this.hint = options.hint;
	  this.explainValue = options.explain;
	  this.snapshot = options.snapshot;
	  this.timeout = options.timeout == null ? true : options.timeout;
	  this.tailable = options.tailable;
	  this.awaitdata = options.awaitdata;
	  this.numberOfRetries = options.numberOfRetries == null ? 5 : options.numberOfRetries;
	  this.currentNumberOfRetries = this.numberOfRetries;
	  this.batchSizeValue = options.batchSize == null ? 0 : options.batchSize;
	  this.raw = options.raw == null ? false : options.raw;
	  this.read = options.read == null ? ReadPreference.PRIMARY : options.read;
	  this.returnKey = options.returnKey;
	  this.maxScan = options.maxScan;
	  this.min = options.min;
	  this.max = options.max;
	  this.showDiskLoc = options.showDiskLoc;
	  this.comment = options.comment;
	  this.tailableRetryInterval = options.tailableRetryInterval || 100;
	  this.exhaust = options.exhaust || false;
	  this.partial = options.partial || false;
	  this.slaveOk = options.slaveOk || false;

	  this.totalNumberOfRecords = 0;
	  this.items = [];
	  this.cursorId = Long.fromInt(0);

	  // This name
	  this.dbName = options.dbName;

	  // State variables for the cursor
	  this.state = Cursor.INIT;
	  // Keep track of the current query run
	  this.queryRun = false;
	  this.getMoreTimer = false;

	  // If we are using a specific db execute against it
	  if(this.dbName != null) {
	    this.collectionName = this.dbName + "." + this.collection.collectionName;
	  } else {
	    this.collectionName = (this.db.databaseName ? this.db.databaseName + "." : '') + this.collection.collectionName;
	  }
	};

	/**
	 * Resets this cursor to its initial state. All settings like the query string,
	 * tailable, batchSizeValue, skipValue and limits are preserved.
	 *
	 * @return {Cursor} returns itself with rewind applied.
	 * @api public
	 */
	Cursor.prototype.rewind = function() {
	  var self = this;

	  if (self.state != Cursor.INIT) {
	    if (self.state != Cursor.CLOSED) {
	      self.close(function() {});
	    }

	    self.numberOfReturned = 0;
	    self.totalNumberOfRecords = 0;
	    self.items = [];
	    self.cursorId = Long.fromInt(0);
	    self.state = Cursor.INIT;
	    self.queryRun = false;
	  }

	  return self;
	};


	/**
	 * Returns an array of documents. The caller is responsible for making sure that there
	 * is enough memory to store the results. Note that the array only contain partial
	 * results when this cursor had been previouly accessed. In that case,
	 * cursor.rewind() can be used to reset the cursor.
	 *
	 * @param {Function} callback This will be called after executing this method successfully. The first parameter will contain the Error object if an error occured, or null otherwise. The second parameter will contain an array of BSON deserialized objects as a result of the query.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.toArray = function(callback) {
	  var self = this;

	  if(!callback) {
	    throw new Error('callback is mandatory');
	  }

	  if(this.tailable) {
	    callback(new Error("Tailable cursor cannot be converted to array"), null);
	  } else if(this.state != Cursor.CLOSED) {
	    // return toArrayExhaust(self, callback);
	    // If we are using exhaust we can't use the quick fire method
	    if(self.exhaust) return toArrayExhaust(self, callback);
	    // Quick fire using trampoline to avoid nextTick
	    self.nextObject({noReturn: true}, function(err, result) {
	      if(err) return callback(utils.toError(err), null);
	      if(self.cursorId.toString() == "0") {
	        self.state = Cursor.CLOSED;
	        return callback(null, self.items);
	      }

	      // Let's issue getMores until we have no more records waiting
	      getAllByGetMore(self, function(err, done) {
	        self.state = Cursor.CLOSED;
	        if(err) return callback(utils.toError(err), null);
	        // Let's release the internal list
	        var items = self.items;        
	        self.items = null;
	        // Return all the items
	        callback(null, items);
	      });
	    })

	  } else {
	    callback(new Error("Cursor is closed"), null);
	  }
	}

	var toArrayExhaust = function(self, callback) {
	  var items = [];

	  self.each(function(err, item) {
	    if(err != null) {
	      return callback(utils.toError(err), null);
	    }

	    if(item != null && Array.isArray(items)) {
	      items.push(item);
	    } else {
	      var resultItems = items;
	      items = null;
	      self.items = [];
	      callback(null, resultItems);
	    }
	  });
	}

	var getAllByGetMore = function(self, callback) {
	  getMore(self, {noReturn: true}, function(err, result) {
	    if(err) return callback(utils.toError(err));
	    if(result == null) return callback(null, null);
	    if(self.cursorId.toString() == "0") return callback(null, null);
	    getAllByGetMore(self, callback);
	  })
	}

	/**
	 * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
	 * not all of the elements will be iterated if this cursor had been previouly accessed.
	 * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
	 * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
	 * at any given time if batch size is specified. Otherwise, the caller is responsible
	 * for making sure that the entire result can fit the memory.
	 *
	 * @param {Function} callback this will be called for while iterating every document of the query result. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the document.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.each = function(callback) {
	  var self = this;
	  var fn;

	  if (!callback) {
	    throw new Error('callback is mandatory');
	  }

	  if(this.state != Cursor.CLOSED) {
	    // If we are using exhaust we can't use the quick fire method
	    if(self.exhaust) return eachExhaust(self, callback);
	    // Quick fire using trampoline to avoid nextTick
	    if(this.items.length > 0) {
	      // Trampoline all the entries
	      while(fn = loop(self, callback)) fn(self, callback);
	      // Call each again
	      self.each(callback);
	    } else {
	      self.nextObject(function(err, item) {

	        if(err) {
	          self.state = Cursor.CLOSED;
	          return callback(utils.toError(err), item);
	        }

	        if(item == null) return callback(null, null);
	        callback(null, item);
	        self.each(callback);
	      })
	    }
	  } else {
	    callback(new Error("Cursor is closed"), null);
	  }
	}

	// Special for exhaust command as we don't initiate the actual result sets
	// the server just sends them as they arrive meaning we need to get the IO event
	// loop happen so we can receive more data from the socket or we return to early
	// after the first fetch and loose all the incoming getMore's automatically issued
	// from the server.
	var eachExhaust = function(self, callback) {
	  //FIX: stack overflow (on deep callback) (cred: https://github.com/limp/node-mongodb-native/commit/27da7e4b2af02035847f262b29837a94bbbf6ce2)
	  processor(function(){
	    // Fetch the next object until there is no more objects
	    self.nextObject(function(err, item) {
	      if(err != null) return callback(err, null);
	      if(item != null) {
	        callback(null, item);
	        eachExhaust(self, callback);
	      } else {
	        // Close the cursor if done
	        self.state = Cursor.CLOSED;
	        callback(err, null);
	      }
	    });
	  });  
	}

	// Trampoline emptying the number of retrieved items
	// without incurring a nextTick operation
	var loop = function(self, callback) {
	  // No more items we are done
	  if(self.items.length == 0) return;
	  // Get the next document
	  var doc = self.items.shift();
	  // Callback
	  callback(null, doc);
	  // Loop
	  return loop;
	}

	/**
	 * Determines how many result the query for this cursor will return
	 *
	 * @param {Boolean} applySkipLimit if set to true will apply the skip and limits set on the cursor. Defaults to false.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the number of results or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.count = function(applySkipLimit, callback) {
	  if(typeof applySkipLimit == 'function') {
	    callback = applySkipLimit;
	    applySkipLimit = false;
	  }

	  var options = {};
	  if(applySkipLimit) {
	    if(typeof this.skipValue == 'number') options.skip = this.skipValue;
	    if(typeof this.limitValue == 'number') options.limit = this.limitValue;    
	  }

	  // Call count command
	  this.collection.count(this.selector, options, callback);
	};

	/**
	 * Sets the sort parameter of this cursor to the given value.
	 *
	 * This method has the following method signatures:
	 * (keyOrList, callback)
	 * (keyOrList, direction, callback)
	 *
	 * @param {String|Array|Object} keyOrList This can be a string or an array. If passed as a string, the string will be the field to sort. If passed an array, each element will represent a field to be sorted and should be an array that contains the format [string, direction].
	 * @param {String|Number} direction this determines how the results are sorted. "asc", "ascending" or 1 for asceding order while "desc", "desceding or -1 for descending order. Note that the strings are case insensitive.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.sort = function(keyOrList, direction, callback) {
	  callback = callback || function(){};
	  if(typeof direction === "function") { callback = direction; direction = null; }

	  if(this.tailable) {
	    callback(new Error("Tailable cursor doesn't support sorting"), null);
	  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    callback(new Error("Cursor is closed"), null);
	  } else {
	    var order = keyOrList;

	    if(direction != null) {
	      order = [[keyOrList, direction]];
	    }

	    this.sortValue = order;
	    callback(null, this);
	  }
	  return this;
	};

	/**
	 * Sets the limit parameter of this cursor to the given value.
	 *
	 * @param {Number} limit the new limit.
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the limit given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.limit = function(limit, callback) {
	  if(this.tailable) {
	    if(callback) {
	      callback(new Error("Tailable cursor doesn't support limit"), null);
	    } else {
	      throw new Error("Tailable cursor doesn't support limit");
	    }
	  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    if(callback) {
	      callback(new Error("Cursor is closed"), null);
	    } else {
	      throw new Error("Cursor is closed");
	    }
	  } else {
	    if(limit != null && limit.constructor != Number) {
	      if(callback) {
	        callback(new Error("limit requires an integer"), null);
	      } else {
	        throw new Error("limit requires an integer");
	      }
	    } else {
	      this.limitValue = limit;
	      if(callback) return callback(null, this);
	    }
	  }

	  return this;
	};

	/**
	 * Sets the read preference for the cursor
	 *
	 * @param {String} the read preference for the cursor, one of Server.READ_PRIMARY, Server.READ_SECONDARY, Server.READ_SECONDARY_ONLY
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the read preference given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.setReadPreference = function(readPreference, tags, callback) {
	  if(typeof tags == 'function') callback = tags;

	  var _mode = readPreference != null && typeof readPreference == 'object' ? readPreference.mode : readPreference;

	  if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    if(callback == null) throw new Error("Cannot change read preference on executed query or closed cursor");
	    callback(new Error("Cannot change read preference on executed query or closed cursor"));
	  } else if(_mode != null && _mode != 'primary'
	    && _mode != 'secondaryOnly' && _mode != 'secondary' 
	    && _mode != 'nearest' && _mode != 'primaryPreferred' && _mode != 'secondaryPreferred') {
	      if(callback == null) throw new Error("only readPreference of primary, secondary, secondaryPreferred, primaryPreferred or nearest supported");
	      callback(new Error("only readPreference of primary, secondary, secondaryPreferred, primaryPreferred or nearest supported"));
	  } else {
	    this.read = readPreference;
	    if(callback != null) callback(null, this);
	  }

	  return this;
	}

	/**
	 * Sets the skip parameter of this cursor to the given value.
	 *
	 * @param {Number} skip the new skip value.
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the skip value given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.skip = function(skip, callback) {
	  callback = callback || function(){};

	  if(this.tailable) {
	    callback(new Error("Tailable cursor doesn't support skip"), null);
	  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    callback(new Error("Cursor is closed"), null);
	  } else {
	    if(skip != null && skip.constructor != Number) {
	      callback(new Error("skip requires an integer"), null);
	    } else {
	      this.skipValue = skip;
	      callback(null, this);
	    }
	  }

	  return this;
	};

	/**
	 * Sets the batch size parameter of this cursor to the given value.
	 *
	 * @param {Number} batchSize the new batch size.
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the batchSize given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.batchSize = function(batchSize, callback) {
	  if(this.state == Cursor.CLOSED) {
	    if(callback != null) {
	      return callback(new Error("Cursor is closed"), null);
	    } else {
	      throw new Error("Cursor is closed");
	    }
	  } else if(batchSize != null && batchSize.constructor != Number) {
	    if(callback != null) {
	      return callback(new Error("batchSize requires an integer"), null);
	    } else {
	      throw new Error("batchSize requires an integer");
	    }
	  } else {
	    this.batchSizeValue = batchSize;
	    if(callback != null) return callback(null, this);
	  }

	  return this;
	};

	/**
	 * The limit used for the getMore command
	 *
	 * @return {Number} The number of records to request per batch.
	 * @ignore
	 * @api private
	 */
	var limitRequest = function(self) {
	  var requestedLimit = self.limitValue;
	  var absLimitValue = Math.abs(self.limitValue);
	  var absBatchValue = Math.abs(self.batchSizeValue);

	  if(absLimitValue > 0) {
	    if (absBatchValue > 0) {
	      requestedLimit = Math.min(absLimitValue, absBatchValue);
	    }
	  } else {
	    requestedLimit = self.batchSizeValue;
	  }

	  return requestedLimit;
	};


	/**
	 * Generates a QueryCommand object using the parameters of this cursor.
	 *
	 * @return {QueryCommand} The command object
	 * @ignore
	 * @api private
	 */
	var generateQueryCommand = function(self) {
	  // Unpack the options
	  var queryOptions = QueryCommand.OPTS_NONE;
	  if(!self.timeout) {
	    queryOptions |= QueryCommand.OPTS_NO_CURSOR_TIMEOUT;
	  }

	  if(self.tailable != null) {
	    queryOptions |= QueryCommand.OPTS_TAILABLE_CURSOR;
	    self.skipValue = self.limitValue = 0;

	    // if awaitdata is set
	    if(self.awaitdata != null) {
	      queryOptions |= QueryCommand.OPTS_AWAIT_DATA;
	    }
	  }

	  if(self.exhaust) {
	    queryOptions |= QueryCommand.OPTS_EXHAUST;
	  }

	  // Unpack the read preference to set slave ok correctly
	  var read = self.read instanceof ReadPreference ? self.read.mode : self.read;

	  // if(self.read == 'secondary')
	  if(read == ReadPreference.PRIMARY_PREFERRED
	    || read == ReadPreference.SECONDARY
	    || read == ReadPreference.SECONDARY_PREFERRED
	    || read == ReadPreference.NEAREST) {
	      queryOptions |= QueryCommand.OPTS_SLAVE;
	  }

	  // Override slaveOk from the user
	  if(self.slaveOk) {
	    queryOptions |= QueryCommand.OPTS_SLAVE;
	  }

	  if(self.partial) {
	    queryOptions |= QueryCommand.OPTS_PARTIAL;
	  }

	  // limitValue of -1 is a special case used by Db#eval
	  var numberToReturn = self.limitValue == -1 ? -1 : limitRequest(self);

	  // Check if we need a special selector
	  if(self.sortValue != null || self.explainValue != null || self.hint != null || self.snapshot != null
	      || self.returnKey != null || self.maxScan != null || self.min != null || self.max != null
	      || self.showDiskLoc != null || self.comment != null) {

	    // Build special selector
	    var specialSelector = {'$query':self.selector};
	    if(self.sortValue != null) specialSelector['orderby'] = utils.formattedOrderClause(self.sortValue);
	    if(self.hint != null && self.hint.constructor == Object) specialSelector['$hint'] = self.hint;
	    if(self.snapshot != null) specialSelector['$snapshot'] = true;
	    if(self.returnKey != null) specialSelector['$returnKey'] = self.returnKey;
	    if(self.maxScan != null) specialSelector['$maxScan'] = self.maxScan;
	    if(self.min != null) specialSelector['$min'] = self.min;
	    if(self.max != null) specialSelector['$max'] = self.max;
	    if(self.showDiskLoc != null) specialSelector['$showDiskLoc'] = self.showDiskLoc;
	    if(self.comment != null) specialSelector['$comment'] = self.comment;
	    // If we have explain set only return a single document with automatic cursor close
	    if(self.explainValue != null) {
	      numberToReturn = (-1)*Math.abs(numberToReturn);
	      specialSelector['$explain'] = true;
	    }

	    // Return the query
	    return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, specialSelector, self.fields);
	  } else {
	    return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, self.selector, self.fields);
	  }
	};

	/**
	 * @return {Object} Returns an object containing the sort value of this cursor with
	 *     the proper formatting that can be used internally in this cursor.
	 * @ignore
	 * @api private
	 */
	Cursor.prototype.formattedOrderClause = function() {
	  return utils.formattedOrderClause(this.sortValue);
	};

	/**
	 * Converts the value of the sort direction into its equivalent numerical value.
	 *
	 * @param sortDirection {String|number} Range of acceptable values:
	 *     'ascending', 'descending', 'asc', 'desc', 1, -1
	 *
	 * @return {number} The equivalent numerical value
	 * @throws Error if the given sortDirection is invalid
	 * @ignore
	 * @api private
	 */
	Cursor.prototype.formatSortValue = function(sortDirection) {
	  return utils.formatSortValue(sortDirection);
	};

	/**
	 * Gets the next document from the cursor.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object on error while the second parameter will contain a document from the returned result or null if there are no more results.
	 * @api public
	 */
	Cursor.prototype.nextObject = function(options, callback) {
	  var self = this;

	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  if(self.state == Cursor.INIT) {
	    var cmd;
	    try {
	      cmd = generateQueryCommand(self);
	    } catch (err) {
	      return callback(err, null);
	    }

	    var queryOptions = {exhaust: self.exhaust, raw:self.raw, read:self.read, connection:self.connection};
	    // Execute command
	    var commandHandler = function(err, result) {
	      // If on reconnect, the command got given a different connection, switch
	      // the whole cursor to it.
	      self.connection = queryOptions.connection;
	      self.state = Cursor.OPEN;
	      if(err != null && result == null) return callback(utils.toError(err), null);

	      if(err == null && (result == null || result.documents == null || !Array.isArray(result.documents))) {
	        return self.close(function() {callback(new Error("command failed to return results"), null);});
	      }

	      if(err == null && result && result.documents[0] && result.documents[0]['$err']) {
	        return self.close(function() {callback(utils.toError(result.documents[0]['$err']), null);});
	      }

	      self.queryRun = true;
	      self.state = Cursor.OPEN; // Adjust the state of the cursor
	      self.cursorId = result.cursorId;
	      self.totalNumberOfRecords = result.numberReturned;

	      // Add the new documents to the list of items, using forloop to avoid
	      // new array allocations and copying
	      for(var i = 0; i < result.documents.length; i++) {
	        self.items.push(result.documents[i]);
	      }

	      // If we have noReturn set just return (not modifying the internal item list)
	      // used for toArray
	      if(options.noReturn) {
	        return callback(null, true);
	      }

	      // Ignore callbacks until the cursor is dead for exhausted
	      if(self.exhaust && result.cursorId.toString() == "0") {
	        self.nextObject(callback);
	      } else if(self.exhaust == false || self.exhaust == null) {
	        self.nextObject(callback);
	      }
	    };

	    // If we have no connection set on this cursor check one out
	    if(self.connection == null) {
	      try {
	        self.connection = self.db.serverConfig.checkoutReader(this.read);
	        // Add to the query options
	        queryOptions.connection = self.connection;
	      } catch(err) {
	        return callback(utils.toError(err), null);
	      }
	    }

	    // Execute the command
	    self.db._executeQueryCommand(cmd, queryOptions, commandHandler);
	    // Set the command handler to null
	    commandHandler = null;
	  } else if(self.items.length) {
	    callback(null, self.items.shift());
	  } else if(self.cursorId.greaterThan(Long.fromInt(0))) {
	    getMore(self, callback);
	  } else {
	    // Force cursor to stay open
	    return self.close(function() {callback(null, null);});
	  }
	}

	/**
	 * Gets more results from the database if any.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object on error while the second parameter will contain a document from the returned result or null if there are no more results.
	 * @ignore
	 * @api private
	 */
	var getMore = function(self, options, callback) {
	  var limit = 0;

	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  if(self.state == Cursor.GET_MORE) return callback(null, null);

	  // Set get more in progress
	  self.state = Cursor.GET_MORE;

	  // Set options
	  if (!self.tailable && self.limitValue > 0) {
	    limit = self.limitValue - self.totalNumberOfRecords;
	    if (limit < 1) {
	      self.close(function() {callback(null, null);});
	      return;
	    }
	  }

	  try {
	    var getMoreCommand = new GetMoreCommand(
	        self.db
	      , self.collectionName
	      , limitRequest(self)
	      , self.cursorId
	    );

	    // Set up options
	    var command_options = {read: self.read, raw: self.raw, connection:self.connection };

	    // Execute the command
	    self.db._executeQueryCommand(getMoreCommand, command_options, function(err, result) {
	      var cbValue;

	      // Get more done
	      self.state = Cursor.OPEN;

	      if(err != null) {
	        self.state = Cursor.CLOSED;
	        return callback(utils.toError(err), null);
	      }

	      // Ensure we get a valid result
	      if(!result || !result.documents) {
	        self.state = Cursor.CLOSED;
	        return callback(utils.toError("command failed to return results"), null)
	      }

	      // If the QueryFailure flag is set
	      if((result.responseFlag & (1 << 1)) != 0) {
	        self.state = Cursor.CLOSED;
	        return callback(utils.toError("QueryFailure flag set on getmore command"), null);
	      }

	      try {
	        var isDead = 1 === result.responseFlag && result.cursorId.isZero();

	        self.cursorId = result.cursorId;
	        self.totalNumberOfRecords += result.numberReturned;

	        // Determine if there's more documents to fetch
	        if(result.numberReturned > 0) {
	          if (self.limitValue > 0) {
	            var excessResult = self.totalNumberOfRecords - self.limitValue;

	            if (excessResult > 0) {
	              result.documents.splice(-1 * excessResult, excessResult);
	            }
	          }

	          // Reset the tries for awaitdata if we are using it
	          self.currentNumberOfRetries = self.numberOfRetries;
	          // Get the documents
	          for(var i = 0; i < result.documents.length; i++) {
	            self.items.push(result.documents[i]);
	          }

	          // Don's shift a document out as we need it for toArray
	          if(options.noReturn) {
	            cbValue = true;
	          } else {
	            cbValue = self.items.shift();
	          }          
	        } else if(self.tailable && !isDead && self.awaitdata) {
	          // Excute the tailable cursor once more, will timeout after ~4 sec if awaitdata used
	          self.currentNumberOfRetries = self.currentNumberOfRetries - 1;
	          if(self.currentNumberOfRetries == 0) {
	            self.close(function() {
	              callback(new Error("tailable cursor timed out"), null);
	            });
	          } else {
	            getMore(self, callback);
	          }
	        } else if(self.tailable && !isDead) {
	          self.getMoreTimer = setTimeout(function() { getMore(self, callback); }, self.tailableRetryInterval);
	        } else {
	          self.close(function() {callback(null, null); });
	        }

	        result = null;
	      } catch(err) {
	        callback(utils.toError(err), null);
	      }
	      if (cbValue != null) callback(null, cbValue);
	    });

	    getMoreCommand = null;
	  } catch(err) {
	    // Get more done
	    self.state = Cursor.OPEN;

	    var handleClose = function() {
	      callback(utils.toError(err), null);
	    };

	    self.close(handleClose);
	    handleClose = null;
	  }
	}

	/**
	 * Gets a detailed information about how the query is performed on this cursor and how
	 * long it took the database to process it.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will always be null while the second parameter will be an object containing the details.
	 * @api public
	 */
	Cursor.prototype.explain = function(callback) {
	  var limit = (-1)*Math.abs(this.limitValue);

	  // Create a new cursor and fetch the plan
	  var cursor = new Cursor(this.db, this.collection, this.selector, this.fields, {
	      skip: this.skipValue
	    , limit:limit
	    , sort: this.sortValue
	    , hint: this.hint
	    , explain: true
	    , snapshot: this.snapshot
	    , timeout: this.timeout
	    , tailable: this.tailable
	    , batchSize: this.batchSizeValue
	    , slaveOk: this.slaveOk
	    , raw: this.raw
	    , read: this.read
	    , returnKey: this.returnKey
	    , maxScan: this.maxScan
	    , min: this.min
	    , max: this.max
	    , showDiskLoc: this.showDiskLoc
	    , comment: this.comment
	    , awaitdata: this.awaitdata
	    , numberOfRetries: this.numberOfRetries
	    , dbName: this.dbName
	  });
	  
	  // Fetch the explaination document
	  cursor.nextObject(function(err, item) {
	    if(err != null) return callback(utils.toError(err), null);
	    // close the cursor
	    cursor.close(function(err, result) {
	      if(err != null) return callback(utils.toError(err), null);
	      callback(null, item);
	    });
	  });
	};

	/**
	 * Returns a Node ReadStream interface for this cursor.
	 *
	 * Options
	 *  - **transform** {Function} function of type function(object) { return transformed }, allows for transformation of data before emitting.
	 *
	 * @return {CursorStream} returns a stream object.
	 * @api public
	 */
	Cursor.prototype.stream = function stream(options) {
	  return new CursorStream(this, options);
	}

	/**
	 * Close the cursor.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will always contain null while the second parameter will contain a reference to this cursor.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.close = function(callback) {
	  var self = this
	  this.getMoreTimer && clearTimeout(this.getMoreTimer);
	  // Close the cursor if not needed
	  if(this.cursorId instanceof Long && this.cursorId.greaterThan(Long.fromInt(0))) {
	    try {
	      var command = new KillCursorCommand(this.db, [this.cursorId]);
	      // Added an empty callback to ensure we don't throw any null exceptions
	      this.db._executeQueryCommand(command, {read:self.read, raw:self.raw, connection:self.connection});
	    } catch(err) {}
	  }

	  // Null out the connection
	  self.connection = null;
	  // Reset cursor id
	  this.cursorId = Long.fromInt(0);
	  // Set to closed status
	  this.state = Cursor.CLOSED;

	  if(callback) {
	    callback(null, self);
	    self.items = [];
	  }

	  return this;
	};

	/**
	 * Check if the cursor is closed or open.
	 *
	 * @return {Boolean} returns the state of the cursor.
	 * @api public
	 */
	Cursor.prototype.isClosed = function() {
	  return this.state == Cursor.CLOSED ? true : false;
	};

	/**
	 * Init state
	 *
	 * @classconstant INIT
	 **/
	Cursor.INIT = 0;

	/**
	 * Cursor open
	 *
	 * @classconstant OPEN
	 **/
	Cursor.OPEN = 1;

	/**
	 * Cursor closed
	 *
	 * @classconstant CLOSED
	 **/
	Cursor.CLOSED = 2;

	/**
	 * Cursor performing a get more
	 *
	 * @classconstant OPEN
	 **/
	Cursor.GET_MORE = 3;

	/**
	 * @ignore
	 * @api private
	 */
	exports.Cursor =  Cursor;


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(283).BaseCommand,
	  inherits = __webpack_require__(267).inherits,
	  binaryutils = __webpack_require__(288);

	/**
	  Get More Document Command
	**/
	var GetMoreCommand = exports.GetMoreCommand = function(db, collectionName, numberToReturn, cursorId) {
	  BaseCommand.call(this);

	  this.collectionName = collectionName;
	  this.numberToReturn = numberToReturn;
	  this.cursorId = cursorId;
	  this.db = db;
	};

	inherits(GetMoreCommand, BaseCommand);

	GetMoreCommand.OP_GET_MORE = 2005;

	GetMoreCommand.prototype.toBinary = function() {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }

	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 8 + (4 * 4);
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index++] = totalLengthOfCommand & 0xff;
	  _command[_index++] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index++] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index++] = (totalLengthOfCommand >> 24) & 0xff;     

	  // Write the request ID
	  _command[_index++] = this.requestId & 0xff;
	  _command[_index++] = (this.requestId >> 8) & 0xff;
	  _command[_index++] = (this.requestId >> 16) & 0xff;
	  _command[_index++] = (this.requestId >> 24) & 0xff;     

	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;

	  // Write the op_code for the command
	  _command[_index++] = GetMoreCommand.OP_GET_MORE & 0xff;
	  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 8) & 0xff;
	  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 16) & 0xff;
	  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 24) & 0xff;     

	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;

	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;    

	  // Number of documents to return
	  _command[_index++] = this.numberToReturn & 0xff;
	  _command[_index++] = (this.numberToReturn >> 8) & 0xff;
	  _command[_index++] = (this.numberToReturn >> 16) & 0xff;
	  _command[_index++] = (this.numberToReturn >> 24) & 0xff;     
	  
	  // Encode the cursor id
	  var low_bits = this.cursorId.getLowBits();
	  // Encode low bits
	  _command[_index++] = low_bits & 0xff;
	  _command[_index++] = (low_bits >> 8) & 0xff;
	  _command[_index++] = (low_bits >> 16) & 0xff;
	  _command[_index++] = (low_bits >> 24) & 0xff;     
	  
	  var high_bits = this.cursorId.getHighBits();
	  // Encode high bits
	  _command[_index++] = high_bits & 0xff;
	  _command[_index++] = (high_bits >> 8) & 0xff;
	  _command[_index++] = (high_bits >> 16) & 0xff;
	  _command[_index++] = (high_bits >> 24) & 0xff;     
	  // Return command
	  return _command;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(283).BaseCommand,
	  inherits = __webpack_require__(267).inherits,
	  binaryutils = __webpack_require__(288);

	/**
	  Insert Document Command
	**/
	var KillCursorCommand = exports.KillCursorCommand = function(db, cursorIds) {
	  BaseCommand.call(this);

	  this.cursorIds = cursorIds;
	  this.db = db;
	};

	inherits(KillCursorCommand, BaseCommand);

	KillCursorCommand.OP_KILL_CURSORS = 2007;

	/*
	struct {
	    MsgHeader header;                 // standard message header
	    int32     ZERO;                   // 0 - reserved for future use
	    int32     numberOfCursorIDs;      // number of cursorIDs in message
	    int64[]   cursorIDs;                // array of cursorIDs to close
	}
	*/
	KillCursorCommand.prototype.toBinary = function() {
	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + 4 + (4 * 4) + (this.cursorIds.length * 8);
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;     
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (KillCursorCommand.OP_KILL_CURSORS >> 24) & 0xff;     
	  _command[_index + 2] = (KillCursorCommand.OP_KILL_CURSORS >> 16) & 0xff;
	  _command[_index + 1] = (KillCursorCommand.OP_KILL_CURSORS >> 8) & 0xff;
	  _command[_index] = KillCursorCommand.OP_KILL_CURSORS & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;

	  // Number of cursors to kill
	  var numberOfCursors = this.cursorIds.length;
	  _command[_index + 3] = (numberOfCursors >> 24) & 0xff;     
	  _command[_index + 2] = (numberOfCursors >> 16) & 0xff;
	  _command[_index + 1] = (numberOfCursors >> 8) & 0xff;
	  _command[_index] = numberOfCursors & 0xff;
	  // Adjust index
	  _index = _index + 4;

	  // Encode all the cursors
	  for(var i = 0; i < this.cursorIds.length; i++) {
	    // Encode the cursor id
	    var low_bits = this.cursorIds[i].getLowBits();
	    // Encode low bits
	    _command[_index + 3] = (low_bits >> 24) & 0xff;     
	    _command[_index + 2] = (low_bits >> 16) & 0xff;
	    _command[_index + 1] = (low_bits >> 8) & 0xff;
	    _command[_index] = low_bits & 0xff;
	    // Adjust index
	    _index = _index + 4;
	      
	    var high_bits = this.cursorIds[i].getHighBits();
	    // Encode high bits
	    _command[_index + 3] = (high_bits >> 24) & 0xff;     
	    _command[_index + 2] = (high_bits >> 16) & 0xff;
	    _command[_index + 1] = (high_bits >> 8) & 0xff;
	    _command[_index] = high_bits & 0xff;
	    // Adjust index
	    _index = _index + 4;
	  }
	  
	  return _command;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 308 */
/***/ function(module, exports) {

	/**
	 * A class representation of the Read Preference.
	 *
	 * Read Preferences
	 *  - **ReadPreference.PRIMARY**, Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).
	 *  - **ReadPreference.PRIMARY_PREFERRED**, Read from primary if available, otherwise a secondary.
	 *  - **ReadPreference.SECONDARY**, Read from secondary if available, otherwise error.
	 *  - **ReadPreference.SECONDARY_PREFERRED**, Read from a secondary if available, otherwise read from the primary.
	 *  - **ReadPreference.NEAREST**, All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.
	 *
	 * @class Represents a Read Preference.
	 * @param {String} the read preference type
	 * @param {Object} tags
	 * @return {ReadPreference}
	 */
	var ReadPreference = function(mode, tags) {
	  if(!(this instanceof ReadPreference))
	    return new ReadPreference(mode, tags);
	  this._type = 'ReadPreference';
	  this.mode = mode;
	  this.tags = tags;
	}

	/**
	 * @ignore
	 */
	ReadPreference.isValid = function(_mode) {
	  return (_mode == ReadPreference.PRIMARY || _mode == ReadPreference.PRIMARY_PREFERRED
	    || _mode == ReadPreference.SECONDARY || _mode == ReadPreference.SECONDARY_PREFERRED
	    || _mode == ReadPreference.NEAREST
	    || _mode == true || _mode == false);
	}

	/**
	 * @ignore
	 */
	ReadPreference.prototype.isValid = function(mode) {
	  var _mode = typeof mode == 'string' ? mode : this.mode;
	  return ReadPreference.isValid(_mode);
	}

	/**
	 * @ignore
	 */
	ReadPreference.prototype.toObject = function() {
	  var object = {mode:this.mode};

	  if(this.tags != null) {
	    object['tags'] = this.tags;
	  }

	  return object;
	}

	/**
	 * @ignore
	 */
	ReadPreference.PRIMARY = 'primary';
	ReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';
	ReadPreference.SECONDARY = 'secondary';
	ReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';
	ReadPreference.NEAREST = 'nearest'

	/**
	 * @ignore
	 */
	exports.ReadPreference  = ReadPreference;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var timers = __webpack_require__(289);

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	 * Module dependecies.
	 */
	var Stream = __webpack_require__(310).Stream;

	/**
	 * CursorStream
	 *
	 * Returns a stream interface for the **cursor**.
	 *
	 * Options
	 *  - **transform** {Function} function of type function(object) { return transformed }, allows for transformation of data before emitting.
	 *
	 * Events
	 *  - **data** {function(item) {}} the data event triggers when a document is ready.
	 *  - **error** {function(err) {}} the error event triggers if an error happens.
	 *  - **close** {function() {}} the end event triggers when there is no more documents available.
	 *
	 * @class Represents a CursorStream.
	 * @param {Cursor} cursor a cursor object that the stream wraps.
	 * @return {Stream}
	 */
	function CursorStream(cursor, options) {
	  if(!(this instanceof CursorStream)) return new CursorStream(cursor);
	  options = options ? options : {};

	  Stream.call(this);

	  this.readable = true;
	  this.paused = false;
	  this._cursor = cursor;
	  this._destroyed = null;
	  this.options = options;

	  // give time to hook up events
	  var self = this;
	  process.nextTick(function() {
	    self._init();      
	  });
	}

	/**
	 * Inherit from Stream
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype.__proto__ = Stream.prototype;

	/**
	 * Flag stating whether or not this stream is readable.
	 */
	CursorStream.prototype.readable;

	/**
	 * Flag stating whether or not this stream is paused.
	 */
	CursorStream.prototype.paused;

	/**
	 * Initialize the cursor.
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype._init = function () {
	  if (this._destroyed) return;
	  this._next();
	}

	/**
	 * Pull the next document from the cursor.
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype._next = function () {
	  if(this.paused || this._destroyed) return;

	  var self = this;
	  // Get the next object
	  processor(function() {
	    if(self.paused || self._destroyed) return;

	    self._cursor.nextObject(function (err, doc) {
	      self._onNextObject(err, doc);
	    });    
	  });
	}

	/**
	 * Handle each document as its returned from the cursor.
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype._onNextObject = function (err, doc) {
	  if(err) return this.destroy(err);

	  // when doc is null we hit the end of the cursor
	  if(!doc && (this._cursor.state == 1 || this._cursor.state == 2)) {
	    this.emit('end')
	    return this.destroy();
	  } else if(doc) {
	    var data = typeof this.options.transform == 'function' ? this.options.transform(doc) : doc;
	    this.emit('data', data);
	    this._next();
	  }
	}

	/**
	 * Pauses the stream.
	 *
	 * @api public
	 */
	CursorStream.prototype.pause = function () {
	  this.paused = true;
	}

	/**
	 * Resumes the stream.
	 *
	 * @api public
	 */
	CursorStream.prototype.resume = function () {
	  var self = this;

	  // Don't do anything if we are not paused
	  if(!this.paused) return;
	  if(!this._cursor.state == 3) return;

	  process.nextTick(function() {
	    self.paused = false;
	    // Only trigger more fetching if the cursor is open
	    self._next();
	  })
	}

	/**
	 * Destroys the stream, closing the underlying
	 * cursor. No more events will be emitted.
	 *
	 * @api public
	 */
	CursorStream.prototype.destroy = function (err) {
	  if (this._destroyed) return;
	  this._destroyed = true;
	  this.readable = false;

	  this._cursor.close();

	  if(err) {
	    this.emit('error', err);
	  }

	  this.emit('close');
	}

	// TODO - maybe implement the raw option to pass binary?
	//CursorStream.prototype.setEncoding = function () {
	//}

	module.exports = exports = CursorStream;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(311).EventEmitter;
	var inherits = __webpack_require__(312);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(313);
	Stream.Writable = __webpack_require__(324);
	Stream.Duplex = __webpack_require__(325);
	Stream.Transform = __webpack_require__(326);
	Stream.PassThrough = __webpack_require__(327);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 311 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 312 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(314);
	exports.Stream = __webpack_require__(310);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(320);
	exports.Duplex = __webpack_require__(319);
	exports.Transform = __webpack_require__(322);
	exports.PassThrough = __webpack_require__(323);


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(315);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(258).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(311).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(310);

	/*<replacement>*/
	var util = __webpack_require__(316);
	util.inherits = __webpack_require__(317);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(318);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(319);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(321).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(319);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(321).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 315 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 317 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 318 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(316);
	util.inherits = __webpack_require__(317);
	/*</replacement>*/

	var Readable = __webpack_require__(314);
	var Writable = __webpack_require__(320);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(258).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(316);
	util.inherits = __webpack_require__(317);
	/*</replacement>*/

	var Stream = __webpack_require__(310);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(319);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(319);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(258).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(319);

	/*<replacement>*/
	var util = __webpack_require__(316);
	util.inherits = __webpack_require__(317);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(322);

	/*<replacement>*/
	var util = __webpack_require__(316);
	util.inherits = __webpack_require__(317);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(320)


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(319)


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(322)


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(323)


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(287).DbCommand
	  , utils = __webpack_require__(288);

	var authenticate = function(db, username, password, authdb, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;

	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }

	  // Execute all four
	  db._executeQueryCommand(DbCommand.createGetNonceCommand(db), options, function(err, result, connection) {
	    // Execute on all the connections
	    if(err == null) {
	      // Nonce used to make authentication request with md5 hash
	      var nonce = result.documents[0].nonce;
	      // Execute command
	      db._executeQueryCommand(DbCommand.createAuthenticationCommand(db, username, password, nonce, authdb), {connection:connection}, function(err, result) {
	        // Count down
	        numberOfConnections = numberOfConnections - 1;
	        // Ensure we save any error
	        if(err) {
	          errorObject = err;
	        } else if(result 
	          && Array.isArray(result.documents) 
	          && result.documents.length > 0 
	          && (result.documents[0].err != null || result.documents[0].errmsg != null)) {
	            errorObject = utils.toError(result.documents[0]);
	        }

	        // Work around the case where the number of connections are 0
	        if(numberOfConnections <= 0 && typeof callback == 'function') {
	          var internalCallback = callback;
	          callback = null;

	          if(errorObject == null
	              && result && Array.isArray(result.documents) && result.documents.length > 0
	              && result.documents[0].ok == 1) {            // We authenticated correctly save the credentials
	            db.serverConfig.auth.add('MONGODB-CR', db.databaseName, username, password, authdb);
	            // Return callback
	            internalCallback(errorObject, true);
	          } else {
	            internalCallback(errorObject, false);
	          }
	        }
	      });
	    }
	  });  
	}

	exports.authenticate = authenticate;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(287).DbCommand
	  , utils = __webpack_require__(288)
	  , format = __webpack_require__(267).format;

	// Kerberos class
	var Kerberos = null;
	var MongoAuthProcess = null;
	// Try to grab the Kerberos class
	try {
	  Kerberos = __webpack_require__(330).Kerberos
	  // Authentication process for Mongo
	  MongoAuthProcess = __webpack_require__(330).processes.MongoAuthProcess
	} catch(err) {}

	var authenticate = function(db, username, password, authdb, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;  
	  // We don't have the Kerberos library
	  if(Kerberos == null) return callback(new Error("Kerberos library is not installed"));  

	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }

	  // Grab all the connections
	  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections();
	  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';
	  var error = null;
	  // Authenticate all connections
	  for(var i = 0; i < numberOfConnections; i++) {

	    // Start Auth process for a connection
	    GSSAPIInitialize(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result) {
	      // Adjust number of connections left to connect
	      numberOfConnections = numberOfConnections - 1;
	      // If we have an error save it
	      if(err) error = err;

	      // We are done
	      if(numberOfConnections == 0) {
	        if(err) return callback(error, false);
	        // We authenticated correctly save the credentials
	        db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);
	        // Return valid callback
	        return callback(null, true);
	      }
	    });    
	  }
	}

	//
	// Initialize step
	var GSSAPIInitialize = function(db, username, password, authdb, gssapiServiceName, connection, callback) {
	  // Create authenticator
	  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, gssapiServiceName);

	  // Perform initialization
	  mongo_auth_process.init(username, password, function(err, context) {
	    if(err) return callback(err, false);

	    // Perform the first step
	    mongo_auth_process.transition('', function(err, payload) {
	      if(err) return callback(err, false);

	      // Call the next db step
	      MongoDBGSSAPIFirstStep(mongo_auth_process, payload, db, username, password, authdb, connection, callback);
	    });
	  });
	}

	//
	// Perform first step against mongodb
	var MongoDBGSSAPIFirstStep = function(mongo_auth_process, payload, db, username, password, authdb, connection, callback) {
	  // Build the sasl start command
	  var command = {
	      saslStart: 1
	    , mechanism: 'GSSAPI'
	    , payload: payload
	    , autoAuthorize: 1
	  };

	  // Execute first sasl step
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err, false);
	    // Get the payload
	    doc = doc.documents[0];
	    var db_payload = doc.payload;

	    mongo_auth_process.transition(doc.payload, function(err, payload) {
	      if(err) return callback(err, false);

	      // MongoDB API Second Step
	      MongoDBGSSAPISecondStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);
	    });
	  });
	}

	//
	// Perform first step against mongodb
	var MongoDBGSSAPISecondStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {
	  // Build Authentication command to send to MongoDB
	  var command = {
	      saslContinue: 1
	    , conversationId: doc.conversationId
	    , payload: payload
	  };

	  // Execute the command
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err, false);

	    // Get the result document
	    doc = doc.documents[0];

	    // Call next transition for kerberos
	    mongo_auth_process.transition(doc.payload, function(err, payload) {
	      if(err) return callback(err, false);

	      // Call the last and third step
	      MongoDBGSSAPIThirdStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);
	    });    
	  });
	}

	var MongoDBGSSAPIThirdStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {
	  // Build final command
	  var command = {
	      saslContinue: 1
	    , conversationId: doc.conversationId
	    , payload: payload
	  };

	  // Let's finish the auth process against mongodb
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err, false);

	    mongo_auth_process.transition(null, function(err, payload) {
	      if(err) return callback(err, false);
	      callback(null, true);
	    });
	  });
	}

	exports.authenticate = authenticate;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	// Get the Kerberos library
	module.exports = __webpack_require__(331);
	// Set up the auth processes
	module.exports['processes'] = {
	  MongoAuthProcess: __webpack_require__(336).MongoAuthProcess
	}

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var kerberos = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , KerberosNative = kerberos.Kerberos;

	var Kerberos = function() {
	  this._native_kerberos = new KerberosNative(); 
	}

	Kerberos.prototype.authGSSClientInit = function(uri, flags, callback) {
	  return this._native_kerberos.authGSSClientInit(uri, flags, callback);
	}

	Kerberos.prototype.authGSSClientStep = function(context, challenge, callback) {
	  if(typeof challenge == 'function') {
	    callback = challenge;
	    challenge = '';
	  }

	  return this._native_kerberos.authGSSClientStep(context, challenge, callback);
	}

	Kerberos.prototype.authGSSClientUnwrap = function(context, challenge, callback) {
	  if(typeof challenge == 'function') {
	    callback = challenge;
	    challenge = '';
	  }

	  return this._native_kerberos.authGSSClientUnwrap(context, challenge, callback);
	}

	Kerberos.prototype.authGSSClientWrap = function(context, challenge, user_name, callback) {
	  if(typeof user_name == 'function') {
	    callback = user_name;
	    user_name = '';
	  }

	  return this._native_kerberos.authGSSClientWrap(context, challenge, user_name, callback);
	}

	Kerberos.prototype.authGSSClientClean = function(context, callback) {
	  return this._native_kerberos.authGSSClientClean(context, callback);
	}

	Kerberos.prototype.acquireAlternateCredentials = function(user_name, password, domain) {
	  return this._native_kerberos.acquireAlternateCredentials(user_name, password, domain); 
	}

	Kerberos.prototype.prepareOutboundPackage = function(principal, inputdata) {
	  return this._native_kerberos.prepareOutboundPackage(principal, inputdata); 
	}

	Kerberos.prototype.decryptMessage = function(challenge) {
	  return this._native_kerberos.decryptMessage(challenge);
	}

	Kerberos.prototype.encryptMessage = function(challenge) {
	  return this._native_kerberos.encryptMessage(challenge); 
	}

	Kerberos.prototype.queryContextAttribute = function(attribute) {
	  if(typeof attribute != 'number' && attribute != 0x00) throw new Error("Attribute not supported");
	  return this._native_kerberos.queryContextAttribute(attribute);
	}

	// Some useful result codes
	Kerberos.AUTH_GSS_CONTINUE     = 0;
	Kerberos.AUTH_GSS_COMPLETE     = 1;
	     
	// Some useful gss flags 
	Kerberos.GSS_C_DELEG_FLAG      = 1;
	Kerberos.GSS_C_MUTUAL_FLAG     = 2;
	Kerberos.GSS_C_REPLAY_FLAG     = 4;
	Kerberos.GSS_C_SEQUENCE_FLAG   = 8;
	Kerberos.GSS_C_CONF_FLAG       = 16; 
	Kerberos.GSS_C_INTEG_FLAG      = 32;
	Kerberos.GSS_C_ANON_FLAG       = 64;
	Kerberos.GSS_C_PROT_READY_FLAG = 128; 
	Kerberos.GSS_C_TRANS_FLAG      = 256;

	// Export Kerberos class
	exports.Kerberos = Kerberos;

	// If we have SSPI (windows)
	if(kerberos.SecurityCredentials) {
	  // Put all SSPI classes in it's own namespace
	  exports.SSIP = {
	      SecurityCredentials: __webpack_require__(332).SecurityCredentials
	    , SecurityContext: __webpack_require__(333).SecurityContext
	    , SecurityBuffer: __webpack_require__(334).SecurityBuffer
	    , SecurityBufferDescriptor: __webpack_require__(335).SecurityBufferDescriptor
	  }
	}


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityCredentialsNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityCredentials;

	// Add simple kebros helper
	SecurityCredentialsNative.aquire_kerberos = function(username, password, domain, callback) {
	  if(typeof password == 'function') {
	    callback = password;
	    password = null;
	  } else if(typeof domain == 'function') {
	    callback = domain;
	    domain = null;
	  }

	  // We are going to use the async version
	  if(typeof callback == 'function') {
	    return SecurityCredentialsNative.aquire('Kerberos', username, password, domain, callback);
	  } else {
	    return SecurityCredentialsNative.aquireSync('Kerberos', username, password, domain);
	  }
	}

	// Export the modified class
	exports.SecurityCredentials = SecurityCredentialsNative;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityContextNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityContext;
	// Export the modified class
	exports.SecurityContext = SecurityContextNative;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityBufferNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityBuffer;

	// Add some attributes
	SecurityBufferNative.VERSION  = 0;
	SecurityBufferNative.EMPTY    = 0;
	SecurityBufferNative.DATA     = 1;
	SecurityBufferNative.TOKEN    = 2;
	SecurityBufferNative.PADDING  = 9;
	SecurityBufferNative.STREAM   = 10;

	// Export the modified class
	exports.SecurityBuffer = SecurityBufferNative;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityBufferDescriptorNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityBufferDescriptor;
	// Export the modified class
	exports.SecurityBufferDescriptor = SecurityBufferDescriptorNative;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var format = __webpack_require__(267).format;

	var MongoAuthProcess = function(host, port, service_name) {  
	  // Check what system we are on
	  if(process.platform == 'win32') {
	    this._processor = new Win32MongoProcessor(host, port, service_name);
	  } else {
	    this._processor = new UnixMongoProcessor(host, port, service_name);
	  }
	}

	MongoAuthProcess.prototype.init = function(username, password, callback) {
	  this._processor.init(username, password, callback);
	}

	MongoAuthProcess.prototype.transition = function(payload, callback) {
	  this._processor.transition(payload, callback);
	}

	/*******************************************************************
	 *
	 * Win32 SSIP Processor for MongoDB
	 *
	 *******************************************************************/
	var Win32MongoProcessor = function(host, port, service_name) {
	  this.host = host;
	  this.port = port  
	  // SSIP classes
	  this.ssip = __webpack_require__(331).SSIP;
	  // Set up first transition
	  this._transition = Win32MongoProcessor.first_transition(this);
	  // Set up service name
	  service_name = service_name || "mongodb";
	  // Set up target
	  this.target = format("%s/%s", service_name, host);
	  // Number of retries
	  this.retries = 10;
	}

	Win32MongoProcessor.prototype.init = function(username, password, callback) {
	  var self = this;
	  // Save the values used later
	  this.username = username;
	  this.password = password;
	  // Aquire credentials
	  this.ssip.SecurityCredentials.aquire_kerberos(username, password, function(err, security_credentials) {
	    if(err) return callback(err);
	    // Save credentials
	    self.security_credentials = security_credentials;
	    // Callback with success
	    callback(null);
	  });
	}

	Win32MongoProcessor.prototype.transition = function(payload, callback) {
	  if(this._transition == null) return callback(new Error("Transition finished"));
	  this._transition(payload, callback);
	}

	Win32MongoProcessor.first_transition = function(self) {
	  return function(payload, callback) {    
	    self.ssip.SecurityContext.initialize(
	      self.security_credentials, 
	      self.target, 
	      payload, function(err, security_context) {   
	        if(err) return callback(err);
	        
	        // If no context try again until we have no more retries
	        if(!security_context.hasContext) {
	          if(self.retries == 0) return callback(new Error("Failed to initialize security context"));
	          // Update the number of retries
	          self.retries = self.retries - 1;
	          // Set next transition
	          return self.transition(payload, callback);
	        }

	        // Set next transition
	        self._transition = Win32MongoProcessor.second_transition(self);
	        self.security_context = security_context;
	        // Return the payload
	        callback(null, security_context.payload);
	    });
	  }
	}

	Win32MongoProcessor.second_transition = function(self) {
	  return function(payload, callback) {    
	    // Perform a step
	    self.security_context.initialize(self.target, payload, function(err, security_context) {
	      if(err) return callback(err);

	      // If no context try again until we have no more retries
	      if(!security_context.hasContext) {
	        if(self.retries == 0) return callback(new Error("Failed to initialize security context"));
	        // Update the number of retries
	        self.retries = self.retries - 1;
	        // Set next transition
	        self._transition = Win32MongoProcessor.first_transition(self);
	        // Retry
	        return self.transition(payload, callback);
	      }

	      // Set next transition
	      self._transition = Win32MongoProcessor.third_transition(self);
	      // Return the payload
	      callback(null, security_context.payload);
	    });
	  }  
	}

	Win32MongoProcessor.third_transition = function(self) {
	  return function(payload, callback) {   
	    var messageLength = 0;
	    // Get the raw bytes
	    var encryptedBytes = new Buffer(payload, 'base64');
	    var encryptedMessage = new Buffer(messageLength);
	    // Copy first byte
	    encryptedBytes.copy(encryptedMessage, 0, 0, messageLength);
	    // Set up trailer
	    var securityTrailerLength = encryptedBytes.length - messageLength;
	    var securityTrailer = new Buffer(securityTrailerLength);
	    // Copy the bytes
	    encryptedBytes.copy(securityTrailer, 0, messageLength, securityTrailerLength);

	    // Types used
	    var SecurityBuffer = self.ssip.SecurityBuffer;
	    var SecurityBufferDescriptor = self.ssip.SecurityBufferDescriptor;

	    // Set up security buffers
	    var buffers = [
	        new SecurityBuffer(SecurityBuffer.DATA, encryptedBytes)
	      , new SecurityBuffer(SecurityBuffer.STREAM, securityTrailer)
	    ];

	    // Set up the descriptor
	    var descriptor = new SecurityBufferDescriptor(buffers);

	    // Decrypt the data
	    self.security_context.decryptMessage(descriptor, function(err, security_context) {
	      if(err) return callback(err);

	      var length = 4;
	      if(self.username != null) {
	        length += self.username.length;          
	      }

	      var bytesReceivedFromServer = new Buffer(length);
	      bytesReceivedFromServer[0] = 0x01;  // NO_PROTECTION
	      bytesReceivedFromServer[1] = 0x00;  // NO_PROTECTION
	      bytesReceivedFromServer[2] = 0x00;  // NO_PROTECTION
	      bytesReceivedFromServer[3] = 0x00;  // NO_PROTECTION        

	      if(self.username != null) {
	        var authorization_id_bytes = new Buffer(self.username, 'utf8');
	        authorization_id_bytes.copy(bytesReceivedFromServer, 4, 0);
	      }

	      self.security_context.queryContextAttributes(0x00, function(err, sizes) {
	        if(err) return callback(err);

	        var buffers = [
	            new SecurityBuffer(SecurityBuffer.TOKEN, new Buffer(sizes.securityTrailer))
	          , new SecurityBuffer(SecurityBuffer.DATA, bytesReceivedFromServer)
	          , new SecurityBuffer(SecurityBuffer.PADDING, new Buffer(sizes.blockSize))
	        ]

	        var descriptor = new SecurityBufferDescriptor(buffers);

	        self.security_context.encryptMessage(descriptor, 0x80000001, function(err, security_context) {
	          if(err) return callback(err);
	          callback(null, security_context.payload);
	        });
	      });
	    });
	  }  
	}

	/*******************************************************************
	 *
	 * UNIX MIT Kerberos processor
	 *
	 *******************************************************************/
	var UnixMongoProcessor = function(host, port, service_name) {
	  this.host = host;
	  this.port = port  
	  // SSIP classes
	  this.Kerberos = __webpack_require__(331).Kerberos;
	  this.kerberos = new this.Kerberos();
	  service_name = service_name || "mongodb";
	  // Set up first transition
	  this._transition = UnixMongoProcessor.first_transition(this);
	  // Set up target
	  this.target = format("%s@%s", service_name, host);
	  // Number of retries
	  this.retries = 10;
	}

	UnixMongoProcessor.prototype.init = function(username, password, callback) {
	  var self = this;
	  this.username = username;
	  this.password = password;
	  // Call client initiate
	  this.kerberos.authGSSClientInit(
	      self.target
	    , this.Kerberos.GSS_C_MUTUAL_FLAG, function(err, context) {
	      self.context = context;
	      // Return the context
	      callback(null, context);
	  });
	}

	UnixMongoProcessor.prototype.transition = function(payload, callback) {
	  if(this._transition == null) return callback(new Error("Transition finished"));
	  this._transition(payload, callback);
	}

	UnixMongoProcessor.first_transition = function(self) {
	  return function(payload, callback) {    
	    self.kerberos.authGSSClientStep(self.context, '', function(err, result) {
	      if(err) return callback(err);
	      // Set up the next step
	      self._transition = UnixMongoProcessor.second_transition(self);
	      // Return the payload
	      callback(null, self.context.response);
	    })
	  }
	}

	UnixMongoProcessor.second_transition = function(self) {
	  return function(payload, callback) {    
	    self.kerberos.authGSSClientStep(self.context, payload, function(err, result) {
	      if(err && self.retries == 0) return callback(err);
	      // Attempt to re-establish a context
	      if(err) {
	        // Adjust the number of retries
	        self.retries = self.retries - 1;
	        // Call same step again
	        return self.transition(payload, callback);
	      }
	      
	      // Set up the next step
	      self._transition = UnixMongoProcessor.third_transition(self);
	      // Return the payload
	      callback(null, self.context.response || '');
	    });
	  }
	}

	UnixMongoProcessor.third_transition = function(self) {
	  return function(payload, callback) {    
	    // GSS Client Unwrap
	    self.kerberos.authGSSClientUnwrap(self.context, payload, function(err, result) {
	      if(err) return callback(err, false);
	      
	      // Wrap the response
	      self.kerberos.authGSSClientWrap(self.context, self.context.response, self.username, function(err, result) {
	        if(err) return callback(err, false);
	        // Set up the next step
	        self._transition = UnixMongoProcessor.fourth_transition(self);
	        // Return the payload
	        callback(null, self.context.response);
	      });
	    });
	  }
	}

	UnixMongoProcessor.fourth_transition = function(self) {
	  return function(payload, callback) {    
	    // Clean up context
	    self.kerberos.authGSSClientClean(self.context, function(err, result) {
	      if(err) return callback(err, false);
	      // Set the transition to null
	      self._transition = null;
	      // Callback with valid authentication
	      callback(null, true);
	    });
	  }
	}

	// Set the process
	exports.MongoAuthProcess = MongoAuthProcess;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(258).Buffer))

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(287).DbCommand
	  , utils = __webpack_require__(288)
	  , Binary = __webpack_require__(256).Binary
	  , format = __webpack_require__(267).format;

	var authenticate = function(db, username, password, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;
	  
	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }

	  // Create payload
	  var payload = new Binary(format("\x00%s\x00%s", username, password));

	  // Let's start the sasl process
	  var command = {
	      saslStart: 1
	    , mechanism: 'PLAIN'
	    , payload: payload
	    , autoAuthorize: 1
	  };

	  // Grab all the connections
	  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections();

	  // Authenticate all connections
	  for(var i = 0; i < numberOfConnections; i++) {
	    var connection = connections[i];
	    // Execute first sasl step
	    db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, result) {
	      // Count down
	      numberOfConnections = numberOfConnections - 1;

	      // Ensure we save any error
	      if(err) {
	        errorObject = err;
	      } else if(result.documents[0].err != null || result.documents[0].errmsg != null){
	        errorObject = utils.toError(result.documents[0]);
	      }

	      // Work around the case where the number of connections are 0
	      if(numberOfConnections <= 0 && typeof callback == 'function') {
	        var internalCallback = callback;
	        callback = null;

	        if(errorObject == null && result.documents[0].ok == 1) {
	          // We authenticated correctly save the credentials
	          db.serverConfig.auth.add('PLAIN', db.databaseName, username, password);
	          // Return callback
	          internalCallback(errorObject, true);
	        } else {
	          internalCallback(errorObject, false);
	        }
	      }
	    });
	  }
	}

	exports.authenticate = authenticate;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(287).DbCommand
	  , utils = __webpack_require__(288)
	  , format = __webpack_require__(267).format;

	// Kerberos class
	var Kerberos = null;
	var MongoAuthProcess = null;
	// Try to grab the Kerberos class
	try {
	  Kerberos = __webpack_require__(330).Kerberos
	  // Authentication process for Mongo
	  MongoAuthProcess = __webpack_require__(330).processes.MongoAuthProcess
	} catch(err) {}

	var authenticate = function(db, username, password, authdb, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;  
	  // We don't have the Kerberos library
	  if(Kerberos == null) return callback(new Error("Kerberos library is not installed"));

	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }

	  // Set the sspi server name
	  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';

	  // Grab all the connections
	  var connections = db.serverConfig.allRawConnections();
	  var error = null;
	  
	  // Authenticate all connections
	  for(var i = 0; i < numberOfConnections; i++) {
	    // Start Auth process for a connection
	    SSIPAuthenticate(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result) {
	      // Adjust number of connections left to connect
	      numberOfConnections = numberOfConnections - 1;
	      // If we have an error save it
	      if(err) error = err;

	      // We are done
	      if(numberOfConnections == 0) {
	        if(err) return callback(err, false);
	        // We authenticated correctly save the credentials
	        db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);
	        // Return valid callback
	        return callback(null, true);
	      }
	    });    
	  }
	}

	var SSIPAuthenticate = function(db, username, password, authdb, service_name, connection, callback) {
	  // --------------------------------------------------------------
	  // Async Version
	  // --------------------------------------------------------------
	  var command = {
	      saslStart: 1
	    , mechanism: 'GSSAPI'
	    , payload: ''
	    , autoAuthorize: 1
	  };

	  // Create authenticator
	  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, service_name);

	  // Execute first sasl step
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err);
	    doc = doc.documents[0];

	    mongo_auth_process.init(username, password, function(err) {
	      if(err) return callback(err);

	      mongo_auth_process.transition(doc.payload, function(err, payload) {
	        if(err) return callback(err);

	        // Perform the next step against mongod
	        var command = {
	            saslContinue: 1
	          , conversationId: doc.conversationId
	          , payload: payload
	        };

	        // Execute the command
	        db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	          if(err) return callback(err);
	          doc = doc.documents[0];

	          mongo_auth_process.transition(doc.payload, function(err, payload) {
	            if(err) return callback(err);

	            // Perform the next step against mongod
	            var command = {
	                saslContinue: 1
	              , conversationId: doc.conversationId
	              , payload: payload
	            };

	            // Execute the command
	            db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	              if(err) return callback(err);
	              doc = doc.documents[0];
	              
	              mongo_auth_process.transition(doc.payload, function(err, payload) {
	                // Perform the next step against mongod
	                var command = {
	                    saslContinue: 1
	                  , conversationId: doc.conversationId
	                  , payload: payload
	                };

	                // Execute the command
	                db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	                  if(err) return callback(err);
	                  doc = doc.documents[0];

	                  if(doc.done) return callback(null, true);
	                  callback(new Error("Authentication failed"), false);
	                });        
	              });
	            });
	          });
	        });
	      });
	    });
	  });  
	}

	exports.authenticate = authenticate;

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(311).EventEmitter
	  , inherits = __webpack_require__(267).inherits
	  , mongodb_cr_authenticate = __webpack_require__(328).authenticate
	  , mongodb_gssapi_authenticate = __webpack_require__(329).authenticate
	  , mongodb_sspi_authenticate = __webpack_require__(338).authenticate;  

	var id = 0;

	/**
	 * Internal class for callback storage
	 * @ignore
	 */
	var CallbackStore = function() {
	  // Make class an event emitter
	  EventEmitter.call(this);
	  // Add a info about call variable
	  this._notReplied = {};
	  this.id = id++;
	}

	/**
	 * @ignore
	 */
	inherits(CallbackStore, EventEmitter);

	CallbackStore.prototype.notRepliedToIds = function() {
	  return Object.keys(this._notReplied);
	}

	CallbackStore.prototype.callbackInfo = function(id) {
	  return this._notReplied[id]; 
	}

	/**
	 * Internal class for holding non-executed commands
	 * @ignore
	 */
	var NonExecutedOperationStore = function(config) {  
	  this.config = config;
	  this.commands = {
	      read: []
	    , write_reads: []
	    , write: []
	  };
	}

	NonExecutedOperationStore.prototype.write = function(op) {
	  this.commands.write.push(op);
	}

	NonExecutedOperationStore.prototype.read_from_writer = function(op) {  
	  this.commands.write_reads.push(op);
	}

	NonExecutedOperationStore.prototype.read = function(op) {  
	  this.commands.read.push(op);
	}

	NonExecutedOperationStore.prototype.execute_queries = function(executeInsertCommand) {
	  var connection = this.config.checkoutReader();
	  if(connection == null || connection instanceof Error) return;

	  // Write out all the queries
	  while(this.commands.read.length > 0) {
	    // Get the next command
	    var command = this.commands.read.shift();
	    command.options.connection = connection;
	    // Execute the next command
	    command.executeQueryCommand(command.db, command.db_command, command.options, command.callback);
	  }
	}

	NonExecutedOperationStore.prototype.execute_writes = function() {
	  var connection = this.config.checkoutWriter();
	  if(connection == null || connection instanceof Error) return;

	  // Write out all the queries to the primary
	  while(this.commands.write_reads.length > 0) {
	    // Get the next command
	    var command = this.commands.write_reads.shift();
	    command.options.connection = connection;
	    // Execute the next command
	    command.executeQueryCommand(command.db, command.db_command, command.options, command.callback);
	  }

	  // Execute all write operations
	  while(this.commands.write.length > 0) {
	    // Get the next command
	    var command = this.commands.write.shift();
	    // Set the connection
	    command.options.connection = connection;
	    // Execute the next command
	    command.executeInsertCommand(command.db, command.db_command, command.options, command.callback);
	  }  
	}

	/**
	 * Internal class for authentication storage
	 * @ignore
	 */
	var AuthStore = function() {
	  this._auths = [];
	}

	AuthStore.prototype.add = function(authMechanism, dbName, username, password, authdbName, gssapiServiceName) {
	  // Check for duplicates
	  if(!this.contains(dbName)) {
	    // Base config
	    var config = {
	        'username':username
	      , 'password':password
	      , 'db': dbName
	      , 'authMechanism': authMechanism
	      , 'gssapiServiceName': gssapiServiceName
	    };

	    // Add auth source if passed in
	    if(typeof authdbName == 'string') {
	      config['authdb'] = authdbName;
	    }

	    // Push the config
	    this._auths.push(config);
	  }
	}

	AuthStore.prototype.contains = function(dbName) {
	  for(var i = 0; i < this._auths.length; i++) {
	    if(this._auths[i].db == dbName) return true;
	  }

	  return false;
	}

	AuthStore.prototype.remove = function(dbName) {
	  var newAuths = [];

	  // Filter out all the login details
	  for(var i = 0; i < this._auths.length; i++) {
	    if(this._auths[i].db != dbName) newAuths.push(this._auths[i]);
	  }

	  //  Set the filtered list
	  this._auths = newAuths;
	}

	AuthStore.prototype.get = function(index) {
	  return this._auths[index];
	}

	AuthStore.prototype.length = function() {
	  return this._auths.length;
	}

	AuthStore.prototype.toArray = function() {
	  return this._auths.slice(0);
	}

	/**
	 * Internal class for storing db references
	 * @ignore
	 */
	var DbStore = function() {
	  this._dbs = [];
	}

	DbStore.prototype.add = function(db) {
	  var found = false;
	  
	  // Only add if it does not exist already
	  for(var i = 0; i < this._dbs.length; i++) {
	    if(db.databaseName == this._dbs[i].databaseName) found = true;
	  }

	  // Only add if it does not already exist
	  if(!found) {
	    this._dbs.push(db);    
	  } 
	}

	DbStore.prototype.reset = function() {
	  this._dbs = [];
	}

	DbStore.prototype.fetch = function(databaseName) {
	  // Only add if it does not exist already
	  for(var i = 0; i < this._dbs.length; i++) {
	    if(databaseName == this._dbs[i].databaseName)
	      return this._dbs[i];
	  }  

	  return null;
	}

	DbStore.prototype.emit = function(event, message, object, reset, filterDb, rethrow_if_no_listeners) {
	  var emitted = false;

	  // Emit the events
	  for(var i = 0; i < this._dbs.length; i++) {
	    if(this._dbs[i].listeners(event).length > 0) {
	      if(filterDb == null || filterDb.databaseName !== this._dbs[i].databaseName 
	        || filterDb.tag !== this._dbs[i].tag) {
	        this._dbs[i].emit(event, message, object == null ? this._dbs[i] : object);
	        emitted = true;
	      }
	    }
	  }

	  // Emit error message
	  if(message 
	    && event == 'error' 
	    && !emitted
	    && rethrow_if_no_listeners 
	    && object && object.db) {
	      process.nextTick(function() {
	        object.db.emit(event, message, null);      
	      })
	  }

	  // Not emitted and we have enabled rethrow, let process.uncaughtException
	  // deal with the issue
	  if(!emitted && rethrow_if_no_listeners) {
	    throw message;
	  }
	}

	var Base = function Base() {  
	  EventEmitter.call(this);

	  // Callback store is part of connection specification
	  if(Base._callBackStore == null) {
	    Base._callBackStore = new CallbackStore();
	  }

	  // Create a new callback store  
	  this._callBackStore = new CallbackStore();
	  // All commands not being executed
	  this._commandsStore = new NonExecutedOperationStore(this);
	  // Create a new auth store
	  this.auth = new AuthStore();
	  // Contains all the dbs attached to this server config
	  this._dbStore = new DbStore();
	}

	/**
	 * @ignore
	 */
	inherits(Base, EventEmitter);

	/**
	 * @ignore
	 */
	Base.prototype._apply_auths = function(db, callback) {
	  _apply_auths_serially(this, db, this.auth.toArray(), callback);
	}

	var _apply_auths_serially = function(self, db, auths, callback) {
	  if(auths.length == 0) return callback(null, null);
	  // Get the first auth
	  var auth = auths.shift();
	  var connections = self.allRawConnections();
	  var connectionsLeft = connections.length;
	  var options = {};

	  if(auth.authMechanism == 'GSSAPI') {
	    // We have the kerberos library, execute auth process
	    if(process.platform == 'win32') {
	      mongodb_sspi_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);
	    } else {
	      mongodb_gssapi_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);
	    }
	  } else if(auth.authMechanism == 'MONGODB-CR') {
	    mongodb_cr_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);
	  }
	}

	/**
	 * Fire all the errors
	 * @ignore
	 */
	Base.prototype.__executeAllCallbacksWithError = function(err) {
	  // Check all callbacks
	  var keys = Object.keys(this._callBackStore._notReplied);
	  // For each key check if it's a callback that needs to be returned
	  for(var j = 0; j < keys.length; j++) {
	    var info = this._callBackStore._notReplied[keys[j]];
	    // Execute callback with error
	    this._callBackStore.emit(keys[j], err, null);
	    // Remove the key
	    delete this._callBackStore._notReplied[keys[j]];
	    // Force cleanup _events, node.js seems to set it as a null value
	    if(this._callBackStore._events) {
	      delete this._callBackStore._events[keys[j]];
	    }
	  }
	}

	/**
	 * Fire all the errors
	 * @ignore
	 */
	Base.prototype.__executeAllServerSpecificErrorCallbacks = function(host, port, err) {  
	  // Check all callbacks
	  var keys = Object.keys(this._callBackStore._notReplied);
	  // For each key check if it's a callback that needs to be returned
	  for(var j = 0; j < keys.length; j++) {
	    var info = this._callBackStore._notReplied[keys[j]];

	    if(info.connection) {
	      // Unpack the connection settings
	      var _host = info.connection.socketOptions.host;
	      var _port = info.connection.socketOptions.port;
	      // If the server matches execute the callback with the error
	      if(_port == port && _host == host) {
	        this._callBackStore.emit(keys[j], err, null);
	        // Remove the key
	        delete this._callBackStore._notReplied[keys[j]];
	        // Force cleanup _events, node.js seems to set it as a null value
	        if(this._callBackStore._events) {
	          delete this._callBackStore._events[keys[j]];
	        } 
	      }      
	    }
	  }
	}

	/**
	 * Register a handler
	 * @ignore
	 * @api private
	 */
	Base.prototype._registerHandler = function(db_command, raw, connection, exhaust, callback) {
	  // Check if we have exhausted
	  if(typeof exhaust == 'function') {
	    callback = exhaust;
	    exhaust = false;
	  }

	  // Add the callback to the list of handlers
	  this._callBackStore.once(db_command.getRequestId(), callback);
	  // Add the information about the reply
	  this._callBackStore._notReplied[db_command.getRequestId().toString()] = {start: new Date().getTime(), 'raw': raw, connection:connection, exhaust:exhaust};
	}

	/**
	 * Re-Register a handler, on the cursor id f.ex
	 * @ignore
	 * @api private
	 */
	Base.prototype._reRegisterHandler = function(newId, object, callback) {
	  // Add the callback to the list of handlers
	  this._callBackStore.once(newId, object.callback.listener);
	  // Add the information about the reply
	  this._callBackStore._notReplied[newId] = object.info;
	}

	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._callHandler = function(id, document, err) {
	  var self = this;

	  // If there is a callback peform it
	  if(this._callBackStore.listeners(id).length >= 1) {
	    // Get info object
	    var info = this._callBackStore._notReplied[id];
	    // Delete the current object
	    delete this._callBackStore._notReplied[id]; 
	    // Call the handle directly don't emit
	    var callback = this._callBackStore.listeners(id)[0].listener;
	    // Remove the listeners
	    this._callBackStore.removeAllListeners(id);
	    // Force key deletion because it nulling it not deleting in 0.10.X
	    if(this._callBackStore._events) {
	      delete this._callBackStore._events[id];
	    }

	    try {
	      // Execute the callback if one was provided
	      if(typeof callback == 'function') callback(err, document, info.connection);
	    } catch(err) {
	      self._emitAcrossAllDbInstances(self, null, "error", err, self, true, true);
	    }
	  }
	}

	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._hasHandler = function(id) {
	  return this._callBackStore.listeners(id).length >= 1;
	}

	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._removeHandler = function(id) {
	  // Remove the information
	  if(this._callBackStore._notReplied[id] != null) delete this._callBackStore._notReplied[id];
	  // Remove the callback if it's registered
	  this._callBackStore.removeAllListeners(id);
	  // Force cleanup _events, node.js seems to set it as a null value
	  if(this._callBackStore._events) {
	    delete this._callBackStore._events[id];
	  }
	}

	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._findHandler = function(id) {
	  var info = this._callBackStore._notReplied[id];
	  // Return the callback
	  return {info:info, callback:(this._callBackStore.listeners(id).length >= 1) ? this._callBackStore.listeners(id)[0] : null}
	}

	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._emitAcrossAllDbInstances = function(server, filterDb, event, message, object, resetConnection, rethrow_if_no_listeners) {
	  if(resetConnection) {
	    for(var i = 0; i < this._dbStore._dbs.length; i++) {
	      if(typeof this._dbStore._dbs[i].openCalled != 'undefined')
	        this._dbStore._dbs[i].openCalled = false;
	    }
	  }
	  
	  // Fire event
	  this._dbStore.emit(event, message, object, resetConnection, filterDb, rethrow_if_no_listeners);
	}

	exports.Base = Base;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var utils = __webpack_require__(341),
	  inherits = __webpack_require__(267).inherits,
	  net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  EventEmitter = __webpack_require__(311).EventEmitter,
	  inherits = __webpack_require__(267).inherits,
	  binaryutils = __webpack_require__(288),
	  tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var Connection = exports.Connection = function(id, socketOptions) {
	  // Set up event emitter
	  EventEmitter.call(this);
	  // Store all socket options
	  this.socketOptions = socketOptions ? socketOptions : {host:'localhost', port:27017, domainSocket:false};
	  // Set keep alive default if not overriden
	  if(this.socketOptions.keepAlive == null && (process.platform !== "sunos" || process.platform !== "win32")) this.socketOptions.keepAlive = 100;
	  // Id for the connection
	  this.id = id;
	  // State of the connection
	  this.connected = false;
	  // Set if this is a domain socket
	  this.domainSocket = this.socketOptions.domainSocket;

	  //
	  // Connection parsing state
	  //
	  this.maxBsonSize = socketOptions.maxBsonSize ? socketOptions.maxBsonSize : Connection.DEFAULT_MAX_BSON_SIZE;
	  this.maxMessageSizeBytes = socketOptions.maxMessageSizeBytes ? socketOptions.maxMessageSizeBytes : Connection.DEFAULT_MAX_MESSAGE_SIZE;
	  // Contains the current message bytes
	  this.buffer = null;
	  // Contains the current message size
	  this.sizeOfMessage = 0;
	  // Contains the readIndex for the messaage
	  this.bytesRead = 0;
	  // Contains spill over bytes from additional messages
	  this.stubBuffer = 0;

	  // Just keeps list of events we allow
	  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[], end:[]};

	  // Just keeps list of events we allow
	  resetHandlers(this, false);
	  // Bson object
	  this.maxBsonSettings = {
	      disableDriverBSONSizeCheck: this.socketOptions['disableDriverBSONSizeCheck'] || false
	    , maxBsonSize: this.maxBsonSize
	    , maxMessageSizeBytes: this.maxMessageSizeBytes
	  }  
	}

	// Set max bson size
	Connection.DEFAULT_MAX_BSON_SIZE = 1024 * 1024 * 4;
	// Set default to max bson to avoid overflow or bad guesses
	Connection.DEFAULT_MAX_MESSAGE_SIZE = Connection.DEFAULT_MAX_BSON_SIZE;

	// Inherit event emitter so we can emit stuff wohoo
	inherits(Connection, EventEmitter);

	Connection.prototype.start = function() {
	  var self = this;

	  // If we have a normal connection
	  if(this.socketOptions.ssl) {
	    // Create new connection instance
	    if(this.domainSocket) {
	      this.connection = net.createConnection(this.socketOptions.host);
	    } else {
	      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);
	    }
	    if(this.logger != null && this.logger.doDebug){
	      this.logger.debug("opened connection", this.socketOptions);
	    }
	    // Set options on the socket
	    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);
	    // Work around for 0.4.X
	    if(process.version.indexOf("v0.4") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);
	    // Set keep alive if defined
	    if(process.version.indexOf("v0.4") == -1) {
	      if(this.socketOptions.keepAlive > 0) {
	        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);
	      } else {
	        this.connection.setKeepAlive(false);
	      }
	    }

	    // Check if the driver should validate the certificate
	    var validate_certificates = this.socketOptions.sslValidate == true ? true : false;

	    // Create options for the tls connection
	    var tls_options = {
	        socket: this.connection
	      , rejectUnauthorized: false
	    }

	    // If we wish to validate the certificate we have provided a ca store
	    if(validate_certificates) {
	      tls_options.ca = this.socketOptions.sslCA;
	    }

	    // If we have a certificate to present
	    if(this.socketOptions.sslCert) {      
	      tls_options.cert = this.socketOptions.sslCert;
	      tls_options.key = this.socketOptions.sslKey;
	    }

	    // If the driver has been provided a private key password
	    if(this.socketOptions.sslPass) {
	      tls_options.passphrase = this.socketOptions.sslPass;
	    }

	    // Contains the cleartext stream
	    var cleartext = null;
	    // Attempt to establish a TLS connection to the server
	    try {
	      cleartext = tls.connect(this.socketOptions.port, this.socketOptions.host, tls_options, function() {      
	        // If we have a ssl certificate validation error return an error
	        if(cleartext.authorizationError && validate_certificates) {          
	          // Emit an error
	          return self.emit("error", cleartext.authorizationError, self, {ssl:true});        
	        }
	        
	        // Connect to the server
	        connectHandler(self)();
	      })      
	    } catch(err) {
	      return self.emit("error", "SSL connection failed", self, {ssl:true});
	    }

	    // Save the output stream
	    this.writeSteam = cleartext;

	    // Set up data handler for the clear stream
	    cleartext.on("data", createDataHandler(this));
	    // Do any handling of end event of the stream
	    cleartext.on("end", endHandler(this));
	    cleartext.on("error", errorHandler(this));    

	    // Handle any errors
	    this.connection.on("error", errorHandler(this));    
	    // Handle timeout
	    this.connection.on("timeout", timeoutHandler(this));
	    // Handle drain event
	    this.connection.on("drain", drainHandler(this));
	    // Handle the close event
	    this.connection.on("close", closeHandler(this));
	  } else {
	    // Create new connection instance
	    if(this.domainSocket) {
	      this.connection = net.createConnection(this.socketOptions.host);
	    } else {
	      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);
	    }
	    if(this.logger != null && this.logger.doDebug){
	      this.logger.debug("opened connection", this.socketOptions);
	    }

	    // Set options on the socket
	    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);
	    // Work around for 0.4.X
	    if(process.version.indexOf("v0.4") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);
	    // Set keep alive if defined
	    if(process.version.indexOf("v0.4") == -1) {
	      if(this.socketOptions.keepAlive > 0) {
	        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);
	      } else {
	        this.connection.setKeepAlive(false);
	      }
	    }

	    // Set up write stream
	    this.writeSteam = this.connection;
	    // Add handlers
	    this.connection.on("error", errorHandler(this));
	    // Add all handlers to the socket to manage it
	    this.connection.on("connect", connectHandler(this));
	    // this.connection.on("end", endHandler(this));
	    this.connection.on("data", createDataHandler(this));
	    this.connection.on("timeout", timeoutHandler(this));
	    this.connection.on("drain", drainHandler(this));
	    this.connection.on("close", closeHandler(this));
	  }
	}

	// Check if the sockets are live
	Connection.prototype.isConnected = function() {
	  return this.connected && !this.connection.destroyed && this.connection.writable && this.connection.readable;
	}

	// Write the data out to the socket
	Connection.prototype.write = function(command, callback) {
	  try {
	    // If we have a list off commands to be executed on the same socket
	    if(Array.isArray(command)) {
	      for(var i = 0; i < command.length; i++) {
	        try {
	          // Pass in the bson validation settings (validate early)
	          var binaryCommand = command[i].toBinary(this.maxBsonSettings)

	          if(this.logger != null && this.logger.doDebug) 
	            this.logger.debug("writing command to mongodb", {binary: binaryCommand, json: command[i]});

	          this.writeSteam.write(binaryCommand);
	        } catch(err) {
	          return callback(err, null);
	        }
	      }
	    } else {
	      try {
	        // Pass in the bson validation settings (validate early)
	        var binaryCommand = command.toBinary(this.maxBsonSettings)

	        if(this.logger != null && this.logger.doDebug) 
	          this.logger.debug("writing command to mongodb", {binary: binaryCommand, json: command[i]});

	        this.writeSteam.write(binaryCommand);
	      } catch(err) {
	        return callback(err, null)
	      }
	    }
	  } catch (err) {
	    if(typeof callback === 'function') callback(err);
	  }
	}

	// Force the closure of the connection
	Connection.prototype.close = function() {
	  // clear out all the listeners
	  resetHandlers(this, true);
	  // Add a dummy error listener to catch any weird last moment errors (and ignore them)
	  this.connection.on("error", function() {})
	  // destroy connection
	  this.connection.destroy();
	  if(this.logger != null && this.logger.doDebug){
	    this.logger.debug("closed connection", this.connection);
	  }
	}

	// Reset all handlers
	var resetHandlers = function(self, clearListeners) {
	  self.eventHandlers = {error:[], connect:[], close:[], end:[], timeout:[], parseError:[], message:[]};

	  // If we want to clear all the listeners
	  if(clearListeners && self.connection != null) {
	    var keys = Object.keys(self.eventHandlers);
	    // Remove all listeners
	    for(var i = 0; i < keys.length; i++) {
	      self.connection.removeAllListeners(keys[i]);
	    }
	  }
	}

	//
	// Handlers
	//

	// Connect handler
	var connectHandler = function(self) {
	  return function(data) {
	    // Set connected
	    self.connected = true;
	    // Now that we are connected set the socket timeout
	    self.connection.setTimeout(self.socketOptions.socketTimeoutMS != null ? self.socketOptions.socketTimeoutMS : self.socketOptions.timeout);
	    // Emit the connect event with no error
	    self.emit("connect", null, self);
	  }
	}

	var createDataHandler = exports.Connection.createDataHandler = function(self) {
	  // We need to handle the parsing of the data
	  // and emit the messages when there is a complete one
	  return function(data) {
	    // Parse until we are done with the data
	    while(data.length > 0) {
	      // If we still have bytes to read on the current message
	      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {
	        // Calculate the amount of remaining bytes
	        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;
	        // Check if the current chunk contains the rest of the message
	        if(remainingBytesToRead > data.length) {
	          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)
	          data.copy(self.buffer, self.bytesRead);
	          // Adjust the number of bytes read so it point to the correct index in the buffer
	          self.bytesRead = self.bytesRead + data.length;

	          // Reset state of buffer
	          data = new Buffer(0);
	        } else {
	          // Copy the missing part of the data into our current buffer
	          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);
	          // Slice the overflow into a new buffer that we will then re-parse
	          data = data.slice(remainingBytesToRead);

	          // Emit current complete message
	          try {
	            var emitBuffer = self.buffer;
	            // Reset state of buffer
	            self.buffer = null;
	            self.sizeOfMessage = 0;
	            self.bytesRead = 0;
	            self.stubBuffer = null;
	            // Emit the buffer
	            self.emit("message", emitBuffer, self);
	          } catch(err) {
	            var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	              sizeOfMessage:self.sizeOfMessage,
	              bytesRead:self.bytesRead,
	              stubBuffer:self.stubBuffer}};
	            if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	            // We got a parse Error fire it off then keep going
	            self.emit("parseError", errorObject, self);
	          }
	        }
	      } else {
	        // Stub buffer is kept in case we don't get enough bytes to determine the
	        // size of the message (< 4 bytes)
	        if(self.stubBuffer != null && self.stubBuffer.length > 0) {

	          // If we have enough bytes to determine the message size let's do it
	          if(self.stubBuffer.length + data.length > 4) {
	            // Prepad the data
	            var newData = new Buffer(self.stubBuffer.length + data.length);
	            self.stubBuffer.copy(newData, 0);
	            data.copy(newData, self.stubBuffer.length);
	            // Reassign for parsing
	            data = newData;

	            // Reset state of buffer
	            self.buffer = null;
	            self.sizeOfMessage = 0;
	            self.bytesRead = 0;
	            self.stubBuffer = null;

	          } else {

	            // Add the the bytes to the stub buffer
	            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);
	            // Copy existing stub buffer
	            self.stubBuffer.copy(newStubBuffer, 0);
	            // Copy missing part of the data
	            data.copy(newStubBuffer, self.stubBuffer.length);
	            // Exit parsing loop
	            data = new Buffer(0);
	          }
	        } else {
	          if(data.length > 4) {
	            // Retrieve the message size
	            var sizeOfMessage = binaryutils.decodeUInt32(data, 0);
	            // If we have a negative sizeOfMessage emit error and return
	            if(sizeOfMessage < 0 || sizeOfMessage > self.maxBsonSize) {
	              var errorObject = {err:"socketHandler", trace:'', bin:self.buffer, parseState:{
	                sizeOfMessage: sizeOfMessage,
	                bytesRead: self.bytesRead,
	                stubBuffer: self.stubBuffer}};
	              if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	              // We got a parse Error fire it off then keep going
	              self.emit("parseError", errorObject, self);
	              return;
	            }

	            // Ensure that the size of message is larger than 0 and less than the max allowed
	            if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonSize && sizeOfMessage > data.length) {
	              self.buffer = new Buffer(sizeOfMessage);
	              // Copy all the data into the buffer
	              data.copy(self.buffer, 0);
	              // Update bytes read
	              self.bytesRead = data.length;
	              // Update sizeOfMessage
	              self.sizeOfMessage = sizeOfMessage;
	              // Ensure stub buffer is null
	              self.stubBuffer = null;
	              // Exit parsing loop
	              data = new Buffer(0);

	            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonSize && sizeOfMessage == data.length) {
	              try {
	                var emitBuffer = data;
	                // Reset state of buffer
	                self.buffer = null;
	                self.sizeOfMessage = 0;
	                self.bytesRead = 0;
	                self.stubBuffer = null;
	                // Exit parsing loop
	                data = new Buffer(0);
	                // Emit the message
	                self.emit("message", emitBuffer, self);
	              } catch (err) {
	                var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	                  sizeOfMessage:self.sizeOfMessage,
	                  bytesRead:self.bytesRead,
	                  stubBuffer:self.stubBuffer}};
	                if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	                // We got a parse Error fire it off then keep going
	                self.emit("parseError", errorObject, self);
	              }
	            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonSize) {
	              var errorObject = {err:"socketHandler", trace:null, bin:data, parseState:{
	                sizeOfMessage:sizeOfMessage,
	                bytesRead:0,
	                buffer:null,
	                stubBuffer:null}};
	              if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	              // We got a parse Error fire it off then keep going
	              self.emit("parseError", errorObject, self);

	              // Clear out the state of the parser
	              self.buffer = null;
	              self.sizeOfMessage = 0;
	              self.bytesRead = 0;
	              self.stubBuffer = null;
	              // Exit parsing loop
	              data = new Buffer(0);

	            } else {
	              try {
	                var emitBuffer = data.slice(0, sizeOfMessage);
	                // Reset state of buffer
	                self.buffer = null;
	                self.sizeOfMessage = 0;
	                self.bytesRead = 0;
	                self.stubBuffer = null;
	                // Copy rest of message
	                data = data.slice(sizeOfMessage);
	                // Emit the message
	                self.emit("message", emitBuffer, self);
	              } catch (err) {
	                var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	                  sizeOfMessage:sizeOfMessage,
	                  bytesRead:self.bytesRead,
	                  stubBuffer:self.stubBuffer}};
	                if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	                // We got a parse Error fire it off then keep going
	                self.emit("parseError", errorObject, self);
	              }

	            }
	          } else {
	            // Create a buffer that contains the space for the non-complete message
	            self.stubBuffer = new Buffer(data.length)
	            // Copy the data to the stub buffer
	            data.copy(self.stubBuffer, 0);
	            // Exit parsing loop
	            data = new Buffer(0);
	          }
	        }
	      }
	    }
	  }
	}

	var endHandler = function(self) {
	  return function() {
	    // Set connected to false
	    self.connected = false;
	    // Emit end event
	    self.emit("end", {err: 'connection received Fin packet from [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	  }
	}

	var timeoutHandler = function(self) {
	  return function() {
	    // Set connected to false
	    self.connected = false;
	    // Emit timeout event
	    self.emit("timeout", {err: 'connection to [' + self.socketOptions.host + ':' + self.socketOptions.port + '] timed out'}, self);
	  }
	}

	var drainHandler = function(self) {
	  return function() {
	  }
	}

	var errorHandler = function(self) {
	  return function(err) {
	    self.connection.destroy();
	    // Set connected to false
	    self.connected = false;
	    // Emit error
	    self.emit("error", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	  }
	}

	var closeHandler = function(self) {
	  return function(hadError) {
	    // If we have an error during the connection phase
	    if(hadError && !self.connected) {
	      // Set disconnected
	      self.connected = false;
	      // Emit error
	      self.emit("error", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	    } else {
	      // Set disconnected
	      self.connected = false;
	      // Emit close
	      self.emit("close", {err: 'connection closed to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	    }
	  }
	}

	// Some basic defaults
	Connection.DEFAULT_PORT = 27017;








	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(258).Buffer))

/***/ },
/* 341 */
/***/ function(module, exports) {

	exports.setIntegerParameter = function(object, field, defaultValue) {
	  if(object[field] == null) {
	    object[field] = defaultValue;
	  } else if(typeof object[field] !== "number" && object[field] !== parseInt(object[field], 10)) {
	    throw "object field [" + field + "] must be a numeric integer value, attempted to set to [" + object[field] + "] type of [" + typeof object[field] + "]";
	  }
	}

	exports.setBooleanParameter = function(object, field, defaultValue) {
	  if(object[field] == null) {
	    object[field] = defaultValue;
	  } else if(typeof object[field] !== "boolean") {
	    throw "object field [" + field + "] must be a boolean value, attempted to set to [" + object[field] + "] type of [" + typeof object[field] + "]";
	  }
	}

	exports.setStringParameter = function(object, field, defaultValue) {
	  if(object[field] == null) {
	    object[field] = defaultValue;
	  } else if(typeof object[field] !== "string") {
	    throw "object field [" + field + "] must be a string value, attempted to set to [" + object[field] + "] type of [" + typeof object[field] + "]";
	  }
	}

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(341),
	  inherits = __webpack_require__(267).inherits,
	  net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  timers = __webpack_require__(289),
	  EventEmitter = __webpack_require__(311).EventEmitter,
	  inherits = __webpack_require__(267).inherits,
	  MongoReply = __webpack_require__(343).MongoReply,
	  Connection = __webpack_require__(340).Connection;

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	var ConnectionPool = exports.ConnectionPool = function(host, port, poolSize, bson, socketOptions) {
	  if(typeof host !== 'string') {
	    throw new Error("host must be specified [" + host + "]");
	  }

	  // Set up event emitter
	  EventEmitter.call(this);

	  // Keep all options for the socket in a specific collection allowing the user to specify the
	  // Wished upon socket connection parameters
	  this.socketOptions = typeof socketOptions === 'object' ? socketOptions : {};
	  this.socketOptions.host = host;
	  this.socketOptions.port = port;
	  this.socketOptions.domainSocket = false;
	  this.bson = bson;
	  // PoolSize is always + 1 for special reserved "measurment" socket (like ping, stats etc)
	  this.poolSize = poolSize;
	  this.minPoolSize = Math.floor(this.poolSize / 2) + 1;

	  // Check if the host is a socket
	  if(host.match(/^\//)) {
	    this.socketOptions.domainSocket = true;
	  } else if(typeof port === 'string') {
	    try { 
	      port = parseInt(port, 10); 
	    } catch(err) { 
	      new Error("port must be specified or valid integer["  + port + "]"); 
	    }
	  } else if(typeof port !== 'number') {
	    throw new Error("port must be specified ["  + port + "]");
	  }

	  // Set default settings for the socket options
	  utils.setIntegerParameter(this.socketOptions, 'timeout', 0);
	  // Delay before writing out the data to the server
	  utils.setBooleanParameter(this.socketOptions, 'noDelay', true);
	  // Delay before writing out the data to the server
	  utils.setIntegerParameter(this.socketOptions, 'keepAlive', 0);
	  // Set the encoding of the data read, default is binary == null
	  utils.setStringParameter(this.socketOptions, 'encoding', null);
	  // Allows you to set a throttling bufferSize if you need to stop overflows
	  utils.setIntegerParameter(this.socketOptions, 'bufferSize', 0);

	  // Internal structures
	  this.openConnections = [];
	  // Assign connection id's
	  this.connectionId = 0;

	  // Current index for selection of pool connection
	  this.currentConnectionIndex = 0;
	  // The pool state
	  this._poolState = 'disconnected';
	  // timeout control
	  this._timeout = false;
	  // Time to wait between connections for the pool
	  this._timeToWait = 10;
	}

	inherits(ConnectionPool, EventEmitter);

	ConnectionPool.prototype.setMaxBsonSize = function(maxBsonSize) {
	  if(maxBsonSize == null){
	    maxBsonSize = Connection.DEFAULT_MAX_BSON_SIZE;
	  }

	  for(var i = 0; i < this.openConnections.length; i++) {
	    this.openConnections[i].maxBsonSize = maxBsonSize;
	    this.openConnections[i].maxBsonSettings.maxBsonSize = maxBsonSize;
	  }
	}

	ConnectionPool.prototype.setMaxMessageSizeBytes = function(maxMessageSizeBytes) {
	  if(maxMessageSizeBytes == null){
	    maxMessageSizeBytes = Connection.DEFAULT_MAX_MESSAGE_SIZE;
	  }

	  for(var i = 0; i < this.openConnections.length; i++) {
	    this.openConnections[i].maxMessageSizeBytes = maxMessageSizeBytes;
	    this.openConnections[i].maxBsonSettings.maxMessageSizeBytes = maxMessageSizeBytes;
	  }
	}

	// Start a function
	var _connect = function(_self) {
	  // return new function() {
	    // Create a new connection instance
	    var connection = new Connection(_self.connectionId++, _self.socketOptions);
	    // Set logger on pool
	    connection.logger = _self.logger;
	    // Connect handler
	    connection.on("connect", function(err, connection) {
	      // Add connection to list of open connections
	      _self.openConnections.push(connection);
	      // If the number of open connections is equal to the poolSize signal ready pool
	      if(_self.openConnections.length === _self.poolSize && _self._poolState !== 'disconnected') {
	        // Set connected
	        _self._poolState = 'connected';
	        // Emit pool ready
	        _self.emit("poolReady");
	      } else if(_self.openConnections.length < _self.poolSize) {
	        // Wait a little bit of time to let the close event happen if the server closes the connection
	        // so we don't leave hanging connections around
	        if(typeof _self._timeToWait == 'number') {
	          setTimeout(function() {
	            // If we are still connecting (no close events fired in between start another connection)
	            if(_self._poolState == 'connecting') {
	              _connect(_self);
	            }
	          }, _self._timeToWait);
	        } else {
	          processor(function() {
	            // If we are still connecting (no close events fired in between start another connection)
	            if(_self._poolState == 'connecting') {
	              _connect(_self);
	            }
	          });
	        }
	      }
	    });

	    var numberOfErrors = 0

	    // Error handler
	    connection.on("error", function(err, connection, error_options) {
	      numberOfErrors++;
	      // If we are already disconnected ignore the event
	      if(_self._poolState != 'disconnected' && _self.listeners("error").length > 0) {
	        _self.emit("error", err, connection, error_options);
	      }

	      // Close the connection
	      connection.close();
	      // Set pool as disconnected
	      _self._poolState = 'disconnected';
	      // Stop the pool
	      _self.stop();
	    });

	    // Close handler
	    connection.on("close", function() {
	      // If we are already disconnected ignore the event
	      if(_self._poolState !== 'disconnected' && _self.listeners("close").length > 0) {
	        _self.emit("close");
	      }

	      // Set disconnected
	      _self._poolState = 'disconnected';
	      // Stop
	      _self.stop();
	    });

	    // Timeout handler
	    connection.on("timeout", function(err, connection) {
	      // If we are already disconnected ignore the event
	      if(_self._poolState !== 'disconnected' && _self.listeners("timeout").length > 0) {
	        _self.emit("timeout", err);
	      }

	      // Close the connection
	      connection.close();
	      // Set disconnected
	      _self._poolState = 'disconnected';
	      _self.stop();
	    });

	    // Parse error, needs a complete shutdown of the pool
	    connection.on("parseError", function() {
	      // If we are already disconnected ignore the event
	      if(_self._poolState !== 'disconnected' && _self.listeners("parseError").length > 0) {
	        _self.emit("parseError", new Error("parseError occured"));
	      }

	      // Set disconnected
	      _self._poolState = 'disconnected';
	      _self.stop();
	    });

	    connection.on("message", function(message) {
	      _self.emit("message", message);
	    });

	    // Start connection in the next tick
	    connection.start();
	  // }();
	}


	// Start method, will throw error if no listeners are available
	// Pass in an instance of the listener that contains the api for
	// finding callbacks for a given message etc.
	ConnectionPool.prototype.start = function() {
	  var markerDate = new Date().getTime();
	  var self = this;

	  if(this.listeners("poolReady").length == 0) {
	    throw "pool must have at least one listener ready that responds to the [poolReady] event";
	  }

	  // Set pool state to connecting
	  this._poolState = 'connecting';
	  this._timeout = false;

	  _connect(self);
	}

	// Restart a connection pool (on a close the pool might be in a wrong state)
	ConnectionPool.prototype.restart = function() {
	  // Close all connections
	  this.stop(false);
	  // Now restart the pool
	  this.start();
	}

	// Stop the connections in the pool
	ConnectionPool.prototype.stop = function(removeListeners) {
	  removeListeners = removeListeners == null ? true : removeListeners;
	  // Set disconnected
	  this._poolState = 'disconnected';

	  // Clear all listeners if specified
	  if(removeListeners) {
	    this.removeAllEventListeners();
	  }

	  // Close all connections
	  for(var i = 0; i < this.openConnections.length; i++) {
	    this.openConnections[i].close();
	  }

	  // Clean up
	  this.openConnections = [];
	}

	// Check the status of the connection
	ConnectionPool.prototype.isConnected = function() {
	  // return this._poolState === 'connected';
	  return this.openConnections.length > 0 && this.openConnections[0].isConnected();
	}

	// Checkout a connection from the pool for usage, or grab a specific pool instance
	ConnectionPool.prototype.checkoutConnection = function(id) {
	  var index = (this.currentConnectionIndex++ % (this.openConnections.length));
	  var connection = this.openConnections[index];
	  return connection;
	}

	ConnectionPool.prototype.getAllConnections = function() {
	  return this.openConnections;
	}

	// Remove all non-needed event listeners
	ConnectionPool.prototype.removeAllEventListeners = function() {
	  this.removeAllListeners("close");
	  this.removeAllListeners("error");
	  this.removeAllListeners("timeout");
	  this.removeAllListeners("connect");
	  this.removeAllListeners("end");
	  this.removeAllListeners("parseError");
	  this.removeAllListeners("message");
	  this.removeAllListeners("poolReady");
	}
























/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var Long = __webpack_require__(256).Long
	  , timers = __webpack_require__(289);

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	  Reply message from mongo db
	**/
	var MongoReply = exports.MongoReply = function() {
	  this.documents = [];
	  this.index = 0;
	};

	MongoReply.prototype.parseHeader = function(binary_reply, bson) {
	  // Unpack the standard header first
	  this.messageLength = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Fetch the request id for this reply
	  this.requestId = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Fetch the id of the request that triggered the response
	  this.responseTo = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  // Skip op-code field
	  this.index = this.index + 4 + 4;
	  // Unpack the reply message
	  this.responseFlag = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Unpack the cursor id (a 64 bit long integer)
	  var low_bits = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  var high_bits = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  this.cursorId = new Long(low_bits, high_bits);
	  // Unpack the starting from
	  this.startingFrom = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Unpack the number of objects returned
	  this.numberReturned = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	}

	MongoReply.prototype.parseBody = function(binary_reply, bson, raw, callback) {
	  raw = raw == null ? false : raw;

	  try {
	    // Let's unpack all the bson documents, deserialize them and store them
	    for(var object_index = 0; object_index < this.numberReturned; object_index++) {
	      var _options = {promoteLongs: bson.promoteLongs};
	      
	      // Read the size of the bson object
	      var bsonObjectSize = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	      
	      // If we are storing the raw responses to pipe straight through
	      if(raw) {
	        // Deserialize the object and add to the documents array
	        this.documents.push(binary_reply.slice(this.index, this.index + bsonObjectSize));
	      } else {
	        // Deserialize the object and add to the documents array
	        this.documents.push(bson.deserialize(binary_reply.slice(this.index, this.index + bsonObjectSize), _options));
	      }
	      
	      // Adjust binary index to point to next block of binary bson data
	      this.index = this.index + bsonObjectSize;
	    }
	    
	    // No error return
	    callback(null);
	  } catch(err) {
	    return callback(err);
	  }
	}

	MongoReply.prototype.is_error = function(){
	  if(this.documents.length == 1) {
	    return this.documents[0].ok == 1 ? false : true;
	  }
	  return false;
	};

	MongoReply.prototype.error_message = function() {
	  return this.documents.length == 1 && this.documents[0].ok == 1 ? '' : this.documents[0].errmsg;
	};

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var ReadPreference = __webpack_require__(308).ReadPreference
	  , Base = __webpack_require__(339).Base
	  , Server = __webpack_require__(345).Server
	  , format = __webpack_require__(267).format
	  , timers = __webpack_require__(289)
	  , inherits = __webpack_require__(267).inherits;

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	 * Mongos constructor provides a connection to a mongos proxy including failover to additional servers
	 *
	 * Options
	 *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))
	 *  - **ha** {Boolean, default:true}, turn on high availability, attempts to reconnect to down proxies
	 *  - **haInterval** {Number, default:2000}, time between each replicaset status check.
	 *
	 * @class Represents a Mongos connection with failover to backup proxies
	 * @param {Array} list of mongos server objects
	 * @param {Object} [options] additional options for the mongos connection
	 */
	var Mongos = function Mongos(servers, options) {
	  // Set up basic
	  if(!(this instanceof Mongos))
	    return new Mongos(servers, options);

	  // Set up event emitter
	  Base.call(this);

	  // Throw error on wrong setup
	  if(servers == null || !Array.isArray(servers) || servers.length == 0)
	    throw new Error("At least one mongos proxy must be in the array");

	  // Ensure we have at least an empty options object
	  this.options = options == null ? {} : options;
	  // Set default connection pool options
	  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};
	  // Enabled ha
	  this.haEnabled = this.options['ha'] == null ? true : this.options['ha'];
	  this._haInProgress = false;
	  // How often are we checking for new servers in the replicaset
	  this.mongosStatusCheckInterval = this.options['haInterval'] == null ? 1000 : this.options['haInterval'];
	  // Save all the server connections
	  this.servers = servers;
	  // Servers we need to attempt reconnect with
	  this.downServers = {};
	  // Servers that are up
	  this.upServers = {};
	  // Up servers by ping time
	  this.upServersByUpTime = {};
	  // Emit open setup
	  this.emitOpen = this.options.emitOpen || true;
	  // Just contains the current lowest ping time and server
	  this.lowestPingTimeServer = null;
	  this.lowestPingTime = 0;
	  // Connection timeout
	  this._connectTimeoutMS = this.socketOptions.connectTimeoutMS
	    ? this.socketOptions.connectTimeoutMS
	    : 1000;

	  // Add options to servers
	  for(var i = 0; i < this.servers.length; i++) {
	    var server = this.servers[i];
	    server._callBackStore = this._callBackStore;
	    server.auto_reconnect = false;
	    // Default empty socket options object
	    var socketOptions = {host: server.host, port: server.port};
	    // If a socket option object exists clone it
	    if(this.socketOptions != null) {
	      var keys = Object.keys(this.socketOptions);
	      for(var k = 0; k < keys.length;k++) socketOptions[keys[i]] = this.socketOptions[keys[i]];
	    }

	    // Set socket options
	    server.socketOptions = socketOptions;
	  }
	}

	/**
	 * @ignore
	 */
	inherits(Mongos, Base);

	/**
	 * @ignore
	 */
	Mongos.prototype.isMongos = function() {
	  return true;
	}

	/**
	 * @ignore
	 */
	Mongos.prototype.connect = function(db, options, callback) {
	  if('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  var self = this;

	  // Keep reference to parent
	  this.db = db;
	  // Set server state to connecting
	  this._serverState = 'connecting';
	  // Number of total servers that need to initialized (known servers)
	  this._numberOfServersLeftToInitialize = this.servers.length;  
	  // Connect handler
	  var connectHandler = function(_server) {
	    return function(err, result) {
	      self._numberOfServersLeftToInitialize = self._numberOfServersLeftToInitialize - 1;

	      // Add the server to the list of servers that are up
	      if(!err) {
	        self.upServers[format("%s:%s", _server.host, _server.port)] = _server;
	      }

	      // We are done connecting
	      if(self._numberOfServersLeftToInitialize == 0) {
	        // Start ha function if it exists
	        if(self.haEnabled) {
	          // Setup the ha process
	          if(self._replicasetTimeoutId != null) clearInterval(self._replicasetTimeoutId);
	          self._replicasetTimeoutId = setInterval(self.mongosCheckFunction, self.mongosStatusCheckInterval);
	        }

	        // Set the mongos to connected
	        self._serverState = "connected";

	        // Emit the open event
	        if(self.emitOpen)
	          self._emitAcrossAllDbInstances(self, null, "open", null, null, null);        

	        self._emitAcrossAllDbInstances(self, null, "fullsetup", null, null, null);      
	        // Callback
	        callback(null, self.db);
	      }
	    }
	  };

	  // Error handler
	  var errorOrCloseHandler = function(_server) {
	    return function(err, result) {
	      // Execute all the callbacks with errors
	      self.__executeAllCallbacksWithError(err);
	      // Check if we have the server
	      var found = false;
	      
	      // Get the server name
	      var server_name = format("%s:%s", _server.host, _server.port);
	      // Add the downed server
	      self.downServers[server_name] = _server;
	      // Remove the current server from the list
	      delete self.upServers[server_name]; 

	      // Emit close across all the attached db instances
	      if(Object.keys(self.upServers).length == 0) {
	        self._emitAcrossAllDbInstances(self, null, "close", new Error("mongos disconnected, no valid proxies contactable over tcp"), null, null);
	      }
	    }
	  }

	  // Mongo function
	  this.mongosCheckFunction = function() {
	    // Set as not waiting for check event 
	    self._haInProgress = true;
	    
	    // Servers down
	    var numberOfServersLeft = Object.keys(self.downServers).length;
	    
	    // Check downed servers
	    if(numberOfServersLeft > 0) {
	      for(var name in self.downServers) {
	        // Pop a downed server      
	        var downServer = self.downServers[name];
	        // Set up the connection options for a Mongos
	        var options = {
	          auto_reconnect: false,
	          returnIsMasterResults: true,
	          slaveOk: true,
	          poolSize: downServer.poolSize,
	          socketOptions: { 
	            connectTimeoutMS: self._connectTimeoutMS,
	            socketTimeoutMS: self._socketTimeoutMS
	          }          
	        }

	        // Create a new server object
	        var newServer = new Server(downServer.host, downServer.port, options);
	        // Setup the connection function
	        var connectFunction = function(_db, _server, _options, _callback)  {
	          return function() {
	            // Attempt to connect
	            _server.connect(_db, _options, function(err, result) {
	              numberOfServersLeft = numberOfServersLeft - 1;

	              if(err) {
	                return _callback(err, _server);
	              } else {                
	                // Set the new server settings
	                _server._callBackStore = self._callBackStore;

	                // Add server event handlers
	                _server.on("close", errorOrCloseHandler(_server));
	                _server.on("timeout", errorOrCloseHandler(_server));
	                _server.on("error", errorOrCloseHandler(_server));
	                
	                // Get a read connection
	                var _connection = _server.checkoutReader();
	                // Get the start time
	                var startTime = new Date().getTime();
	                
	                // Execute ping command to mark each server with the expected times
	                self.db.command({ping:1}
	                  , {failFast:true, connection:_connection}, function(err, result) {
	                  // Get the start time
	                  var endTime = new Date().getTime();
	                  // Mark the server with the ping time
	                  _server.runtimeStats['pingMs'] = endTime - startTime;
	                  // Execute any waiting reads
	                  self._commandsStore.execute_writes();   
	                  self._commandsStore.execute_queries();   
	                  // Callback
	                  return _callback(null, _server);
	                });
	              }
	            });
	          }
	        } 

	        // Attempt to connect to the database
	        connectFunction(self.db, newServer, options, function(err, _server) {
	          // If we have an error
	          if(err) {
	            self.downServers[format("%s:%s", _server.host, _server.port)] = _server;
	          }

	          // Connection function
	          var connectionFunction = function(_auth, _connection, _callback) {
	            var pending = _auth.length();

	            for(var j = 0; j < pending; j++) {
	              // Get the auth object
	              var _auth = _auth.get(j);
	              // Unpack the parameter
	              var username = _auth.username;
	              var password = _auth.password;
	              var options = { 
	                  authMechanism: _auth.authMechanism
	                , authSource: _auth.authdb
	                , connection: _connection 
	              };

	              // If we have changed the service name
	              if(_auth.gssapiServiceName) 
	                options.gssapiServiceName = _auth.gssapiServiceName;

	              // Hold any error
	              var _error = null;
	              // Authenticate against the credentials
	              self.db.authenticate(username, password, options, function(err, result) {
	                _error = err != null ? err : _error;
	                // Adjust the pending authentication
	                pending = pending - 1;
	                // Finished up
	                if(pending == 0) _callback(_error ? _error : null, _error ? false : true);
	              });
	            }
	          }

	          // Run auths against the connections
	          if(self.auth.length() > 0) {
	            var connections = _server.allRawConnections();
	            var pendingAuthConn = connections.length;

	            // No connections we are done
	            if(connections.length == 0) {
	              // Set ha done
	              if(numberOfServersLeft == 0) {
	                self._haInProgress = false;
	              }              
	            }

	            // Final error object
	            var finalError = null;
	            // Go over all the connections
	            for(var j = 0; j < connections.length; j++) {
	              
	              // Execute against all the connections
	              connectionFunction(self.auth, connections[j], function(err, result) {
	                // Pending authentication
	                pendingAuthConn = pendingAuthConn - 1 ;

	                // Save error if any
	                finalError = err ? err : finalError;

	                // If we are done let's finish up
	                if(pendingAuthConn == 0) {
	                  // Set ha done
	                  if(numberOfServersLeft == 0) {
	                    self._haInProgress = false;
	                  }

	                  if(!err) {
	                    add_server(self, _server);
	                  }

	                  // Execute any waiting reads
	                  self._commandsStore.execute_writes();   
	                  self._commandsStore.execute_queries();                  
	                }
	              });
	            }
	          } else {
	            if(!err) {
	              add_server(self, _server);
	            }

	            // Set ha done
	            if(numberOfServersLeft == 0) {
	              self._haInProgress = false;
	              // Execute any waiting reads
	              self._commandsStore.execute_writes();   
	              self._commandsStore.execute_queries();   
	            }
	          }
	        })();
	      }
	    } else {
	      self._haInProgress = false;
	    }
	  }

	  // Connect all the server instances
	  for(var i = 0; i < this.servers.length; i++) {
	    // Get the connection
	    var server = this.servers[i];
	    server.mongosInstance = this;
	    // Add server event handlers
	    server.on("close", errorOrCloseHandler(server));
	    server.on("timeout", errorOrCloseHandler(server));
	    server.on("error", errorOrCloseHandler(server));
	    
	    // Configuration
	    var options = {
	      slaveOk: true,
	      poolSize: server.poolSize,
	      socketOptions: { connectTimeoutMS: self._connectTimeoutMS },
	      returnIsMasterResults: true
	    }        

	    // Connect the instance
	    server.connect(self.db, options, connectHandler(server));
	  }
	}

	/**
	 * @ignore
	 * Add a server to the list of up servers and sort them by ping time
	 */
	var add_server = function(self, _server) {
	  var server_key = format("%s:%s", _server.host, _server.port);
	  // Push to list of valid server
	  self.upServers[server_key] = _server;
	  // Remove the server from the list of downed servers
	  delete self.downServers[server_key];              

	  // Sort the keys by ping time
	  var keys = Object.keys(self.upServers);
	  var _upServersSorted = {};
	  var _upServers = []
	  
	  // Get all the servers
	  for(var name in self.upServers) {
	    _upServers.push(self.upServers[name]);
	  }

	  // Sort all the server
	  _upServers.sort(function(a, b) {
	    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];
	  });

	  // Rebuild the upServer
	  for(var i = 0; i < _upServers.length; i++) {
	    _upServersSorted[format("%s:%s", _upServers[i].host, _upServers[i].port)] = _upServers[i];
	  }

	  // Set the up servers
	  self.upServers = _upServersSorted;
	}

	/**
	 * @ignore
	 * Just return the currently picked active connection
	 */
	Mongos.prototype.allServerInstances = function() {
	  return this.servers;
	}

	/**
	 * Always ourselves
	 * @ignore
	 */
	Mongos.prototype.setReadPreference = function() {}

	/**
	 * @ignore
	 */
	Mongos.prototype.allRawConnections = function() {
	  // Neeed to build a complete list of all raw connections, start with master server
	  var allConnections = [];
	  // Get all connected connections
	  for(var name in this.upServers) {
	    allConnections = allConnections.concat(this.upServers[name].allRawConnections());
	  }
	  // Return all the conections
	  return allConnections;
	}

	/**
	 * @ignore
	 */
	Mongos.prototype.isConnected = function() {
	  return Object.keys(this.upServers).length > 0;
	}

	/**
	 * @ignore
	 */
	Mongos.prototype.isAutoReconnect = function() {
	  return true;
	}

	/**
	 * @ignore
	 */
	Mongos.prototype.canWrite = Mongos.prototype.isConnected;

	/**
	 * @ignore
	 */
	Mongos.prototype.canRead = Mongos.prototype.isConnected;

	/**
	 * @ignore
	 */
	Mongos.prototype.isDestroyed = function() {
	  return this._serverState == 'destroyed';
	}

	/**
	 * @ignore
	 */
	Mongos.prototype.checkoutWriter = function() {
	  // Checkout a writer
	  var keys = Object.keys(this.upServers);
	  // console.dir("============================ checkoutWriter :: " + keys.length)
	  if(keys.length == 0) return null;
	  // console.log("=============== checkoutWriter :: " + this.upServers[keys[0]].checkoutWriter().socketOptions.port)
	  return this.upServers[keys[0]].checkoutWriter();
	}

	/**
	 * @ignore
	 */
	Mongos.prototype.checkoutReader = function(read) {
	  // console.log("=============== checkoutReader :: read :: " + read);
	  // If read is set to null default to primary
	  read = read || 'primary'
	  // If we have a read preference object unpack it
	  if(read != null && typeof read == 'object' && read['_type'] == 'ReadPreference') {
	    // Validate if the object is using a valid mode
	    if(!read.isValid()) throw new Error("Illegal readPreference mode specified, " + read.mode);
	  } else if(!ReadPreference.isValid(read)) {
	    throw new Error("Illegal readPreference mode specified, " + read);
	  }

	  // Checkout a writer
	  var keys = Object.keys(this.upServers);
	  if(keys.length == 0) return null;
	  // console.log("=============== checkoutReader :: " + this.upServers[keys[0]].checkoutWriter().socketOptions.port)
	  // console.dir(this._commandsStore.commands)
	  return this.upServers[keys[0]].checkoutWriter();
	}

	/**
	 * @ignore
	 */
	Mongos.prototype.close = function(callback) {
	  var self = this;
	  // Set server status as disconnected
	  this._serverState = 'destroyed';
	  // Number of connections to close
	  var numberOfConnectionsToClose = self.servers.length;
	  // If we have a ha process running kill it
	  if(self._replicasetTimeoutId != null) clearInterval(self._replicasetTimeoutId);
	  self._replicasetTimeoutId = null;
	  
	  // Emit close event
	  processor(function() {
	    self._emitAcrossAllDbInstances(self, null, "close", null, null, true)    
	  });

	  // Close all the up servers
	  for(var name in this.upServers) {
	    this.upServers[name].close(function(err, result) {
	      numberOfConnectionsToClose = numberOfConnectionsToClose - 1;

	      // Callback if we have one defined
	      if(numberOfConnectionsToClose == 0 && typeof callback == 'function') {
	        callback(null);
	      }
	    });
	  }
	}

	/**
	 * @ignore
	 * Return the used state
	 */
	Mongos.prototype._isUsed = function() {
	  return this._used;
	}

	exports.Mongos = Mongos;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var Connection = __webpack_require__(340).Connection,
	  ReadPreference = __webpack_require__(308).ReadPreference,
	  DbCommand = __webpack_require__(287).DbCommand,
	  MongoReply = __webpack_require__(343).MongoReply,
	  ConnectionPool = __webpack_require__(342).ConnectionPool,
	  EventEmitter = __webpack_require__(311).EventEmitter,
	  Base = __webpack_require__(339).Base,
	  format = __webpack_require__(267).format,
	  utils = __webpack_require__(288),
	  timers = __webpack_require__(289),
	  inherits = __webpack_require__(267).inherits;

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	 * Class representing a single MongoDB Server connection
	 *
	 * Options
	 *  - **readPreference** {String, default:null}, set's the read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)
	 *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)
	 *  - **sslValidate** {Boolean, default:false}, validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCA** {Array, default:null}, Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCert** {Buffer/String, default:null}, String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslKey** {Buffer/String, default:null}, String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslPass** {Buffer/String, default:null}, String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **poolSize** {Number, default:5}, number of connections in the connection pool, set to 5 as default for legacy reasons.
	 *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))
	 *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.
	 *  - **auto_reconnect** {Boolean, default:false}, reconnect on error.
	 *  - **disableDriverBSONSizeCheck** {Boolean, default:false}, force the server to error if the BSON message is to big
	 *
	 * @class Represents a Server connection.
	 * @param {String} host the server host
	 * @param {Number} port the server port
	 * @param {Object} [options] optional options for insert command
	 */
	function Server(host, port, options) {
	  // Set up Server instance
	  if(!(this instanceof Server)) return new Server(host, port, options);

	  // Set up event emitter
	  Base.call(this);

	  // Ensure correct values
	  if(port != null && typeof port == 'object') {
	    options = port;
	    port = Connection.DEFAULT_PORT;
	  }

	  var self = this;
	  this.host = host;
	  this.port = port;
	  this.options = options == null ? {} : options;
	  this.internalConnection;
	  this.internalMaster = false;
	  this.connected = false;  
	  this.poolSize = this.options.poolSize == null ? 5 : this.options.poolSize;
	  this.disableDriverBSONSizeCheck = this.options.disableDriverBSONSizeCheck != null ? this.options.disableDriverBSONSizeCheck : false;
	  this._used = false;
	  this.replicasetInstance = null;

	  // Emit open setup
	  this.emitOpen = this.options.emitOpen || true;
	  // Set ssl as connection method
	  this.ssl = this.options.ssl == null ? false : this.options.ssl;
	  // Set ssl validation
	  this.sslValidate = this.options.sslValidate == null ? false : this.options.sslValidate;
	  // Set the ssl certificate authority (array of Buffer/String keys)
	  this.sslCA = Array.isArray(this.options.sslCA) ? this.options.sslCA : null;
	  // Certificate to present to the server
	  this.sslCert = this.options.sslCert;
	  // Certificate private key if in separate file
	  this.sslKey = this.options.sslKey;
	  // Password to unlock private key
	  this.sslPass = this.options.sslPass;
	  // Set server name
	  this.name = format("%s:%s", host, port);

	  // Ensure we are not trying to validate with no list of certificates
	  if(this.sslValidate && (!Array.isArray(this.sslCA) || this.sslCA.length == 0)) {
	    throw new Error("The driver expects an Array of CA certificates in the sslCA parameter when enabling sslValidate");
	  }

	  // Get the readPreference
	  var readPreference = this.options['readPreference'];
	  // If readPreference is an object get the mode string
	  var validateReadPreference = readPreference != null && typeof readPreference == 'object' ? readPreference.mode : readPreference;
	  // Read preference setting
	  if(validateReadPreference != null) {
	    if(validateReadPreference != ReadPreference.PRIMARY && validateReadPreference != ReadPreference.SECONDARY && validateReadPreference != ReadPreference.NEAREST
	      && validateReadPreference != ReadPreference.SECONDARY_PREFERRED && validateReadPreference != ReadPreference.PRIMARY_PREFERRED) {
	        throw new Error("Illegal readPreference mode specified, " + validateReadPreference);
	    }

	    // Set read Preference
	    this._readPreference = readPreference;
	  } else {
	    this._readPreference = null;
	  }

	  // Contains the isMaster information returned from the server
	  this.isMasterDoc;

	  // Set default connection pool options
	  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};
	  if(this.disableDriverBSONSizeCheck) this.socketOptions.disableDriverBSONSizeCheck = this.disableDriverBSONSizeCheck;

	  // Set ssl up if it's defined
	  if(this.ssl) {
	    this.socketOptions.ssl = true;
	    // Set ssl validation
	    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;
	    // Set the ssl certificate authority (array of Buffer/String keys)
	    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;
	    // Set certificate to present
	    this.socketOptions.sslCert = this.sslCert;
	    // Set certificate to present
	    this.socketOptions.sslKey = this.sslKey;
	    // Password to unlock private key
	    this.socketOptions.sslPass = this.sslPass;
	  }

	  // Set up logger if any set
	  this.logger = this.options.logger != null
	    && (typeof this.options.logger.debug == 'function')
	    && (typeof this.options.logger.error == 'function')
	    && (typeof this.options.logger.log == 'function')
	      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};

	  // Just keeps list of events we allow
	  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[]};
	  // Internal state of server connection
	  this._serverState = 'disconnected';
	  // Contains state information about server connection
	  this._state = {'runtimeStats': {'queryStats':new RunningStats()}};
	  // Do we record server stats or not
	  this.recordQueryStats = false;
	};

	/**
	 * @ignore
	 */
	inherits(Server, Base);

	//
	//  Deprecated, USE ReadPreferences class
	//
	Server.READ_PRIMARY = ReadPreference.PRIMARY;
	Server.READ_SECONDARY = ReadPreference.SECONDARY_PREFERRED;
	Server.READ_SECONDARY_ONLY = ReadPreference.SECONDARY;

	/**
	 * Always ourselves
	 * @ignore
	 */
	Server.prototype.setReadPreference = function(readPreference) {
	  this._readPreference = readPreference;  
	}

	/**
	 * @ignore
	 */
	Server.prototype.isMongos = function() {
	  return this.isMasterDoc != null && this.isMasterDoc['msg'] == "isdbgrid" ? true : false;
	}

	/**
	 * @ignore
	 */
	Server.prototype._isUsed = function() {
	  return this._used;
	}

	/**
	 * @ignore
	 */
	Server.prototype.close = function(callback) {
	  // Set server status as disconnected
	  this._serverState = 'destroyed';
	  // Remove all local listeners
	  this.removeAllListeners();

	  if(this.connectionPool != null) {
	    // Remove all the listeners on the pool so it does not fire messages all over the place
	    this.connectionPool.removeAllEventListeners();
	    // Close the connection if it's open
	    this.connectionPool.stop(true);
	  }

	  // Emit close event
	  if(this.db && !this.isSetMember()) {
	    var self = this;
	    processor(function() {
	      self._emitAcrossAllDbInstances(self, null, "close", null, null, true)
	    })
	  }

	  // Peform callback if present
	  if(typeof callback === 'function') callback(null);
	};

	Server.prototype.isDestroyed = function() {
	  return this._serverState == 'destroyed';
	}

	/**
	 * @ignore
	 */
	Server.prototype.isConnected = function() {
	  return this.connectionPool != null && this.connectionPool.isConnected();
	}

	/**
	 * @ignore
	 */
	Server.prototype.canWrite = Server.prototype.isConnected;
	Server.prototype.canRead = Server.prototype.isConnected;

	Server.prototype.isAutoReconnect = function() {
	  if(this.isSetMember()) return false;
	  return this.options.auto_reconnect != null ? this.options.auto_reconnect : true;
	}

	/**
	 * @ignore
	 */
	Server.prototype.allServerInstances = function() {
	  return [this];
	}

	/**
	 * @ignore
	 */
	Server.prototype.isSetMember = function() {
	  return this.replicasetInstance != null || this.mongosInstance != null;
	}

	/**
	 * Assigns a replica set to this `server`.
	 *
	 * @param {ReplSet} replset
	 * @ignore
	 */
	Server.prototype.assignReplicaSet = function (replset) {
	  this.replicasetInstance = replset;
	  this.inheritReplSetOptionsFrom(replset);
	  this.enableRecordQueryStats(replset.recordQueryStats);
	}

	/**
	 * Takes needed options from `replset` and overwrites
	 * our own options.
	 *
	 * @param {ReplSet} replset
	 * @ignore
	 */
	Server.prototype.inheritReplSetOptionsFrom = function (replset) {
	  this.socketOptions = {};
	  this.socketOptions.connectTimeoutMS = replset.options.socketOptions.connectTimeoutMS || 30000;

	  if(replset.options.ssl) {
	    // Set ssl on
	    this.socketOptions.ssl = true;
	    // Set ssl validation
	    this.socketOptions.sslValidate = replset.options.sslValidate == null ? false : replset.options.sslValidate;
	    // Set the ssl certificate authority (array of Buffer/String keys)
	    this.socketOptions.sslCA = Array.isArray(replset.options.sslCA) ? replset.options.sslCA : null;
	    // Set certificate to present
	    this.socketOptions.sslCert = replset.options.sslCert;
	    // Set certificate to present
	    this.socketOptions.sslKey = replset.options.sslKey;
	    // Password to unlock private key
	    this.socketOptions.sslPass = replset.options.sslPass;
	  }

	  // If a socket option object exists clone it
	  if(utils.isObject(replset.options.socketOptions)) {
	    var keys = Object.keys(replset.options.socketOptions);
	    for(var i = 0; i < keys.length; i++)
	      this.socketOptions[keys[i]] = replset.options.socketOptions[keys[i]];
	  }
	}

	/**
	 * Opens this server connection.
	 *
	 * @ignore
	 */
	Server.prototype.connect = function(dbInstance, options, callback) {
	  if('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  var self = this;
	  // Save the options
	  this.options = options;

	  // Currently needed to work around problems with multiple connections in a pool with ssl
	  // TODO fix if possible
	  if(this.ssl == true) {
	    // Set up socket options for ssl
	    this.socketOptions.ssl = true;
	    // Set ssl validation
	    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;
	    // Set the ssl certificate authority (array of Buffer/String keys)
	    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;
	    // Set certificate to present
	    this.socketOptions.sslCert = this.sslCert;
	    // Set certificate to present
	    this.socketOptions.sslKey = this.sslKey;
	    // Password to unlock private key
	    this.socketOptions.sslPass = this.sslPass;
	  }

	  // Let's connect
	  var server = this;
	  // Let's us override the main receiver of events
	  var eventReceiver = options.eventReceiver != null ? options.eventReceiver : this;
	  // Save reference to dbInstance
	  this.db = dbInstance;  // `db` property matches ReplSet and Mongos
	  this.dbInstances = [dbInstance];

	  // Force connection pool if there is one
	  if(server.connectionPool) server.connectionPool.stop();
	  // Set server state to connecting
	  this._serverState = 'connecting';

	  if(server.connectionPool != null) {
	    // Remove all the listeners on the pool so it does not fire messages all over the place
	    this.connectionPool.removeAllEventListeners();
	    // Close the connection if it's open
	    this.connectionPool.stop(true);    
	  }

	  this.connectionPool = new ConnectionPool(this.host, this.port, this.poolSize, dbInstance.bson, this.socketOptions);
	  var connectionPool = this.connectionPool;
	  // If ssl is not enabled don't wait between the pool connections
	  if(this.ssl == null || !this.ssl) connectionPool._timeToWait = null;
	  // Set logger on pool
	  connectionPool.logger = this.logger;
	  connectionPool.bson = dbInstance.bson;

	  // Set basic parameters passed in
	  var returnIsMasterResults = options.returnIsMasterResults == null ? false : options.returnIsMasterResults;

	  // Create a default connect handler, overriden when using replicasets
	  var connectCallback = function(_server) {
	    return function(err, reply) {  
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      
	      // Assign the server
	      _server = _server != null ? _server : server;
	      
	      // If something close down the connection and removed the callback before
	      // proxy killed connection etc, ignore the erorr as close event was isssued
	      if(err != null && internalCallback == null) return;
	      // Internal callback
	      if(err != null) return internalCallback(err, null, _server);
	      _server.master = reply.documents[0].ismaster == 1 ? true : false;
	      _server.connectionPool.setMaxBsonSize(reply.documents[0].maxBsonObjectSize);
	      _server.connectionPool.setMaxMessageSizeBytes(reply.documents[0].maxMessageSizeBytes);
	      // Set server state to connEcted
	      _server._serverState = 'connected';
	      // Set server as connected
	      _server.connected = true;
	      // Save document returned so we can query it
	      _server.isMasterDoc = reply.documents[0];
	      
	      if(self.emitOpen) {        
	        _server._emitAcrossAllDbInstances(_server, eventReceiver, "open", null, returnIsMasterResults ? reply : null, null);        
	        self.emitOpen = false;
	      } else {
	        _server._emitAcrossAllDbInstances(_server, eventReceiver, "reconnect", null, returnIsMasterResults ? reply : null, null);        
	      }

	      // If we have it set to returnIsMasterResults
	      if(returnIsMasterResults) {
	        internalCallback(null, reply, _server);
	      } else {
	        internalCallback(null, dbInstance, _server);
	      }
	    }
	  };

	  // Let's us override the main connect callback
	  var connectHandler = options.connectHandler == null ? connectCallback(server) : options.connectHandler;

	  // Set up on connect method
	  connectionPool.on("poolReady", function() {
	    // Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)
	    var db_command = DbCommand.NcreateIsMasterCommand(dbInstance, dbInstance.databaseName);
	    // Check out a reader from the pool
	    var connection = connectionPool.checkoutConnection();
	    // Register handler for messages
	    server._registerHandler(db_command, false, connection, connectHandler);
	    // Write the command out
	    connection.write(db_command);
	  })

	  // Set up item connection
	  connectionPool.on("message", function(message) {
	    // Attempt to parse the message
	    try {
	      // Create a new mongo reply
	      var mongoReply = new MongoReply()
	      // Parse the header
	      mongoReply.parseHeader(message, connectionPool.bson)

	      // If message size is not the same as the buffer size
	      // something went terribly wrong somewhere
	      if(mongoReply.messageLength != message.length) {
	        // Emit the error
	        if(eventReceiver.listeners("error") && eventReceiver.listeners("error").length > 0) eventReceiver.emit("error", new Error("bson length is different from message length"), server);
	        // Remove all listeners
	        server.removeAllListeners();
	      } else {
	        var startDate = new Date().getTime();

	        // Callback instance
	        var callbackInfo = server._findHandler(mongoReply.responseTo.toString());

	        // The command executed another request, log the handler again under that request id
	        if(mongoReply.requestId > 0 && mongoReply.cursorId.toString() != "0" 
	          && callbackInfo && callbackInfo.info && callbackInfo.info.exhaust) {
	            server._reRegisterHandler(mongoReply.requestId, callbackInfo);
	        }
	        // Parse the body
	        mongoReply.parseBody(message, connectionPool.bson, callbackInfo.info.raw, function(err) {
	          if(err != null) {
	            // If pool connection is already closed
	            if(server._serverState === 'disconnected') return;
	            // Set server state to disconnected
	            server._serverState = 'disconnected';
	            // Remove all listeners and close the connection pool
	            server.removeAllListeners();
	            connectionPool.stop(true);

	            // If we have a callback return the error
	            if(typeof callback === 'function') {
	              // ensure no callbacks get called twice
	              var internalCallback = callback;
	              callback = null;
	              // Perform callback
	              internalCallback(new Error("connection closed due to parseError"), null, server);
	            } else if(server.isSetMember()) {
	              if(server.listeners("parseError") && server.listeners("parseError").length > 0) server.emit("parseError", new Error("connection closed due to parseError"), server);
	            } else {
	              if(eventReceiver.listeners("parseError") && eventReceiver.listeners("parseError").length > 0) eventReceiver.emit("parseError", new Error("connection closed due to parseError"), server);
	            }

	            // If we are a single server connection fire errors correctly
	            if(!server.isSetMember()) {
	              // Fire all callback errors
	              server.__executeAllCallbacksWithError(new Error("connection closed due to parseError"));
	              // Emit error
	              server._emitAcrossAllDbInstances(server, eventReceiver, "parseError", server, null, true);
	            }
	            // Short cut
	            return;
	          }

	          // Let's record the stats info if it's enabled
	          if(server.recordQueryStats == true && server._state['runtimeStats'] != null
	            && server._state.runtimeStats['queryStats'] instanceof RunningStats) {
	            // Add data point to the running statistics object
	            server._state.runtimeStats.queryStats.push(new Date().getTime() - callbackInfo.info.start);
	          }

	          // Dispatch the call
	          server._callHandler(mongoReply.responseTo, mongoReply, null);

	          // If we have an error about the server not being master or primary
	          if((mongoReply.responseFlag & (1 << 1)) != 0
	            && mongoReply.documents[0].code
	            && mongoReply.documents[0].code == 13436) {
	              server.close();
	          }
	        });
	      }
	    } catch (err) {
	      // Throw error in next tick
	      processor(function() {
	        throw err;
	      })
	    }
	  });

	  // Handle timeout
	  connectionPool.on("timeout", function(err) {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // If we have a callback return the error
	    if(typeof callback === 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(err, null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("timeout") && server.listeners("timeout").length > 0) server.emit("timeout", err, server);
	    } else {
	      if(eventReceiver.listeners("timeout") && eventReceiver.listeners("timeout").length > 0) eventReceiver.emit("timeout", err, server);
	    }

	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(err);
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "timeout", err, server, true);
	    }

	    // If we have autoConnect enabled let's fire up an attempt to reconnect
	    if(server.isAutoReconnect() 
	      && !server.isSetMember()
	      && (server._serverState != 'destroyed')
	      && !server._reconnectInProgreess) {
	      // Set the number of retries
	      server._reconnect_retries = server.db.numberOfRetries;
	      // Attempt reconnect
	      server._reconnectInProgreess = true;
	      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	    }    
	  });

	  // Handle errors
	  connectionPool.on("error", function(message, connection, error_options) {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // Error message
	    var error_message = new Error(message && message.err ? message.err : message);
	    // Error message coming from ssl
	    if(error_options && error_options.ssl) error_message.ssl = true;

	    // If we have a callback return the error
	    if(typeof callback === 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(error_message, null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("error") && server.listeners("error").length > 0) server.emit("error", error_message, server);
	    } else {
	      if(eventReceiver.listeners("error") && eventReceiver.listeners("error").length > 0) eventReceiver.emit("error", error_message, server);
	    }

	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(error_message);
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "error", error_message, server, true);
	    }

	    // If we have autoConnect enabled let's fire up an attempt to reconnect
	    if(server.isAutoReconnect() 
	      && !server.isSetMember()
	      && (server._serverState != 'destroyed')
	      && !server._reconnectInProgreess) {

	      // Set the number of retries
	      server._reconnect_retries = server.db.numberOfRetries;
	      // Attempt reconnect
	      server._reconnectInProgreess = true;
	      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	    }    
	  });

	  // Handle close events
	  connectionPool.on("close", function() {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // If we have a callback return the error
	    if(typeof callback == 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(new Error("connection closed"), null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("close") && server.listeners("close").length > 0) server.emit("close", new Error("connection closed"), server);
	    } else {
	      if(eventReceiver.listeners("close") && eventReceiver.listeners("close").length > 0) eventReceiver.emit("close", new Error("connection closed"), server);
	    }

	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(new Error("connection closed"));
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "close", server, null, true);
	    }

	    // If we have autoConnect enabled let's fire up an attempt to reconnect
	    if(server.isAutoReconnect() 
	      && !server.isSetMember()
	      && (server._serverState != 'destroyed')
	      && !server._reconnectInProgreess) {

	      // Set the number of retries
	      server._reconnect_retries = server.db.numberOfRetries;  
	      // Attempt reconnect
	      server._reconnectInProgreess = true;
	      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	    }    
	  });

	  /**
	   * @ignore
	   */
	  var __attemptReconnect = function(server) {
	    return function() {
	      // Attempt reconnect
	      server.connect(server.db, server.options, function(err, result) {
	        server._reconnect_retries = server._reconnect_retries - 1;

	        if(err) {
	          // Retry
	          if(server._reconnect_retries == 0 || server._serverState == 'destroyed') {
	            server._serverState = 'connected';
	            server._reconnectInProgreess = false
	            // Fire all callback errors
	            return server.__executeAllCallbacksWithError(new Error("failed to reconnect to server"));
	          } else {
	            return setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	          }
	        } else {
	          // Set as authenticating (isConnected will be false)
	          server._serverState = 'authenticating';
	          // Apply any auths, we don't try to catch any errors here
	          // as there are nowhere to simply propagate them to
	          self._apply_auths(server.db, function(err, result) {            
	            server._serverState = 'connected';
	            server._reconnectInProgreess = false;
	            server._commandsStore.execute_queries();
	            server._commandsStore.execute_writes();
	          });
	        } 
	      });      
	    }
	  }

	  // If we have a parser error we are in an unknown state, close everything and emit
	  // error
	  connectionPool.on("parseError", function(message) {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // If we have a callback return the error
	    if(typeof callback === 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(new Error("connection closed due to parseError"), null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("parseError") && server.listeners("parseError").length > 0) server.emit("parseError", new Error("connection closed due to parseError"), server);
	    } else {
	      if(eventReceiver.listeners("parseError") && eventReceiver.listeners("parseError").length > 0) eventReceiver.emit("parseError", new Error("connection closed due to parseError"), server);
	    }

	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(new Error("connection closed due to parseError"));
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "parseError", server, null, true);
	    }
	  });

	  // Boot up connection poole, pass in a locator of callbacks
	  connectionPool.start();
	}

	/**
	 * @ignore
	 */
	Server.prototype.allRawConnections = function() {
	  return this.connectionPool.getAllConnections();
	}

	/**
	 * Check if a writer can be provided
	 * @ignore
	 */
	var canCheckoutWriter = function(self, read) {
	  // We cannot write to an arbiter or secondary server
	  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true) {
	    return new Error("Cannot write to an arbiter");
	  } if(self.isMasterDoc && self.isMasterDoc['secondary'] == true) {
	    return new Error("Cannot write to a secondary");
	  } else if(read == true && self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {
	    return new Error("Cannot read from primary when secondary only specified");
	  } else if(!self.isMasterDoc) {
	    return new Error("Cannot determine state of server");
	  }

	  // Return no error
	  return null;
	}

	/**
	 * @ignore
	 */
	Server.prototype.checkoutWriter = function(read) {
	  if(read == true) return this.connectionPool.checkoutConnection();
	  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)
	  var result = canCheckoutWriter(this, read);
	  // If the result is null check out a writer
	  if(result == null && this.connectionPool != null) {
	    return this.connectionPool.checkoutConnection();
	  } else if(result == null) {
	    return null;
	  } else {
	    return result;
	  }
	}

	/**
	 * Check if a reader can be provided
	 * @ignore
	 */
	var canCheckoutReader = function(self) {
	  // We cannot write to an arbiter or secondary server
	  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true) {
	    return new Error("Cannot write to an arbiter");
	  } else if(self._readPreference != null) {
	    // If the read preference is Primary and the instance is not a master return an error
	    if((self._readPreference == ReadPreference.PRIMARY) && self.isMasterDoc && self.isMasterDoc['ismaster'] != true) {
	      return new Error("Read preference is Server.PRIMARY and server is not master");
	    } else if(self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {
	      return new Error("Cannot read from primary when secondary only specified");
	    }
	  } else if(!self.isMasterDoc) {
	    return new Error("Cannot determine state of server");
	  }

	  // Return no error
	  return null;
	}

	/**
	 * @ignore
	 */
	Server.prototype.checkoutReader = function(read) {
	  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)
	  var result = canCheckoutReader(this);
	  // If the result is null check out a writer
	  if(result == null && this.connectionPool != null) {
	    return this.connectionPool.checkoutConnection();
	  } else if(result == null) {
	    return null;
	  } else {
	    return result;
	  }
	}

	/**
	 * @ignore
	 */
	Server.prototype.enableRecordQueryStats = function(enable) {
	  this.recordQueryStats = enable;
	}

	/**
	 * Internal statistics object used for calculating average and standard devitation on
	 * running queries
	 * @ignore
	 */
	var RunningStats = function() {
	  var self = this;
	  this.m_n = 0;
	  this.m_oldM = 0.0;
	  this.m_oldS = 0.0;
	  this.m_newM = 0.0;
	  this.m_newS = 0.0;

	  // Define getters
	  Object.defineProperty(this, "numDataValues", { enumerable: true
	    , get: function () { return this.m_n; }
	  });

	  Object.defineProperty(this, "mean", { enumerable: true
	    , get: function () { return (this.m_n > 0) ? this.m_newM : 0.0; }
	  });

	  Object.defineProperty(this, "variance", { enumerable: true
	    , get: function () { return ((this.m_n > 1) ? this.m_newS/(this.m_n - 1) : 0.0); }
	  });

	  Object.defineProperty(this, "standardDeviation", { enumerable: true
	    , get: function () { return Math.sqrt(this.variance); }
	  });

	  Object.defineProperty(this, "sScore", { enumerable: true
	    , get: function () {
	      var bottom = this.mean + this.standardDeviation;
	      if(bottom == 0) return 0;
	      return ((2 * this.mean * this.standardDeviation)/(bottom));
	    }
	  });
	}

	/**
	 * @ignore
	 */
	RunningStats.prototype.push = function(x) {
	  // Update the number of samples
	  this.m_n = this.m_n + 1;
	  // See Knuth TAOCP vol 2, 3rd edition, page 232
	  if(this.m_n == 1) {
	    this.m_oldM = this.m_newM = x;
	    this.m_oldS = 0.0;
	  } else {
	    this.m_newM = this.m_oldM + (x - this.m_oldM) / this.m_n;
	    this.m_newS = this.m_oldS + (x - this.m_oldM) * (x - this.m_newM);

	    // set up for next iteration
	    this.m_oldM = this.m_newM;
	    this.m_oldS = this.m_newS;
	  }
	}

	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "autoReconnect", { enumerable: true
	  , get: function () {
	      return this.options['auto_reconnect'] == null ? false : this.options['auto_reconnect'];
	    }
	});

	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "connection", { enumerable: true
	  , get: function () {
	      return this.internalConnection;
	    }
	  , set: function(connection) {
	      this.internalConnection = connection;
	    }
	});

	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "master", { enumerable: true
	  , get: function () {
	      return this.internalMaster;
	    }
	  , set: function(value) {
	      this.internalMaster = value;
	    }
	});

	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "primary", { enumerable: true
	  , get: function () {
	      return this;
	    }
	});

	/**
	 * Getter for query Stats
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "queryStats", { enumerable: true
	  , get: function () {
	      return this._state.runtimeStats.queryStats;
	    }
	});

	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "runtimeStats", { enumerable: true
	  , get: function () {
	      return this._state.runtimeStats;
	    }
	});

	/**
	 * Get Read Preference method
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "readPreference", { enumerable: true
	  , get: function () {
	      if(this._readPreference == null && this.readSecondary) {
	        return Server.READ_SECONDARY;
	      } else if(this._readPreference == null && !this.readSecondary) {
	        return Server.READ_PRIMARY;
	      } else {
	        return this._readPreference;
	      }
	    }
	});

	/**
	 * @ignore
	 */
	exports.Server = Server;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(287).DbCommand
	  , format = __webpack_require__(267).format;

	var HighAvailabilityProcess = function(replset, options) {  
	  this.replset = replset;
	  this.options = options;
	  this.server = null;
	  this.state = HighAvailabilityProcess.INIT;
	  this.selectedIndex = 0;
	}

	HighAvailabilityProcess.INIT = 'init';
	HighAvailabilityProcess.RUNNING = 'running';
	HighAvailabilityProcess.STOPPED = 'stopped';

	HighAvailabilityProcess.prototype.start = function() {  
	  var self = this;
	  if(this.replset._state 
	    && Object.keys(this.replset._state.addresses).length == 0) {
	    if(this.server) this.server.close();
	    this.state = HighAvailabilityProcess.STOPPED;
	    return;      
	  }

	  if(this.server) this.server.close();
	  // Start the running
	  this._haProcessInProcess = false;
	  this.state = HighAvailabilityProcess.RUNNING;
	  
	  // Get all possible reader servers
	  var candidate_servers = this.replset._state.getAllReadServers();
	  if(candidate_servers.length == 0) {
	    return;
	  }

	  // Select a candidate server for the connection
	  var server = candidate_servers[this.selectedIndex % candidate_servers.length];
	  this.selectedIndex = this.selectedIndex + 1;
	  
	  // Unpack connection options
	  var connectTimeoutMS = self.options.connectTimeoutMS || 10000;
	  var socketTimeoutMS = self.options.socketTimeoutMS || 30000;

	  // Just ensure we don't have a full cycle dependency
	  var Db = __webpack_require__(347).Db
	  var Server = __webpack_require__(345).Server;

	  // Set up a new server instance
	  var newServer = new Server(server.host, server.port, {
	      auto_reconnect: false
	    , returnIsMasterResults: true
	    , poolSize: 1
	    , socketOptions: { 
	        connectTimeoutMS: connectTimeoutMS,
	        socketTimeoutMS: socketTimeoutMS,
	        keepAlive: 100
	      }
	    , ssl: this.options.ssl
	    , sslValidate: this.options.sslValidate
	    , sslCA: this.options.sslCA
	    , sslCert: this.options.sslCert
	    , sslKey: this.options.sslKey
	    , sslPass: this.options.sslPass
	  });

	  // Create new dummy db for app
	  self.db = new Db('local', newServer, {w:1});

	  // Set up the event listeners
	  newServer.once("error", _handle(this, newServer));
	  newServer.once("close", _handle(this, newServer));
	  newServer.once("timeout", _handle(this, newServer));
	  newServer.name = format("%s:%s", server.host, server.port);

	  // Let's attempt a connection over here
	  newServer.connect(self.db, function(err, result, _server) {
	    if(self.state == HighAvailabilityProcess.STOPPED) {
	      _server.close();
	    }

	    if(err) {
	      // Close the server
	      _server.close();
	      // Check if we can even do HA (is there anything running)
	      if(Object.keys(self.replset._state.addresses).length == 0) {
	        return;
	      }
	      
	      // Let's boot the ha timeout settings
	      setTimeout(function() {
	        self.start();
	      }, self.options.haInterval);
	    } else {
	      self.server = _server;
	      // Let's boot the ha timeout settings
	      setTimeout(_timeoutHandle(self), self.options.haInterval);
	    }
	  });
	}

	HighAvailabilityProcess.prototype.stop = function() {
	  this.state = HighAvailabilityProcess.STOPPED;
	  if(this.server) this.server.close();
	}

	var _timeoutHandle = function(self) {
	  return function() {
	    if(self.state == HighAvailabilityProcess.STOPPED) {
	      // Stop all server instances
	      for(var name in self.replset._state.addresses) {
	        self.replset._state.addresses[name].close();
	        delete self.replset._state.addresses[name];
	      }

	      // Finished pinging
	      return;
	    }

	    // If the server is connected
	    if(self.server.isConnected() && !self._haProcessInProcess) {
	      // Start HA process
	      self._haProcessInProcess = true;
	      // Execute is master command
	      self.db._executeQueryCommand(DbCommand.createIsMasterCommand(self.db), 
	          {failFast:true, connection: self.server.checkoutReader()}
	        , function(err, res) {
	          if(err) {
	            self.server.close();
	            return setTimeout(_timeoutHandle(self), self.options.haInterval);
	          }

	          // Master document
	          var master = res.documents[0];
	          var hosts = master.hosts || [];
	          var reconnect_servers = [];
	          var state = self.replset._state;

	          // We are in recovery mode, let's remove the current server
	          if(!master.ismaster 
	            && !master.secondary
	            && state.addresses[master.me]) {
	              self.server.close();
	              state.addresses[master.me].close();
	              delete state.secondaries[master.me];
	              return setTimeout(_timeoutHandle(self), self.options.haInterval);
	          }

	          // For all the hosts let's check that we have connections
	          for(var i = 0; i < hosts.length; i++) {
	            var host = hosts[i];
	            // Check if we need to reconnect to a server
	            if(state.addresses[host] == null) {
	              reconnect_servers.push(host);
	            } else if(state.addresses[host] && !state.addresses[host].isConnected()) {
	              state.addresses[host].close();
	              delete state.secondaries[host];
	              reconnect_servers.push(host);              
	            }

	            if((master.primary && state.master == null)
	              || (master.primary && state.master.name != master.primary)) {

	              // Locate the primary and set it
	              if(state.addresses[master.primary]) {
	                if(state.master) state.master.close();
	                delete state.secondaries[master.primary];
	                state.master = state.addresses[master.primary];
	              }
	              
	              // Set up the changes
	              if(state.master != null && state.master.isMasterDoc != null) {
	                state.master.isMasterDoc.ismaster = true;
	                state.master.isMasterDoc.secondary = false;                
	              } else if(state.master != null) {
	                state.master.isMasterDoc = master;
	                state.master.isMasterDoc.ismaster = true;
	                state.master.isMasterDoc.secondary = false;                
	              }

	              // Execute any waiting commands (queries or writes)
	              self.replset._commandsStore.execute_queries();
	              self.replset._commandsStore.execute_writes();   
	            }
	          }

	          // Let's reconnect to any server needed
	          if(reconnect_servers.length > 0) {
	            _reconnect_servers(self, reconnect_servers);  
	          } else {
	            self._haProcessInProcess = false
	            return setTimeout(_timeoutHandle(self), self.options.haInterval);
	          }
	      });
	    } else if(!self.server.isConnected()) {
	      setTimeout(function() {
	        return self.start();
	      }, self.options.haInterval);
	    } else {
	      setTimeout(_timeoutHandle(self), self.options.haInterval);
	    }
	  }
	}

	var _reconnect_servers = function(self, reconnect_servers) {
	  if(reconnect_servers.length == 0) {
	    self._haProcessInProcess = false    
	    return setTimeout(_timeoutHandle(self), self.options.haInterval);
	  }

	  // Unpack connection options
	  var connectTimeoutMS = self.options.connectTimeoutMS || 10000;
	  var socketTimeoutMS = self.options.socketTimeoutMS || 30000;

	  // Server class
	  var Db = __webpack_require__(347).Db
	  var Server = __webpack_require__(345).Server;
	  // Get the host
	  var host = reconnect_servers.shift();
	  // Split it up
	  var _host = host.split(":")[0];
	  var _port = parseInt(host.split(":")[1], 10);

	  // Set up a new server instance
	  var newServer = new Server(_host, _port, {
	      auto_reconnect: false
	    , returnIsMasterResults: true
	    , poolSize: self.options.poolSize
	    , socketOptions: { 
	        connectTimeoutMS: connectTimeoutMS,
	        socketTimeoutMS: socketTimeoutMS
	      }
	    , ssl: self.options.ssl
	    , sslValidate: self.options.sslValidate
	    , sslCA: self.options.sslCA
	    , sslCert: self.options.sslCert
	    , sslKey: self.options.sslKey
	    , sslPass: self.options.sslPass
	  });

	  // Create new dummy db for app
	  var db = new Db('local', newServer, {w:1});
	  var state = self.replset._state;

	  // Set up the event listeners
	  newServer.once("error", _repl_set_handler("error", self.replset, newServer));
	  newServer.once("close", _repl_set_handler("close", self.replset, newServer));
	  newServer.once("timeout", _repl_set_handler("timeout", self.replset, newServer));

	  // Set shared state
	  newServer.name = host;
	  newServer._callBackStore = self.replset._callBackStore;
	  newServer.replicasetInstance = self.replset;
	  newServer.enableRecordQueryStats(self.replset.recordQueryStats);

	  // Let's attempt a connection over here
	  newServer.connect(db, function(err, result, _server) {
	    if(self.state == HighAvailabilityProcess.STOPPED) {
	      _server.close();
	    }

	    // If we connected let's check what kind of server we have
	    if(!err) {
	      _apply_auths(self, db, _server, function(err, result) {
	        if(err) {
	          _server.close();
	          // Process the next server
	          return setTimeout(function() {
	            _reconnect_servers(self, reconnect_servers);  
	          }, self.options.haInterval);                      
	        }
	        var doc = _server.isMasterDoc;    
	        // Fire error on any unknown callbacks for this server
	        self.replset.__executeAllServerSpecificErrorCallbacks(_server.socketOptions.host, _server.socketOptions.port, err);    

	        if(doc.ismaster) {
	          if(state.secondaries[doc.me]) {
	            delete state.secondaries[doc.me];
	          }

	          // Override any server in list of addresses
	          state.addresses[doc.me] = _server;
	          // Set server as master
	          state.master = _server;     
	          // Execute any waiting writes
	          self.replset._commandsStore.execute_writes();   
	        } else if(doc.secondary) {
	          state.secondaries[doc.me] = _server;
	          // Override any server in list of addresses
	          state.addresses[doc.me] = _server;
	          // Execute any waiting reads
	          self.replset._commandsStore.execute_queries();   
	        } else {
	          _server.close();
	        }

	        // Set any tags on the instance server
	        _server.name = doc.me;
	        _server.tags = doc.tags;
	        // Process the next server
	        setTimeout(function() {
	          _reconnect_servers(self, reconnect_servers);  
	        }, self.options.haInterval);            
	      });
	    } else {
	      _server.close();
	      self.replset.__executeAllServerSpecificErrorCallbacks(_server.socketOptions.host, _server.socketOptions.port, err);    

	      setTimeout(function() {
	        _reconnect_servers(self, reconnect_servers);  
	      }, self.options.haInterval);            
	    }
	  });
	}

	var _apply_auths = function(self, _db, _server, _callback) {
	  if(self.replset.auth.length() == 0) return _callback(null);
	  // Apply any authentication needed
	  if(self.replset.auth.length() > 0) {
	    var pending = self.replset.auth.length();
	    var connections = _server.allRawConnections();
	    var pendingAuthConn = connections.length;

	    // Connection function
	    var connectionFunction = function(_auth, _connection, __callback) {
	      var pending = _auth.length();

	      for(var j = 0; j < pending; j++) {
	        // Get the auth object
	        var _auth = _auth.get(j);
	        // Unpack the parameter
	        var username = _auth.username;
	        var password = _auth.password;
	        var options = { 
	            authMechanism: _auth.authMechanism            
	          , authSource: _auth.authdb
	          , connection: _connection 
	        };

	        // If we have changed the service name
	        if(_auth.gssapiServiceName) 
	          options.gssapiServiceName = _auth.gssapiServiceName;
	        
	        // Hold any error
	        var _error = null;
	        
	        // Authenticate against the credentials
	        _db.authenticate(username, password, options, function(err, result) {
	          _error = err != null ? err : _error;
	          // Adjust the pending authentication
	          pending = pending - 1;
	          // Finished up
	          if(pending == 0) __callback(_error ? _error : null, _error ? false : true);
	        });
	      }
	    }

	    // Final error object
	    var finalError = null;
	    // Iterate over all the connections
	    for(var i = 0; i < connections.length; i++) {
	      connectionFunction(self.replset.auth, connections[i], function(err, result) {
	        // Pending authentication
	        pendingAuthConn = pendingAuthConn - 1 ;

	        // Save error if any
	        finalError = err ? err : finalError;

	        // If we are done let's finish up
	        if(pendingAuthConn == 0) {
	          _callback(null);
	        }
	      });
	    }
	  }
	}

	var _handle = function(self, server) {
	  return function(err) {
	    server.close();    
	  }
	}

	var _repl_set_handler = function(event, self, server) {
	  var ReplSet = __webpack_require__(348).ReplSet;

	  return function(err, doc) {
	    server.close();

	    // The event happened to a primary
	    // Remove it from play
	    if(self._state.isPrimary(server)) {
	      self._state.master == null;
	      self._serverState = ReplSet.REPLSET_READ_ONLY;
	    } else if(self._state.isSecondary(server)) {
	      delete self._state.secondaries[server.name];
	    }

	    // Unpack variables
	    var host = server.socketOptions.host;
	    var port = server.socketOptions.port;

	    // Fire error on any unknown callbacks
	    self.__executeAllServerSpecificErrorCallbacks(host, port, err);    
	  }
	}

	exports.HighAvailabilityProcess = HighAvailabilityProcess;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Module dependencies.
	 * @ignore
	 */
	var QueryCommand = __webpack_require__(284).QueryCommand
	  , DbCommand = __webpack_require__(287).DbCommand
	  , MongoReply = __webpack_require__(343).MongoReply
	  , Admin = __webpack_require__(280).Admin
	  , Collection = __webpack_require__(281).Collection
	  , Server = __webpack_require__(345).Server
	  , ReplSet = __webpack_require__(348).ReplSet
	  , ReadPreference = __webpack_require__(308).ReadPreference
	  , Mongos = __webpack_require__(344).Mongos
	  , Cursor = __webpack_require__(305).Cursor
	  , EventEmitter = __webpack_require__(311).EventEmitter
	  , inherits = __webpack_require__(267).inherits
	  , crypto = __webpack_require__(290)
	  , timers = __webpack_require__(289)
	  , utils = __webpack_require__(288)
	  , mongodb_cr_authenticate = __webpack_require__(328).authenticate
	  , mongodb_gssapi_authenticate = __webpack_require__(329).authenticate
	  , mongodb_sspi_authenticate = __webpack_require__(338).authenticate
	  , mongodb_plain_authenticate = __webpack_require__(337).authenticate;

	var hasKerberos = false;
	// Check if we have a the kerberos library
	try {
	  __webpack_require__(330);
	  hasKerberos = true;
	} catch(err) {}

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	 * Create a new Db instance.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **native_parser** {Boolean, default:false}, use c++ bson parser.
	 *  - **forceServerObjectId** {Boolean, default:false}, force server to create _id fields instead of client.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions.
	 *  - **raw** {Boolean, default:false}, peform operations using raw bson buffers.
	 *  - **recordQueryStats** {Boolean, default:false}, record query statistics during execution.
	 *  - **retryMiliSeconds** {Number, default:5000}, number of miliseconds between retries.
	 *  - **numberOfRetries** {Number, default:5}, number of retries off connection.
	 *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.
	 *  - **slaveOk** {Number, default:null}, force setting of SlaveOk flag on queries (only use when explicitly connecting to a secondary server).
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @class Represents a Db
	 * @param {String} databaseName name of the database.
	 * @param {Object} serverConfig server config object.
	 * @param {Object} [options] additional options for the collection.
	 */
	function Db(databaseName, serverConfig, options) {
	  if(!(this instanceof Db)) return new Db(databaseName, serverConfig, options);
	  EventEmitter.call(this);

	  var self = this;
	  this.databaseName = databaseName;
	  this.serverConfig = serverConfig;
	  this.options = options == null ? {} : options;
	  // State to check against if the user force closed db
	  this._applicationClosed = false;
	  // Fetch the override flag if any
	  var overrideUsedFlag = this.options['override_used_flag'] == null ? false : this.options['override_used_flag'];

	  // Verify that nobody is using this config
	  if(!overrideUsedFlag && this.serverConfig != null && typeof this.serverConfig == 'object' && this.serverConfig._isUsed && this.serverConfig._isUsed()) {    
	    throw new Error("A Server or ReplSet instance cannot be shared across multiple Db instances");
	  } else if(!overrideUsedFlag && typeof this.serverConfig == 'object'){
	    // Set being used
	    this.serverConfig._used = true;
	  }

	  // Allow slaveOk override
	  this.slaveOk = this.options["slave_ok"] == null ? false : this.options["slave_ok"];
	  this.slaveOk = this.options["slaveOk"] == null ? this.slaveOk : this.options["slaveOk"];
	  
	  // Ensure we have a valid db name
	  validateDatabaseName(databaseName);

	  // Contains all the connections for the db
	  try {
	    this.native_parser = this.options.native_parser;
	    // The bson lib
	    var bsonLib = this.bsonLib = this.options.native_parser ? __webpack_require__(256).BSONNative : __webpack_require__(256).BSONPure;
	    // Fetch the serializer object
	    var BSON = bsonLib.BSON;
	    
	    // Create a new instance
	    this.bson = new BSON([bsonLib.Long, bsonLib.ObjectID, bsonLib.Binary, bsonLib.Code, bsonLib.DBRef, bsonLib.Symbol, bsonLib.Double, bsonLib.Timestamp, bsonLib.MaxKey, bsonLib.MinKey]);
	    this.bson.promoteLongs = this.options.promoteLongs == null ? true : this.options.promoteLongs;
	    
	    // Backward compatibility to access types
	    this.bson_deserializer = bsonLib;
	    this.bson_serializer = bsonLib;
	    
	    // Add any overrides to the serializer and deserializer
	    this.bson_deserializer.promoteLongs = this.options.promoteLongs == null ? true : this.options.promoteLongs;
	  } catch (err) {
	    // If we tried to instantiate the native driver
	    var msg = "Native bson parser not compiled, please compile "
	            + "or avoid using native_parser=true";
	    throw Error(msg);
	  }

	  // Internal state of the server
	  this._state = 'disconnected';

	  this.pkFactory = this.options.pk == null ? bsonLib.ObjectID : this.options.pk;
	  this.forceServerObjectId = this.options.forceServerObjectId != null ? this.options.forceServerObjectId : false;

	  // Added safe
	  this.safe = this.options.safe == null ? false : this.options.safe;  

	  // If we have not specified a "safe mode" we just print a warning to the console
	  if(this.options.safe == null && this.options.w == null && this.options.journal == null && this.options.fsync == null) {
	    console.log("========================================================================================");
	    console.log("=  Please ensure that you set the default write concern for the database by setting    =");
	    console.log("=   one of the options                                                                 =");
	    console.log("=                                                                                      =");
	    console.log("=     w: (value of > -1 or the string 'majority'), where < 1 means                     =");
	    console.log("=        no write acknowlegement                                                       =");
	    console.log("=     journal: true/false, wait for flush to journal before acknowlegement             =");
	    console.log("=     fsync: true/false, wait for flush to file system before acknowlegement           =");
	    console.log("=                                                                                      =");
	    console.log("=  For backward compatibility safe is still supported and                              =");
	    console.log("=   allows values of [true | false | {j:true} | {w:n, wtimeout:n} | {fsync:true}]      =");
	    console.log("=   the default value is false which means the driver receives does not                =");
	    console.log("=   return the information of the success/error of the insert/update/remove            =");
	    console.log("=                                                                                      =");
	    console.log("=   ex: new Db(new Server('localhost', 27017), {safe:false})                           =");
	    console.log("=                                                                                      =");
	    console.log("=   http://www.mongodb.org/display/DOCS/getLastError+Command                           =");
	    console.log("=                                                                                      =");
	    console.log("=  The default of no acknowlegement will change in the very near future                =");
	    console.log("=                                                                                      =");
	    console.log("=  This message will disappear when the default safe is set on the driver Db           =");
	    console.log("========================================================================================");
	  }

	  // Internal states variables
	  this.notReplied ={};
	  this.isInitializing = true;
	  this.openCalled = false;

	  // Command queue, keeps a list of incoming commands that need to be executed once the connection is up
	  this.commands = [];

	  // Set up logger
	  this.logger = this.options.logger != null
	    && (typeof this.options.logger.debug == 'function')
	    && (typeof this.options.logger.error == 'function')
	    && (typeof this.options.logger.log == 'function')
	      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};

	  // Associate the logger with the server config
	  this.serverConfig.logger = this.logger;
	  if(this.serverConfig.strategyInstance) this.serverConfig.strategyInstance.logger = this.logger;
	  this.tag = new Date().getTime();
	  // Just keeps list of events we allow
	  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[]};

	  // Controls serialization options
	  this.serializeFunctions = this.options.serializeFunctions != null ? this.options.serializeFunctions : false;

	  // Raw mode
	  this.raw = this.options.raw != null ? this.options.raw : false;

	  // Record query stats
	  this.recordQueryStats = this.options.recordQueryStats != null ? this.options.recordQueryStats : false;

	  // If we have server stats let's make sure the driver objects have it enabled
	  if(this.recordQueryStats == true) {
	    this.serverConfig.enableRecordQueryStats(true);
	  }

	  // Retry information
	  this.retryMiliSeconds = this.options.retryMiliSeconds != null ? this.options.retryMiliSeconds : 1000;
	  this.numberOfRetries = this.options.numberOfRetries != null ? this.options.numberOfRetries : 60;

	  // Set default read preference if any
	  this.readPreference = this.options.readPreference;

	  // Set read preference on serverConfig if none is set
	  // but the db one was
	  if(this.serverConfig.options.readPreference == null
	    && this.readPreference != null) {
	      this.serverConfig.setReadPreference(this.readPreference);
	  }

	  // Ensure we keep a reference to this db
	  this.serverConfig._dbStore.add(this);
	};

	/**
	 * @ignore
	 */
	function validateDatabaseName(databaseName) {
	  if(typeof databaseName !== 'string') throw new Error("database name must be a string");
	  if(databaseName.length === 0) throw new Error("database name cannot be the empty string");
	  if(databaseName == '$external') return;

	  var invalidChars = [" ", ".", "$", "/", "\\"];
	  for(var i = 0; i < invalidChars.length; i++) {
	    if(databaseName.indexOf(invalidChars[i]) != -1) throw new Error("database names cannot contain the character '" + invalidChars[i] + "'");
	  }
	}

	/**
	 * @ignore
	 */
	inherits(Db, EventEmitter);

	/**
	 * Initialize the database connection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the index information or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.open = function(callback) {
	  var self = this;

	  // Check that the user has not called this twice
	  if(this.openCalled) {
	    // Close db
	    this.close();
	    // Throw error
	    throw new Error("db object already connecting, open cannot be called multiple times");
	  }

	  // If we have a specified read preference
	  if(this.readPreference != null) this.serverConfig.setReadPreference(this.readPreference);

	  // Set that db has been opened
	  this.openCalled = true;

	  // Set the status of the server
	  self._state = 'connecting';
	  
	  // Set up connections
	  if(self.serverConfig instanceof Server || self.serverConfig instanceof ReplSet || self.serverConfig instanceof Mongos) {
	    // Ensure we have the original options passed in for the server config
	    var connect_options = {};
	    for(var name in self.serverConfig.options) {
	      connect_options[name] = self.serverConfig.options[name]
	    }
	    connect_options.firstCall = true;

	    // Attempt to connect
	    self.serverConfig.connect(self, connect_options, function(err, result) {
	      if(err != null) {
	        // Set that db has been closed
	        self.openCalled = false;
	        // Return error from connection
	        return callback(err, null);
	      }
	      // Set the status of the server
	      self._state = 'connected';
	      // If we have queued up commands execute a command to trigger replays
	      if(self.commands.length > 0) _execute_queued_command(self);
	      // Callback
	      process.nextTick(function() {
	        try {
	          callback(null, self);
	        } catch(err) {
	          self.close();
	          throw err;
	        }
	      });
	    });
	  } else {
	    try {
	      callback(Error("Server parameter must be of type Server, ReplSet or Mongos"), null);
	    } catch(err) {
	      self.close();
	      throw err;
	    }
	  }
	};

	/**
	 * Create a new Db instance sharing the current socket connections.
	 *
	 * @param {String} dbName the name of the database we want to use.
	 * @return {Db} a db instance using the new database.
	 * @api public
	 */
	Db.prototype.db = function(dbName) {
	  // Copy the options and add out internal override of the not shared flag
	  var options = {};
	  for(var key in this.options) {
	    options[key] = this.options[key];
	  }

	  // Add override flag
	  options['override_used_flag'] = true;
	  // Check if the db already exists and reuse if it's the case
	  var db = this.serverConfig._dbStore.fetch(dbName);

	  // Create a new instance
	  if(!db) {
	    db = new Db(dbName, this.serverConfig, options);
	  }

	  // Return the db object
	  return db;  
	}

	/**
	 * Close the current db connection, including all the child db instances. Emits close event if no callback is provided.
	 *
	 * @param {Boolean} [forceClose] connection can never be reused.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.close = function(forceClose, callback) {
	  var self = this;
	  // Ensure we force close all connections
	  this._applicationClosed = false;

	  if(typeof forceClose == 'function') {
	    callback = forceClose;
	  } else if(typeof forceClose == 'boolean') {
	    this._applicationClosed = forceClose;
	  }

	  this.serverConfig.close(function(err, result) {
	    // You can reuse the db as everything is shut down
	    self.openCalled = false;
	    // If we have a callback call it
	    if(callback) callback(err, result);    
	  });
	};

	/**
	 * Access the Admin database
	 *
	 * @param {Function} [callback] returns the results.
	 * @return {Admin} the admin db object.
	 * @api public
	 */
	Db.prototype.admin = function(callback) {
	  if(callback == null) return new Admin(this);
	  callback(null, new Admin(this));
	};

	/**
	 * Returns a cursor to all the collection information.
	 *
	 * @param {String} [collectionName] the collection name we wish to retrieve the information from.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the options or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.collectionsInfo = function(collectionName, callback) {
	  if(callback == null && typeof collectionName == 'function') { callback = collectionName; collectionName = null; }
	  // Create selector
	  var selector = {};
	  // If we are limiting the access to a specific collection name
	  if(collectionName != null) selector.name = this.databaseName + "." + collectionName;

	  // Return Cursor
	  // callback for backward compatibility
	  if(callback) {
	    callback(null, new Cursor(this, new Collection(this, DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector));
	  } else {
	    return new Cursor(this, new Collection(this, DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector);
	  }
	};

	/**
	 * Get the list of all collection names for the specified db
	 *
	 * Options
	 *  - **namesOnly** {String, default:false}, Return only the full collection namespace.
	 *
	 * @param {String} [collectionName] the collection name we wish to filter by.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the collection names or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.collectionNames = function(collectionName, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  collectionName = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};

	  // Ensure no breaking behavior
	  if(collectionName != null && typeof collectionName == 'object') {
	    options = collectionName;
	    collectionName = null;
	  }

	  // Let's make our own callback to reuse the existing collections info method
	  self.collectionsInfo(collectionName, function(err, cursor) {
	    if(err != null) return callback(err, null);

	    cursor.toArray(function(err, documents) {
	      if(err != null) return callback(err, null);

	      // List of result documents that have been filtered
	      var filtered_documents = documents.filter(function(document) {
	        return !(document.name.indexOf(self.databaseName) == -1 || document.name.indexOf('$') != -1);
	      });

	      // If we are returning only the names
	      if(options.namesOnly) {
	        filtered_documents = filtered_documents.map(function(document) { return document.name });
	      }

	      // Return filtered items
	      callback(null, filtered_documents);
	    });
	  });
	};

	/**
	 * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can
	 * can use it without a callback in the following way. var collection = db.collection('mycollection');
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **strict**, (Boolean, default:false) returns an error if the collection does not exist
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {String} collectionName the collection name we wish to access.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the collection or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.collection = function(collectionName, options, callback) {
	  var self = this;
	  if(typeof options === "function") { callback = options; options = {}; }
	  // Execute safe

	  if(options && (options.strict)) {
	    self.collectionNames(collectionName, function(err, collections) {
	      if(err != null) return callback(err, null);

	      if(collections.length == 0) {
	        return callback(new Error("Collection " + collectionName + " does not exist. Currently in safe mode."), null);
	      } else {
	        try {
	          var collection = new Collection(self, collectionName, self.pkFactory, options);
	        } catch(err) {
	          return callback(err, null);
	        }
	        return callback(null, collection);
	      }
	    });
	  } else {
	    try {
	      var collection = new Collection(self, collectionName, self.pkFactory, options);
	    } catch(err) {
	      if(callback == null) {
	        throw err;
	      } else {
	        return callback(err, null);
	      }
	    }

	    // If we have no callback return collection object
	    return callback == null ? collection : callback(null, collection);
	  }
	};

	/**
	 * Fetch all collections for the current db.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the collections or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.collections = function(callback) {
	  var self = this;
	  // Let's get the collection names
	  self.collectionNames(function(err, documents) {
	    if(err != null) return callback(err, null);
	    var collections = [];
	    documents.forEach(function(document) {
	      collections.push(new Collection(self, document.name.replace(self.databaseName + ".", ''), self.pkFactory));
	    });
	    // Return the collection objects
	    callback(null, collections);
	  });
	};

	/**
	 * Evaluate javascript on the server
	 *
	 * Options
	 *  - **nolock** {Boolean, default:false}, Tell MongoDB not to block on the evaulation of the javascript.
	 *
	 * @param {Code} code javascript to execute on server.
	 * @param {Object|Array} [parameters] the parameters for the call.
	 * @param {Object} [options] the options
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from eval or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.eval = function(code, parameters, options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  parameters = args.length ? args.shift() : parameters;
	  options = args.length ? args.shift() || {} : {};

	  var finalCode = code;
	  var finalParameters = [];
	  // If not a code object translate to one
	  if(!(finalCode instanceof this.bsonLib.Code)) {
	    finalCode = new this.bsonLib.Code(finalCode);
	  }

	  // Ensure the parameters are correct
	  if(parameters != null && parameters.constructor != Array && typeof parameters !== 'function') {
	    finalParameters = [parameters];
	  } else if(parameters != null && parameters.constructor == Array && typeof parameters !== 'function') {
	    finalParameters = parameters;
	  }

	  // Create execution selector
	  var selector = {'$eval':finalCode, 'args':finalParameters};
	  // Check if the nolock parameter is passed in
	  if(options['nolock']) {
	    selector['nolock'] = options['nolock'];
	  }

	  // Set primary read preference
	  options.readPreference = ReadPreference.PRIMARY;

	  // Execute the eval
	  this.collection(DbCommand.SYSTEM_COMMAND_COLLECTION).findOne(selector, options, function(err, result) {
	    if(err) return callback(err);

	    if(result && result.ok == 1) {
	      callback(null, result.retval);
	    } else if(result) {
	      callback(new Error("eval failed: " + result.errmsg), null); return;
	    } else {
	      callback(err, result);
	    }
	  });
	};

	/**
	 * Dereference a dbref, against a db
	 *
	 * @param {DBRef} dbRef db reference object we wish to resolve.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from dereference or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dereference = function(dbRef, callback) {
	  var db = this;
	  // If we have a db reference then let's get the db first
	  if(dbRef.db != null) db = this.db(dbRef.db);
	  // Fetch the collection and find the reference
	  var collection = db.collection(dbRef.namespace);
	  collection.findOne({'_id':dbRef.oid}, function(err, result) {
	    callback(err, result);
	  });
	};

	/**
	 * Logout user from server, fire off on all connections and remove all auth info
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from logout or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.logout = function(options, callback) {
	  var self = this;
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};

	  // Number of connections we need to logout from
	  var numberOfConnections = this.serverConfig.allRawConnections().length;

	  // Let's generate the logout command object
	  var logoutCommand = DbCommand.logoutCommand(self, {logout:1}, options);
	  self._executeQueryCommand(logoutCommand, {onAll:true}, function(err, result) {
	    // Count down
	    numberOfConnections = numberOfConnections - 1;
	    // Work around the case where the number of connections are 0
	    if(numberOfConnections <= 0 && typeof callback == 'function') {
	      var internalCallback = callback;
	      callback = null;

	      // Remove the db from auths
	      self.serverConfig.auth.remove(self.databaseName);

	      // Handle error result
	      utils.handleSingleCommandResultReturn(true, false, internalCallback)(err, result);
	    }
	  });
	}

	/**
	 * Authenticate a user against the server.
	 * authMechanism
	 * Options
	 *  - **authSource** {String}, The database that the credentials are for,
	 *    different from the name of the current DB, for example admin
	 *  - **authMechanism** {String, default:MONGODB-CR}, The authentication mechanism to use, GSSAPI or MONGODB-CR
	 *
	 * @param {String} username username.
	 * @param {String} password password.
	 * @param {Object} [options] the options
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from authentication or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.authenticate = function(username, password, options, callback) {
	  var self = this;

	  if(typeof callback === 'undefined') {
	    callback = options;
	    options = {};
	  }

	  // Set default mechanism
	  if(!options.authMechanism) {
	    options.authMechanism = 'MONGODB-CR';
	  } else if(options.authMechanism != 'GSSAPI' 
	    && options.authMechanism != 'MONGODB-CR'
	    && options.authMechanism != 'PLAIN') {
	      return callback(new Error("only GSSAPI, PLAIN or MONGODB-CR is supported by authMechanism"));
	  }

	  // the default db to authenticate against is 'this'
	  // if authententicate is called from a retry context, it may be another one, like admin
	  var authdb = options.authdb ? options.authdb : self.databaseName;
	  authdb = options.authSource ? options.authSource : authdb;

	  // Callback
	  var _callback = function(err, result) {
	    if(self.listeners("authenticated").length > 9) {
	      self.emit("authenticated", err, result);
	    }

	    // Return to caller
	    callback(err, result);
	  }

	  // If classic auth delegate to auth command
	  if(options.authMechanism == 'MONGODB-CR') {
	    mongodb_cr_authenticate(self, username, password, authdb, options, _callback);
	  } else if(options.authMechanism == 'PLAIN') {
	    mongodb_plain_authenticate(self, username, password, options, _callback);
	  } else if(options.authMechanism == 'GSSAPI') {
	    //
	    // Kerberos library is not installed, throw and error
	    if(hasKerberos == false) {
	      console.log("========================================================================================");
	      console.log("=  Please make sure that you install the Kerberos library to use GSSAPI                =");
	      console.log("=                                                                                      =");
	      console.log("=  npm install -g kerberos                                                             =");
	      console.log("=                                                                                      =");
	      console.log("=  The Kerberos package is not installed by default for simplicities sake              =");
	      console.log("=  and needs to be global install                                                      =");
	      console.log("========================================================================================");
	      throw new Error("Kerberos library not installed");
	    }

	    if(process.platform == 'win32') {
	      mongodb_sspi_authenticate(self, username, password, authdb, options, _callback);
	    } else {
	      // We have the kerberos library, execute auth process
	      mongodb_gssapi_authenticate(self, username, password, authdb, options, _callback);      
	    }
	  }
	};

	/**
	 * Add a user to the database.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {String} username username.
	 * @param {String} password password.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from addUser or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.addUser = function(username, password, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};

	  // Get the error options
	  var errorOptions = _getWriteConcern(this, options, callback);
	  errorOptions.w = errorOptions.w == null ? 1 : errorOptions.w;
	  // Use node md5 generator
	  var md5 = crypto.createHash('md5');
	  // Generate keys used for authentication
	  md5.update(username + ":mongo:" + password);
	  var userPassword = md5.digest('hex');
	  // Fetch a user collection
	  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);
	  // Check if we are inserting the first user
	  collection.count({}, function(err, count) {
	    // We got an error (f.ex not authorized)
	    if(err != null) return callback(err, null);
	    // Check if the user exists and update i
	    collection.find({user: username}, {dbName: options['dbName']}).toArray(function(err, documents) {
	      // We got an error (f.ex not authorized)
	      if(err != null) return callback(err, null);
	      // Add command keys
	      var commandOptions = errorOptions;
	      commandOptions.dbName = options['dbName'];
	      commandOptions.upsert = true;

	      // We have a user, let's update the password or upsert if not
	      collection.update({user: username},{$set: {user: username, pwd: userPassword}}, commandOptions, function(err, results) {
	        if(count == 0 && err) {
	          callback(null, [{user:username, pwd:userPassword}]);
	        } else if(err) {
	          callback(err, null)
	        } else {
	          callback(null, [{user:username, pwd:userPassword}]);
	        }
	      });
	    });
	  });
	};

	/**
	 * Remove a user from a database
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {String} username username.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from removeUser or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.removeUser = function(username, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};

	  // Figure out the safe mode settings
	  var safe = self.safe != null && self.safe == false ? {w: 1} : self.safe;
	  // Override with options passed in if applicable
	  safe = options != null && options['safe'] != null ? options['safe'] : safe;
	  // Ensure it's at least set to safe
	  safe = safe == null ? {w: 1} : safe;

	  // Fetch a user collection
	  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);
	  collection.findOne({user: username}, {dbName: options['dbName']}, function(err, user) {
	    if(user != null) {
	      // Add command keys
	      var commandOptions = safe;
	      commandOptions.dbName = options['dbName'];

	      collection.remove({user: username}, commandOptions, function(err, result) {
	        callback(err, true);
	      });
	    } else {
	      callback(err, false);
	    }
	  });
	};

	/**
	 * Creates a collection on a server pre-allocating space, need to create f.ex capped collections.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **capped** {Boolean, default:false}, create a capped collection.
	 *  - **size** {Number}, the size of the capped collection in bytes.
	 *  - **max** {Number}, the maximum number of documents in the capped collection.
	 *  - **autoIndexId** {Boolean, default:true}, create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **strict**, (Boolean, default:false) throws an error if collection already exists
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {String} collectionName the collection name we wish to access.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from createCollection or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.createCollection = function(collectionName, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() : null;
	  var self = this;

	  // Figure out the safe mode settings
	  var safe = self.safe != null && self.safe == false ? {w: 1} : self.safe;
	  // Override with options passed in if applicable
	  safe = options != null && options['safe'] != null ? options['safe'] : safe;
	  // Ensure it's at least set to safe
	  safe = safe == null ? {w: 1} : safe;

	  // Check if we have the name
	  this.collectionNames(collectionName, function(err, collections) {
	    if(err != null) return callback(err, null);

	    var found = false;
	    collections.forEach(function(collection) {
	      if(collection.name == self.databaseName + "." + collectionName) found = true;
	    });

	    // If the collection exists either throw an exception (if db in safe mode) or return the existing collection
	    if(found && options && options.strict) {
	      return callback(new Error("Collection " + collectionName + " already exists. Currently in safe mode."), null);
	    } else if(found){
	      try {
	        var collection = new Collection(self, collectionName, self.pkFactory, options);
	      } catch(err) {
	        return callback(err, null);
	      }
	      return callback(null, collection);
	    }

	    // Create a new collection and return it
	    self._executeQueryCommand(DbCommand.createCreateCollectionCommand(self, collectionName, options)
	      , {read:false, safe:safe}
	      , utils.handleSingleCommandResultReturn(null, null, function(err, result) {
	        if(err) return callback(err, null);
	        // Create collection and return
	        try {
	          return callback(null, new Collection(self, collectionName, self.pkFactory, options));
	        } catch(err) {
	          return callback(err, null);
	        }
	      }));
	  });
	};

	var _getReadConcern = function(self, options) {
	  if(options.readPreference) return options.readPreference;
	  if(self.readPreference) return self.readPreference;
	  return 'primary';
	}

	/**
	 * Execute a command hash against MongoDB. This lets you acess any commands not available through the api on the server.
	 *
	 * @param {Object} selector the command hash to send to the server, ex: {ping:1}.
	 * @param {Function} callback this will be called after executing this method. The command always return the whole result of the command as the second parameter.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.command = function(selector, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  // Ignore command preference (I know what I'm doing)
	  var ignoreCommandFilter = options.ignoreCommandFilter ? options.ignoreCommandFilter : false;

	  // Set up the options
	  var cursor = new Cursor(this
	    , new Collection(this, DbCommand.SYSTEM_COMMAND_COLLECTION), selector, {}, {
	      limit: -1, timeout: QueryCommand.OPTS_NO_CURSOR_TIMEOUT, dbName: options['dbName']
	    });

	  // Set read preference if we set one
	  var readPreference = options['readPreference'] ? options['readPreference'] : false;
	  // If we have a connection passed in
	  cursor.connection = options.connection;

	  // Ensure only commands who support read Prefrences are exeuted otherwise override and use Primary
	  if(readPreference != false && ignoreCommandFilter == false) {
	    if(selector['group'] || selector['aggregate'] || selector['collStats'] || selector['dbStats']
	      || selector['count'] || selector['distinct'] || selector['geoNear'] || selector['geoSearch'] 
	      || selector['geoWalk'] || selector['text']
	      || (selector['mapreduce'] && (selector.out == 'inline' || selector.out.inline))) {
	      // Set the read preference
	      cursor.setReadPreference(readPreference);
	    } else {
	      cursor.setReadPreference(ReadPreference.PRIMARY);
	    }
	  } else if(readPreference != false) {
	    // Force setting the command filter
	    cursor.setReadPreference(readPreference);    
	  }

	  // Get the next result
	  cursor.nextObject(function(err, result) {
	    if(err) return callback(err, null);
	    if(result == null) return callback(new Error("no result returned from command"), null);
	    callback(null, result);
	  });
	};

	/**
	 * Drop a collection from the database, removing it permanently. New accesses will create a new collection.
	 *
	 * @param {String} collectionName the name of the collection we wish to drop.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from dropCollection or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dropCollection = function(collectionName, callback) {
	  var self = this;
	  callback || (callback = function(){});

	  // Drop the collection
	  this._executeQueryCommand(DbCommand.createDropCollectionCommand(this, collectionName)
	    , utils.handleSingleCommandResultReturn(true, false, callback)
	  );
	};

	/**
	 * Rename a collection.
	 * 
	 * Options
	 *  - **dropTarget** {Boolean, default:false}, drop the target name collection if it previously exists.
	 *
	 * @param {String} fromCollection the name of the current collection we wish to rename.
	 * @param {String} toCollection the new name of the collection.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from renameCollection or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {
	  var self = this;

	  if(typeof options == 'function') {
	    callback = options;
	    options = {}
	  }

	  // Add return new collection
	  options.new_collection = true;

	  // Execute using the collection method
	  this.collection(fromCollection).rename(toCollection, options, callback);
	};

	/**
	 * Return last error message for the given connection, note options can be combined.
	 *
	 * Options
	 *  - **fsync** {Boolean, default:false}, option forces the database to fsync all files before returning.
	 *  - **j** {Boolean, default:false}, awaits the journal commit before returning, > MongoDB 2.0.
	 *  - **w** {Number}, until a write operation has been replicated to N servers.
	 *  - **wtimeout** {Number}, number of miliseconds to wait before timing out.
	 *
	 * Connection Options
	 *  - **connection** {Connection}, fire the getLastError down a specific connection.
	 *
	 * @param {Object} [options] returns option results.
	 * @param {Object} [connectionOptions] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from lastError or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.lastError = function(options, connectionOptions, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  connectionOptions = args.length ? args.shift() || {} : {};

	  this._executeQueryCommand(DbCommand.createGetLastErrorCommand(options, this), connectionOptions, function(err, error) {
	    callback(err, error && error.documents);
	  });
	};

	/**
	 * Legacy method calls.
	 *
	 * @ignore
	 * @api private
	 */
	Db.prototype.error = Db.prototype.lastError;
	Db.prototype.lastStatus = Db.prototype.lastError;

	/**
	 * Return all errors up to the last time db reset_error_history was called.
	 *
	 * Options
	 *  - **connection** {Connection}, fire the getLastError down a specific connection.
	 *
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from previousErrors or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.previousErrors = function(options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};

	  this._executeQueryCommand(DbCommand.createGetPreviousErrorsCommand(this), options, function(err, error) {
	    callback(err, error.documents);
	  });
	};

	/**
	 * Runs a command on the database.
	 * @ignore
	 * @api private
	 */
	Db.prototype.executeDbCommand = function(command_hash, options, callback) {
	  if(callback == null) { callback = options; options = {}; }
	  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this, command_hash, options), options, function(err, result) {
	    if(callback) callback(err, result);
	  });
	};

	/**
	 * Runs a command on the database as admin.
	 * @ignore
	 * @api private
	 */
	Db.prototype.executeDbAdminCommand = function(command_hash, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {}
	  }

	  if(options.readPreference) {
	    options.read = options.readPreference;
	  }

	  this._executeQueryCommand(DbCommand.createAdminDbCommand(this, command_hash), options, function(err, result) {
	    if(callback) callback(err, result);
	  });
	};

	/**
	 * Resets the error history of the mongo instance.
	 *
	 * Options
	 *  - **connection** {Connection}, fire the getLastError down a specific connection.
	 *
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from resetErrorHistory or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.resetErrorHistory = function(options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};

	  this._executeQueryCommand(DbCommand.createResetErrorHistoryCommand(this), options, function(err, error) {
	    if(callback) callback(err, error && error.documents);
	  });
	};

	/**
	 * Creates an index on the collection.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 *
	 * @param {String} collectionName name of the collection to create the index on.
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from createIndex or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.createIndex = function(collectionName, fieldOrSpec, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  options = typeof callback === 'function' ? options : callback;
	  options = options == null ? {} : options;

	  // Get the error options
	  var errorOptions = _getWriteConcern(this, options, callback);
	  // Create command
	  var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);
	  // Default command options
	  var commandOptions = {};

	  // If we have error conditions set handle them
	  if(_hasWriteConcern(errorOptions) && typeof callback == 'function') {
	    // Insert options
	    commandOptions['read'] = false;
	    // If we have safe set set async to false
	    if(errorOptions == null) commandOptions['async'] = true;

	    // Set safe option
	    commandOptions['safe'] = errorOptions;
	    // If we have an error option
	    if(typeof errorOptions == 'object') {
	      var keys = Object.keys(errorOptions);
	      for(var i = 0; i < keys.length; i++) {
	        commandOptions[keys[i]] = errorOptions[keys[i]];
	      }
	    }

	    // Execute insert command
	    this._executeInsertCommand(command, commandOptions, function(err, result) {
	      if(err != null) return callback(err, null);

	      result = result && result.documents;
	      if (result[0].err) {
	        callback(utils.toError(result[0]));
	      } else {
	        callback(null, command.documents[0].name);
	      }
	    });
	  } else if(_hasWriteConcern(errorOptions) && callback == null) {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  } else {
	    // Execute insert command
	    var result = this._executeInsertCommand(command, commandOptions);
	    // If no callback just return
	    if(!callback) return;
	    // If error return error
	    if(result instanceof Error) {
	      return callback(result);
	    }
	    // Otherwise just return
	    return callback(null, null);
	  }
	};

	/**
	 * Ensures that an index exists, if it does not it creates it
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @param {String} collectionName name of the collection to create the index on.
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from ensureIndex or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.ensureIndex = function(collectionName, fieldOrSpec, options, callback) {
	  var self = this;

	  if (typeof callback === 'undefined' && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  if (options == null) {
	    options = {};
	  }

	  // Get the error options
	  var errorOptions = _getWriteConcern(this, options, callback);
	  // Make sure we don't try to do a write concern without a callback
	  if(_hasWriteConcern(errorOptions) && callback == null)
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  // Create command
	  var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);
	  var index_name = command.documents[0].name;

	  // Default command options
	  var commandOptions = {};
	  // Check if the index allready exists
	  this.indexInformation(collectionName, function(err, collectionInfo) {
	    if(err != null) return callback(err, null);

	    if(!collectionInfo[index_name])  {
	      // If we have error conditions set handle them
	      if(_hasWriteConcern(errorOptions) && typeof callback == 'function') {
	        // Insert options
	        commandOptions['read'] = false;
	        // If we have safe set set async to false
	        if(errorOptions == null) commandOptions['async'] = true;

	        // If we have an error option
	        if(typeof errorOptions == 'object') {
	          var keys = Object.keys(errorOptions);
	          for(var i = 0; i < keys.length; i++) {
	            commandOptions[keys[i]] = errorOptions[keys[i]];
	          }
	        }

	        if(typeof callback === 'function' 
	          && commandOptions.w < 1 && !commandOptions.fsync && !commandOptions.journal) {
	          commandOptions.w = 1;
	        }

	        self._executeInsertCommand(command, commandOptions, function(err, result) {
	          // Only callback if we have one specified
	          if(typeof callback === 'function') {
	            if(err != null) return callback(err, null);

	            result = result && result.documents;
	            if (result[0].err) {
	              callback(utils.toError(result[0]));
	            } else {
	              callback(null, command.documents[0].name);
	            }
	          }
	        });
	      } else {
	        // Execute insert command
	        var result = self._executeInsertCommand(command, commandOptions);
	        // If no callback just return
	        if(!callback) return;
	        // If error return error
	        if(result instanceof Error) {
	          return callback(result);
	        }
	        // Otherwise just return
	        return callback(null, index_name);
	      }
	    } else {
	      if(typeof callback === 'function') return callback(null, index_name);
	    }
	  });
	};

	/**
	 * Returns the information available on allocated cursors.
	 *
	 * Options
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from cursorInfo or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.cursorInfo = function(options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};

	  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this, {'cursorInfo':1})
	    , options
	    , utils.handleSingleCommandResultReturn(null, null, callback));
	};

	/**
	 * Drop an index on a collection.
	 *
	 * @param {String} collectionName the name of the collection where the command will drop an index.
	 * @param {String} indexName name of the index to drop.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from dropIndex or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dropIndex = function(collectionName, indexName, callback) {  
	  this._executeQueryCommand(DbCommand.createDropIndexCommand(this, collectionName, indexName)
	    , utils.handleSingleCommandResultReturn(null, null, callback));
	};

	/**
	 * Reindex all indexes on the collection
	 * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
	 *
	 * @param {String} collectionName the name of the collection.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from reIndex or null if an error occured.
	 * @api public
	**/
	Db.prototype.reIndex = function(collectionName, callback) {
	  this._executeQueryCommand(DbCommand.createReIndexCommand(this, collectionName)
	    , utils.handleSingleCommandResultReturn(true, false, callback));
	};

	/**
	 * Retrieves this collections index info.
	 *
	 * Options
	 *  - **full** {Boolean, default:false}, returns the full raw index information.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {String} collectionName the name of the collection.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from indexInformation or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.indexInformation = function(collectionName, options, callback) {
	  if(typeof callback === 'undefined') {
	    if(typeof options === 'undefined') {
	      callback = collectionName;
	      collectionName = null;
	    } else {
	      callback = options;
	    }
	    options = {};
	  }

	  // If we specified full information
	  var full = options['full'] == null ? false : options['full'];
	  // Build selector for the indexes
	  var selector = collectionName != null ? {ns: (this.databaseName + "." + collectionName)} : {};

	  // Set read preference if we set one
	  var readPreference = options['readPreference'] ? options['readPreference'] : ReadPreference.PRIMARY;

	  // Iterate through all the fields of the index
	  this.collection(DbCommand.SYSTEM_INDEX_COLLECTION, function(err, collection) {
	    // Perform the find for the collection
	    collection.find(selector).setReadPreference(readPreference).toArray(function(err, indexes) {
	      if(err != null) return callback(err, null);
	      // Contains all the information
	      var info = {};

	      // if full defined just return all the indexes directly
	      if(full) return callback(null, indexes);

	      // Process all the indexes
	      for(var i = 0; i < indexes.length; i++) {
	        var index = indexes[i];
	        // Let's unpack the object
	        info[index.name] = [];
	        for(var name in index.key) {
	          info[index.name].push([name, index.key[name]]);
	        }
	      }

	      // Return all the indexes
	      callback(null, info);
	    });
	  });
	};

	/**
	 * Drop a database.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from dropDatabase or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dropDatabase = function(callback) {
	  this._executeQueryCommand(DbCommand.createDropDatabaseCommand(this)
	    , utils.handleSingleCommandResultReturn(true, false, callback));
	}

	/**
	 * Get all the db statistics.
	 *
	 * Options
	 *  - **scale** {Number}, divide the returned sizes by scale value.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Objects} [options] options for the stats command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from stats or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.stats = function stats(options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};

	  // Build command object
	  var commandObject = {
	    dbStats:this.collectionName,
	  }

	  // Check if we have the scale value
	  if(options['scale'] != null) commandObject['scale'] = options['scale'];

	  // Execute the command
	  this.command(commandObject, options, callback);
	}

	/**
	 * @ignore
	 */
	var __executeQueryCommand = function(self, db_command, options, callback) {
	  // Options unpacking
	  var read = options['read'] != null ? options['read'] : false;
	  var raw = options['raw'] != null ? options['raw'] : self.raw;
	  var onAll = options['onAll'] != null ? options['onAll'] : false;
	  var specifiedConnection = options['connection'] != null ? options['connection'] : null;

	  // Correct read preference to default primary if set to false, null or primary
	  if(!(typeof read == 'object') && read._type == 'ReadPreference') {
	    read = (read == null || read == 'primary' || read == false) ? ReadPreference.PRIMARY : read;
	    if(!ReadPreference.isValid(read)) return callback(new Error("Illegal readPreference mode specified, " + read));
	  } else if(typeof read == 'object' && read._type == 'ReadPreference') {
	    if(!read.isValid()) return callback(new Error("Illegal readPreference mode specified, " + read.mode));
	  }

	  // If we have a read preference set and we are a mongos pass the read preference on to the mongos instance,
	  if(self.serverConfig.isMongos() && read != null && read != false) {
	    db_command.setMongosReadPreference(read);
	  }

	  // If we got a callback object
	  if(typeof callback === 'function' && !onAll) {
	    // Override connection if we passed in a specific connection
	    var connection = specifiedConnection != null ? specifiedConnection : null;

	    if(connection instanceof Error) return callback(connection, null);

	    // Fetch either a reader or writer dependent on the specified read option if no connection
	    // was passed in
	    if(connection == null) {
	      connection = self.serverConfig.checkoutReader(read);
	    }

	    if(connection == null) {
	      return callback(new Error("no open connections"));
	    } else if(connection instanceof Error || connection['message'] != null) {
	      return callback(connection);
	    }

	    // Exhaust Option
	    var exhaust = options.exhaust || false;
	    
	    // Register the handler in the data structure
	    self.serverConfig._registerHandler(db_command, raw, connection, exhaust, callback);
	    
	    // Ensure the connection is valid
	    if(!connection.isConnected()) {
	      if(read == ReadPreference.PRIMARY 
	        || read == ReadPreference.PRIMARY_PREFERRED
	        || (read != null && typeof read == 'object' && read.mode)
	        || read == null) {
	        
	        // Save the command
	        self.serverConfig._commandsStore.read_from_writer(
	          {   type: 'query'
	            , db_command: db_command
	            , options: options
	            , callback: callback
	            , db: self
	            , executeQueryCommand: __executeQueryCommand
	            , executeInsertCommand: __executeInsertCommand
	          }
	        );
	      } else {
	        self.serverConfig._commandsStore.read(
	          {   type: 'query'
	            , db_command: db_command
	            , options: options
	            , callback: callback 
	            , db: self
	            , executeQueryCommand: __executeQueryCommand
	            , executeInsertCommand: __executeInsertCommand
	          }
	        );
	      }      
	    }

	    // Write the message out and handle any errors if there are any
	    connection.write(db_command, function(err) {
	      if(err != null) {
	        // Call the handler with an error
	        if(Array.isArray(db_command))
	          self.serverConfig._callHandler(db_command[0].getRequestId(), null, err);
	        else
	          self.serverConfig._callHandler(db_command.getRequestId(), null, err);
	      }
	    });
	  } else if(typeof callback === 'function' && onAll) {
	    var connections = self.serverConfig.allRawConnections();
	    var numberOfEntries = connections.length;
	    // Go through all the connections
	    for(var i = 0; i < connections.length; i++) {
	      // Fetch a connection
	      var connection = connections[i];

	      // Ensure we have a valid connection
	      if(connection == null) {
	        return callback(new Error("no open connections"));
	      } else if(connection instanceof Error) {
	        return callback(connection);
	      }

	      // Register the handler in the data structure
	      self.serverConfig._registerHandler(db_command, raw, connection, callback);

	      // Write the message out
	      connection.write(db_command, function(err) {
	        // Adjust the number of entries we need to process
	        numberOfEntries = numberOfEntries - 1;
	        // Remove listener
	        if(err != null) {
	          // Clean up listener and return error
	          self.serverConfig._removeHandler(db_command.getRequestId());
	        }

	        // No more entries to process callback with the error
	        if(numberOfEntries <= 0) {
	          callback(err);
	        }
	      });

	      // Update the db_command request id
	      db_command.updateRequestId();
	    }
	  } else {
	    // Fetch either a reader or writer dependent on the specified read option
	    // var connection = read == null || read == 'primary' || read == false ? self.serverConfig.checkoutWriter(true) : self.serverConfig.checkoutReader(read);
	    var connection = self.serverConfig.checkoutReader(read);
	    // Override connection if needed
	    connection = specifiedConnection != null ? specifiedConnection : connection;
	    // Ensure we have a valid connection
	    if(connection == null || connection instanceof Error || connection['message'] != null) return null;
	    // Write the message out
	    connection.write(db_command, function(err) {
	      if(err != null) {
	        // Emit the error
	        self.emit("error", err);
	      }
	    });
	  }
	}

	/**
	 * Execute db query command (not safe)
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeQueryCommand = function(db_command, options, callback) {
	  var self = this;

	  // Unpack the parameters
	  if (typeof callback === 'undefined') {
	    callback = options;
	    options = {};
	  }

	  // fast fail option used for HA, no retry
	  var failFast = options['failFast'] != null
	    ? options['failFast']
	    : false;

	  // Check if the user force closed the command
	  if(this._applicationClosed) {
	    var err = new Error("db closed by application");
	    if('function' == typeof callback) {
	      return callback(err, null);
	    } else {
	      throw err;
	    }
	  }

	  if(this.serverConfig.isDestroyed()) 
	    return callback(new Error("Connection was destroyed by application"));

	  // Specific connection
	  var connection = options.connection;
	  // Check if the connection is actually live
	  if(connection 
	    && (!connection.isConnected || !connection.isConnected())) connection = null;

	  // Get the configuration
	  var config = this.serverConfig;
	  var read = options.read;

	  if(!connection && !config.canRead(read) && !config.canWrite() && config.isAutoReconnect()) {
	    if(read == ReadPreference.PRIMARY 
	      || read == ReadPreference.PRIMARY_PREFERRED
	      || (read != null && typeof read == 'object' && read.mode)
	      || read == null) {
	      
	      // Save the command
	      self.serverConfig._commandsStore.read_from_writer(
	        {   type: 'query'
	          , db_command: db_command
	          , options: options
	          , callback: callback
	          , db: self
	          , executeQueryCommand: __executeQueryCommand
	          , executeInsertCommand: __executeInsertCommand
	        }
	      );
	    } else {
	      self.serverConfig._commandsStore.read(
	        {   type: 'query'
	          , db_command: db_command
	          , options: options
	          , callback: callback 
	          , db: self
	          , executeQueryCommand: __executeQueryCommand
	          , executeInsertCommand: __executeInsertCommand
	        }
	      );
	    }
	  } else if(!connection && !config.canRead(read) && !config.canWrite() && !config.isAutoReconnect()) {
	    return callback(new Error("no open connections"), null);
	  } else {
	    if(typeof callback == 'function') {
	      __executeQueryCommand(self, db_command, options, function (err, result, conn) {
	        callback(err, result, conn);
	      });          
	    } else {
	      __executeQueryCommand(self, db_command, options);
	    }
	  }
	};

	/**
	 * @ignore
	 */
	var __executeInsertCommand = function(self, db_command, options, callback) {
	  // Always checkout a writer for this kind of operations
	  var connection = self.serverConfig.checkoutWriter();
	  // Get safe mode
	  var safe = options['safe'] != null ? options['safe'] : false;
	  var raw = options['raw'] != null ? options['raw'] : self.raw;
	  var specifiedConnection = options['connection'] != null ? options['connection'] : null;
	  // Override connection if needed
	  connection = specifiedConnection != null ? specifiedConnection : connection;

	  // Ensure we have a valid connection
	  if(typeof callback === 'function') {
	    // Ensure we have a valid connection
	    if(connection == null) {
	      return callback(new Error("no open connections"));
	    } else if(connection instanceof Error) {
	      return callback(connection);
	    }

	    var errorOptions = _getWriteConcern(self, options, callback);
	    if(errorOptions.w > 0 || errorOptions.w == 'majority' || errorOptions.j || errorOptions.journal || errorOptions.fsync) {      
	      // db command is now an array of commands (original command + lastError)
	      db_command = [db_command, DbCommand.createGetLastErrorCommand(safe, self)];
	      // Register the handler in the data structure
	      self.serverConfig._registerHandler(db_command[1], raw, connection, callback);      
	    }
	  }

	  // If we have no callback and there is no connection
	  if(connection == null) return null;
	  if(connection instanceof Error && typeof callback == 'function') return callback(connection, null);
	  if(connection instanceof Error) return null;
	  if(connection == null && typeof callback == 'function') return callback(new Error("no primary server found"), null);

	  // Ensure we truly are connected
	  if(!connection.isConnected()) {
	    return self.serverConfig._commandsStore.write(
	      {   type:'insert'
	        , 'db_command':db_command
	        , 'options':options
	        , 'callback':callback
	        , db: self
	        , executeQueryCommand: __executeQueryCommand
	        , executeInsertCommand: __executeInsertCommand
	      }
	    );
	  }

	  // Write the message out
	  connection.write(db_command, function(err) {
	    // Return the callback if it's not a safe operation and the callback is defined
	    if(typeof callback === 'function' && (safe == null || safe == false)) {
	      // Perform the callback
	      callback(err, null);
	    } else if(typeof callback === 'function') {
	      // Call the handler with an error
	      self.serverConfig._callHandler(db_command[1].getRequestId(), null, err);
	    } else if(typeof callback == 'function' && safe && safe.w == -1) {
	      // Call the handler with no error
	      self.serverConfig._callHandler(db_command[1].getRequestId(), null, null);
	    } else if(!safe || safe.w == -1) {
	      self.emit("error", err);
	    }
	  });
	}

	/**
	 * Execute an insert Command
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeInsertCommand = function(db_command, options, callback) {
	  var self = this;

	  // Unpack the parameters
	  if(callback == null && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  // Ensure options are not null
	  options = options == null ? {} : options;

	  // Check if the user force closed the command
	  if(this._applicationClosed) {
	    if(typeof callback == 'function') {
	      return callback(new Error("db closed by application"), null);
	    } else {
	      throw new Error("db closed by application");
	    }
	  }

	  if(this.serverConfig.isDestroyed()) return callback(new Error("Connection was destroyed by application"));

	  // Specific connection
	  var connection = options.connection;
	  // Check if the connection is actually live
	  if(connection 
	    && (!connection.isConnected || !connection.isConnected())) connection = null;

	  // Get config
	  var config = self.serverConfig;
	  // Check if we are connected
	  if(!connection && !config.canWrite() && config.isAutoReconnect()) {
	    self.serverConfig._commandsStore.write(
	      {   type:'insert'
	        , 'db_command':db_command
	        , 'options':options
	        , 'callback':callback
	        , db: self
	        , executeQueryCommand: __executeQueryCommand
	        , executeInsertCommand: __executeInsertCommand
	      }
	    );
	  } else if(!connection && !config.canWrite() && !config.isAutoReconnect()) {
	    return callback(new Error("no open connections"), null);
	  } else {
	    __executeInsertCommand(self, db_command, options, callback);
	  }
	}

	/**
	 * Update command is the same
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeUpdateCommand = Db.prototype._executeInsertCommand;
	/**
	 * Remove command is the same
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeRemoveCommand = Db.prototype._executeInsertCommand;

	/**
	 * Wrap a Mongo error document into an Error instance.
	 * Deprecated. Use utils.toError instead.
	 *
	 * @ignore
	 * @api private
	 * @deprecated
	 */
	Db.prototype.wrap = utils.toError;

	/**
	 * Default URL
	 *
	 * @classconstant DEFAULT_URL
	 **/
	Db.DEFAULT_URL = 'mongodb://localhost:27017/default';

	/**
	 * Connect to MongoDB using a url as documented at
	 *
	 *  docs.mongodb.org/manual/reference/connection-string/
	 *
	 * Options
	 *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication
	 *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**
	 *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**
	 *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**
	 *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**
	 *
	 * @param {String} url connection url for MongoDB.
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the db instance or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Db.connect = function(url, options, callback) {
	  // Ensure correct mapping of the callback
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  // Ensure same behavior as previous version w:0
	  if(url.indexOf("safe") == -1 
	    && url.indexOf("w") == -1 
	    && url.indexOf("journal") == -1 && url.indexOf("j") == -1
	    && url.indexOf("fsync") == -1) options.w = 0;

	  // Avoid circular require problem
	  var MongoClient = __webpack_require__(353).MongoClient;
	  // Attempt to connect
	  MongoClient.connect.call(MongoClient, url, options, callback);
	}

	/**
	 * State of the db connection
	 * @ignore
	 */
	Object.defineProperty(Db.prototype, "state", { enumerable: true
	  , get: function () {
	      return this.serverConfig._serverState;
	    }
	});

	/**
	 * @ignore
	 */
	var _hasWriteConcern = function(errorOptions) {
	  return errorOptions == true
	    || errorOptions.w > 0
	    || errorOptions.w == 'majority'
	    || errorOptions.j == true
	    || errorOptions.journal == true
	    || errorOptions.fsync == true
	}

	/**
	 * @ignore
	 */
	var _setWriteConcernHash = function(options) {
	  var finalOptions = {};
	  if(options.w != null) finalOptions.w = options.w;  
	  if(options.journal == true) finalOptions.j = options.journal;
	  if(options.j == true) finalOptions.j = options.j;
	  if(options.fsync == true) finalOptions.fsync = options.fsync;
	  if(options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;  
	  return finalOptions;
	}

	/**
	 * @ignore
	 */
	var _getWriteConcern = function(self, options, callback) {
	  // Final options
	  var finalOptions = {w:1};
	  // Local options verification
	  if(options.w != null || typeof options.j == 'boolean' || typeof options.journal == 'boolean' || typeof options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(options);
	  } else if(options.safe != null && typeof options.safe == 'object') {
	    finalOptions = _setWriteConcernHash(options.safe);
	  } else if(typeof options.safe == "boolean") {
	    finalOptions = {w: (options.safe ? 1 : 0)};
	  } else if(self.options.w != null || typeof self.options.j == 'boolean' || typeof self.options.journal == 'boolean' || typeof self.options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.options);
	  } else if(self.safe.w != null || typeof self.safe.j == 'boolean' || typeof self.safe.journal == 'boolean' || typeof self.safe.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.safe);
	  } else if(typeof self.safe == "boolean") {
	    finalOptions = {w: (self.safe ? 1 : 0)};
	  }

	  // Ensure we don't have an invalid combination of write concerns
	  if(finalOptions.w < 1 
	    && (finalOptions.journal == true || finalOptions.j == true || finalOptions.fsync == true)) throw new Error("No acknowlegement using w < 1 cannot be combined with journal:true or fsync:true");

	  // Return the options
	  return finalOptions;
	}

	/**
	 * Legacy support
	 *
	 * @ignore
	 * @api private
	 */
	exports.connect = Db.connect;
	exports.Db = Db;

	/**
	 * Remove all listeners to the db instance.
	 * @ignore
	 * @api private
	 */
	Db.prototype.removeAllEventListeners = function() {
	  this.removeAllListeners("close");
	  this.removeAllListeners("error");
	  this.removeAllListeners("timeout");
	  this.removeAllListeners("parseError");
	  this.removeAllListeners("poolReady");
	  this.removeAllListeners("message");
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var ReadPreference = __webpack_require__(308).ReadPreference
	  , DbCommand = __webpack_require__(287).DbCommand
	  , inherits = __webpack_require__(267).inherits
	  , format = __webpack_require__(267).format
	  , timers = __webpack_require__(289)
	  , Server = __webpack_require__(345).Server
	  , utils = __webpack_require__(288)
	  , PingStrategy = __webpack_require__(349).PingStrategy
	  , StatisticsStrategy = __webpack_require__(350).StatisticsStrategy
	  , Options = __webpack_require__(351).Options
	  , ReplSetState = __webpack_require__(352).ReplSetState
	  , HighAvailabilityProcess = __webpack_require__(346).HighAvailabilityProcess
	  , Base = __webpack_require__(339).Base;

	const STATE_STARTING_PHASE_1 = 0;
	const STATE_PRIMARY = 1;
	const STATE_SECONDARY = 2;
	const STATE_RECOVERING = 3;
	const STATE_FATAL_ERROR = 4;
	const STATE_STARTING_PHASE_2 = 5;
	const STATE_UNKNOWN = 6;
	const STATE_ARBITER = 7;
	const STATE_DOWN = 8;
	const STATE_ROLLBACK = 9;

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	 * ReplSet constructor provides replicaset functionality
	 *
	 * Options
	 *  - **ha** {Boolean, default:true}, turn on high availability.
	 *  - **haInterval** {Number, default:2000}, time between each replicaset status check.
	 *  - **reconnectWait** {Number, default:1000}, time to wait in miliseconds before attempting reconnect.
	 *  - **retries** {Number, default:30}, number of times to attempt a replicaset reconnect.
	 *  - **rs_name** {String}, the name of the replicaset to connect to.
	 *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **strategy** {String, default:'ping'}, selection strategy for reads choose between (ping, statistical and none, default is ping)
	 *  - **secondaryAcceptableLatencyMS** {Number, default:15}, sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)
	 *  - **connectWithNoPrimary** {Boolean, default:false}, sets if the driver should connect even if no primary is available
	 *  - **connectArbiter** {Boolean, default:false}, sets if the driver should connect to arbiters or not.
	 *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.
	 *  - **poolSize** {Number, default:5}, number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
	 *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)
	 *  - **sslValidate** {Boolean, default:false}, validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCA** {Array, default:null}, Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCert** {Buffer/String, default:null}, String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslKey** {Buffer/String, default:null}, String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslPass** {Buffer/String, default:null}, String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
	 *
	 * @class Represents a 
	 Replicaset Configuration
	 * @param {Array} list of server objects participating in the replicaset.
	 * @param {Object} [options] additional options for the replicaset connection.
	 */
	var ReplSet = exports.ReplSet = function(servers, options) {
	  // Set up basic
	  if(!(this instanceof ReplSet))
	    return new ReplSet(servers, options);

	  // Set up event emitter
	  Base.call(this);

	  // Ensure we have a list of servers
	  if(!Array.isArray(servers)) throw Error("The parameter must be an array of servers and contain at least one server");
	  // Ensure no Mongos's
	  for(var i = 0; i < servers.length; i++) {
	    if(!(servers[i] instanceof Server)) throw new Error("list of servers must be of type Server");
	  }

	  // Save the options
	  this.options = new Options(options);
	  // Ensure basic validation of options
	  this.options.init();

	  // Server state
	  this._serverState = ReplSet.REPLSET_DISCONNECTED;
	  // Add high availability process
	  this._haProcess = new HighAvailabilityProcess(this, this.options);


	  // Let's iterate over all the provided server objects and decorate them
	  this.servers = this.options.decorateAndClean(servers, this._callBackStore);
	  // Throw error if no seed servers
	  if(this.servers.length == 0) throw new Error("No valid seed servers in the array");

	  // Let's set up our strategy object for picking secondaries
	  if(this.options.strategy == 'ping') {
	    // Create a new instance
	    this.strategyInstance = new PingStrategy(this, this.options.secondaryAcceptableLatencyMS);
	  } else if(this.options.strategy == 'statistical') {
	    // Set strategy as statistical
	    this.strategyInstance = new StatisticsStrategy(this);
	    // Add enable query information
	    this.enableRecordQueryStats(true);
	  }

	  this.emitOpen = this.options.emitOpen || true;
	  // Set up a clean state
	  this._state = new ReplSetState();
	  // Current round robin selected server
	  this._currentServerChoice = 0;
	  // Ensure up the server callbacks
	  for(var i = 0; i < this.servers.length; i++) {
	    this.servers[i]._callBackStore = this._callBackStore;
	    this.servers[i].name = format("%s:%s", this.servers[i].host, this.servers[i].port)
	    this.servers[i].replicasetInstance = this;
	    this.servers[i].options.auto_reconnect = false;
	    this.servers[i].inheritReplSetOptionsFrom(this);
	  }
	}

	/**
	 * @ignore
	 */
	inherits(ReplSet, Base);

	// Replicaset states
	ReplSet.REPLSET_CONNECTING = 'connecting';
	ReplSet.REPLSET_DISCONNECTED = 'disconnected';
	ReplSet.REPLSET_CONNECTED = 'connected';
	ReplSet.REPLSET_RECONNECTING = 'reconnecting';
	ReplSet.REPLSET_DESTROYED = 'destroyed';
	ReplSet.REPLSET_READ_ONLY = 'readonly';

	ReplSet.prototype.isAutoReconnect = function() {
	  return true;
	}

	ReplSet.prototype.canWrite = function() {
	  return this._state.master && this._state.master.isConnected();
	}

	ReplSet.prototype.canRead = function(read) {
	  if((read == ReadPreference.PRIMARY 
	      || read == null || read == false) && (this._state.master == null || !this._state.master.isConnected())) return false;
	  return Object.keys(this._state.secondaries).length > 0;
	}

	/**
	 * @ignore
	 */
	ReplSet.prototype.enableRecordQueryStats = function(enable) {
	  // Set the global enable record query stats
	  this.recordQueryStats = enable;

	  // Enable all the servers
	  for(var i = 0; i < this.servers.length; i++) {
	    this.servers[i].enableRecordQueryStats(enable);
	  }
	}

	/**
	 * @ignore
	 */
	ReplSet.prototype.setReadPreference = function(preference) {
	  this.options.readPreference = preference;
	}

	ReplSet.prototype.connect = function(parent, options, callback) {
	  if(this._serverState != ReplSet.REPLSET_DISCONNECTED) 
	    return callback(new Error("in process of connection"));

	  // If no callback throw
	  if(!(typeof callback == 'function')) 
	    throw new Error("cannot call ReplSet.prototype.connect with no callback function");

	  var self = this;
	  // Save db reference
	  this.options.db = parent;
	  // Set replicaset as connecting
	  this._serverState = ReplSet.REPLSET_CONNECTING
	  // Copy all the servers to our list of seeds
	  var candidateServers = this.servers.slice(0);
	  // Pop the first server
	  var server = candidateServers.pop();
	  server.name = format("%s:%s", server.host, server.port);
	  // Set up the options
	  var opts = {
	    returnIsMasterResults: true,
	    eventReceiver: server
	  }

	  // Register some event listeners
	  this.once("fullsetup", function(err, db, replset) {
	    // Set state to connected
	    self._serverState = ReplSet.REPLSET_CONNECTED;
	    // Stop any process running
	    if(self._haProcess) self._haProcess.stop();
	    // Start the HA process
	    self._haProcess.start();

	    // Emit fullsetup
	    processor(function() {
	      if(self.emitOpen)
	        self._emitAcrossAllDbInstances(self, null, "open", null, null, null);        

	      self._emitAcrossAllDbInstances(self, null, "fullsetup", null, null, null);        
	    });

	    // If we have a strategy defined start it
	    if(self.strategyInstance) {
	      self.strategyInstance.start();
	    }

	    // Finishing up the call
	    callback(err, db, replset);
	  });

	  // Errors
	  this.once("connectionError", function(err, result) {
	    callback(err, result);
	  });

	  // Attempt to connect to the server
	  server.connect(this.options.db, opts, _connectHandler(this, candidateServers, server));
	}

	ReplSet.prototype.close = function(callback) {  
	  var self = this;
	  // Set as destroyed
	  this._serverState = ReplSet.REPLSET_DESTROYED;
	  // Stop the ha
	  this._haProcess.stop();
	  
	  // If we have a strategy stop it
	  if(this.strategyInstance) {
	    this.strategyInstance.stop();
	  }

	  // Kill all servers available
	  for(var name in this._state.addresses) {
	    this._state.addresses[name].close();
	  }

	  // Clean out the state
	  this._state = new ReplSetState(); 
	  
	  // Emit close event
	  processor(function() {
	    self._emitAcrossAllDbInstances(self, null, "close", null, null, true)    
	  });

	  // Callback
	  if(typeof callback == 'function') 
	    return callback(null, null);
	}

	/**
	 * Creates a new server for the `replset` based on `host`.
	 *
	 * @param {String} host - host:port pair (localhost:27017)
	 * @param {ReplSet} replset - the ReplSet instance
	 * @return {Server}
	 * @ignore
	 */
	var createServer = function(self, host, options) {
	  // copy existing socket options to new server
	  var socketOptions = {}
	  if(options.socketOptions) {
	    var keys = Object.keys(options.socketOptions);
	    for(var k = 0; k < keys.length; k++) {
	      socketOptions[keys[k]] = options.socketOptions[keys[k]];
	    }
	  }

	  var parts = host.split(/:/);
	  if(1 === parts.length) {
	    parts[1] = Connection.DEFAULT_PORT;
	  }

	  socketOptions.host = parts[0];
	  socketOptions.port = parseInt(parts[1], 10);

	  var serverOptions = {
	    readPreference: options.readPreference,
	    socketOptions: socketOptions,
	    poolSize: options.poolSize,
	    logger: options.logger,
	    auto_reconnect: false,
	    ssl: options.ssl,
	    sslValidate: options.sslValidate,
	    sslCA: options.sslCA,
	    sslCert: options.sslCert,
	    sslKey: options.sslKey,
	    sslPass: options.sslPass
	  }

	  var server = new Server(socketOptions.host, socketOptions.port, serverOptions);
	  // Set up shared state
	  server._callBackStore = self._callBackStore;
	  server.replicasetInstance = self;
	  server.enableRecordQueryStats(self.recordQueryStats);
	  // Set up event handlers
	  server.on("close", _handler("close", self, server));
	  server.on("error", _handler("error", self, server));
	  server.on("timeout", _handler("timeout", self, server));
	  return server;
	}

	var _handler = function(event, self, server) {
	  return function(err, doc) {
	    // The event happened to a primary
	    // Remove it from play
	    if(self._state.isPrimary(server)) {
	      var current_master = self._state.master;
	      self._state.master = null;
	      self._serverState = ReplSet.REPLSET_READ_ONLY;
	    
	      if(current_master != null) {
	        // Unpack variables
	        var host = current_master.socketOptions.host;
	        var port = current_master.socketOptions.port;

	        // Fire error on any unknown callbacks
	        self.__executeAllServerSpecificErrorCallbacks(host, port, err);        
	      }
	    } else if(self._state.isSecondary(server)) {
	      delete self._state.secondaries[server.name];
	    }

	    // If there is no more connections left and the setting is not destroyed
	    // set to disconnected
	    if(Object.keys(self._state.addresses).length == 0 
	      && self._serverState != ReplSet.REPLSET_DESTROYED) {
	        self._serverState = ReplSet.REPLSET_DISCONNECTED;

	        // Emit close across all the attached db instances
	        self._dbStore.emit("close", new Error("replicaset disconnected, no valid servers contactable over tcp"), null, true);
	    }

	    // Unpack variables
	    var host = server.socketOptions.host;
	    var port = server.socketOptions.port;

	    // Fire error on any unknown callbacks
	    self.__executeAllServerSpecificErrorCallbacks(host, port, err);
	  }
	}

	var locateNewServers = function(self, state, candidateServers, ismaster) {
	  // Retrieve the host
	  var hosts = ismaster.hosts;
	  // In candidate servers
	  var inCandidateServers = function(name, candidateServers) {
	    for(var i = 0; i < candidateServers.length; i++) {
	      if(candidateServers[i].name == name) return true;
	    }

	    return false;
	  }

	  // New servers
	  var newServers = [];
	  if(Array.isArray(hosts)) {
	    // Let's go over all the hosts
	    for(var i = 0; i < hosts.length; i++) {
	      if(!state.contains(hosts[i]) 
	        && !inCandidateServers(hosts[i], candidateServers)) {
	          newServers.push(createServer(self, hosts[i], self.options));
	      }
	    }    
	  }

	  // Return list of possible new servers
	  return newServers;
	}

	var _connectHandler = function(self, candidateServers, instanceServer) {
	  return function(err, doc) {
	    // If we have an error add to the list
	    if(err) {
	      self._state.errors[instanceServer.name] = instanceServer;
	    } else {
	      delete self._state.errors[instanceServer.name];
	    }

	    if(!err) {      
	      var ismaster = doc.documents[0]

	      // Error the server if 
	      if(!ismaster.ismaster
	        && !ismaster.secondary) {
	        self._state.errors[instanceServer.name] = instanceServer;
	      }
	    }


	    // No error let's analyse the ismaster command
	    if(!err && self._state.errors[instanceServer.name] == null) {
	      var ismaster = doc.documents[0]

	      // If no replicaset name exists set the current one
	      if(self.options.rs_name == null) {
	        self.options.rs_name = ismaster.setName;
	      }

	      // If we have a member that is not part of the set let's finish up
	      if(typeof ismaster.setName == 'string' && ismaster.setName != self.options.rs_name) {
	        return self.emit("connectionError", new Error("Replicaset name " + ismaster.setName + " does not match specified name " + self.options.rs_name));
	      }

	      // Add the error handlers
	      instanceServer.on("close", _handler("close", self, instanceServer));
	      instanceServer.on("error", _handler("error", self, instanceServer));
	      instanceServer.on("timeout", _handler("timeout", self, instanceServer));
	      
	      // Set any tags on the instance server
	      instanceServer.name = ismaster.me;
	      instanceServer.tags = ismaster.tags;

	      // Add the server to the list
	      self._state.addServer(instanceServer, ismaster);

	      // Check if we have more servers to add (only check when done with initial set)
	      if(candidateServers.length == 0) {
	        // Get additional new servers that are not currently in set
	        var new_servers = locateNewServers(self, self._state, candidateServers, ismaster);

	        // Locate any new servers that have not errored out yet
	        for(var i = 0; i < new_servers.length; i++) {
	          if(self._state.errors[new_servers[i].name] == null) {
	            candidateServers.push(new_servers[i])            
	          }
	        }
	      }
	    }

	    // If the candidate server list is empty and no valid servers
	    if(candidateServers.length == 0 &&
	      !self._state.hasValidServers()) {
	        return self.emit("connectionError", new Error("No valid replicaset instance servers found"));
	    } else if(candidateServers.length == 0) {      
	      if(!self.options.connectWithNoPrimary && (self._state.master == null || !self._state.master.isConnected())) {
	        return self.emit("connectionError", new Error("No primary found in set"));
	      }
	      return self.emit("fullsetup", null, self.options.db, self);
	    }
	        
	    // Let's connect the next server    
	    var nextServer = candidateServers.pop();
	  
	    // Set up the options
	    var opts = {
	      returnIsMasterResults: true,
	      eventReceiver: nextServer
	    }

	    // Attempt to connect to the server
	    nextServer.connect(self.options.db, opts, _connectHandler(self, candidateServers, nextServer));
	  }
	}

	ReplSet.prototype.isDestroyed = function() {
	  return this._serverState == ReplSet.REPLSET_DESTROYED;
	}

	ReplSet.prototype.isConnected = function(read) {
	  var isConnected = false;  

	  if(read == null || read == ReadPreference.PRIMARY || read == false)
	    isConnected = this._state.master != null && this._state.master.isConnected();

	  if((read == ReadPreference.PRIMARY_PREFERRED || read == ReadPreference.SECONDARY_PREFERRED || read == ReadPreference.NEAREST)
	    && ((this._state.master != null && this._state.master.isConnected())
	    || (this._state && this._state.secondaries && Object.keys(this._state.secondaries).length > 0))) {
	      isConnected = true;
	  } else if(read == ReadPreference.SECONDARY) {
	    isConnected = this._state && this._state.secondaries && Object.keys(this._state.secondaries).length > 0;
	  }

	  // No valid connection return false
	  return isConnected;
	}

	ReplSet.prototype.isMongos = function() {
	  return false;
	}

	ReplSet.prototype.checkoutWriter = function() {
	  if(this._state.master) return this._state.master.checkoutWriter();
	  return new Error("no writer connection available");
	}

	ReplSet.prototype.processIsMaster = function(_server, _ismaster) {
	  // Server in recovery mode, remove it from available servers
	  if(!_ismaster.ismaster && !_ismaster.secondary) {
	    // Locate the actual server
	    var server = this._state.addresses[_server.name];
	    // Close the server, simulating the closing of the connection
	    // to get right removal semantics
	    if(server) server.close();
	    // Execute any callback errors
	    _handler(null, this, server)(new Error("server is in recovery mode"));
	  }
	}

	ReplSet.prototype.allRawConnections = function() {
	  var connections = [];

	  for(var name in this._state.addresses) {
	    connections = connections.concat(this._state.addresses[name].allRawConnections());
	  }

	  return connections;
	}

	/**
	 * @ignore
	 */
	ReplSet.prototype.allServerInstances = function() {
	  var self = this;
	  // If no state yet return empty
	  if(!self._state) return [];
	  // Close all the servers (concatenate entire list of servers first for ease)
	  var allServers = self._state.master != null ? [self._state.master] : [];

	  // Secondary keys
	  var keys = Object.keys(self._state.secondaries);
	  // Add all secondaries
	  for(var i = 0; i < keys.length; i++) {
	    allServers.push(self._state.secondaries[keys[i]]);
	  }

	  // Return complete list of all servers
	  return allServers;
	}

	/**
	 * @ignore
	 */
	ReplSet.prototype.checkoutReader = function(readPreference, tags) {
	  var connection = null;

	  // If we have a read preference object unpack it
	  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {
	    // Validate if the object is using a valid mode
	    if(!readPreference.isValid()) throw new Error("Illegal readPreference mode specified, " + readPreference.mode);
	    // Set the tag
	    tags = readPreference.tags;
	    readPreference = readPreference.mode;
	  } else if(typeof readPreference == 'object' && readPreference['_type'] != 'ReadPreference') {
	    return new Error("read preferences must be either a string or an instance of ReadPreference");
	  }

	  // Set up our read Preference, allowing us to override the readPreference
	  var finalReadPreference = readPreference != null ? readPreference : this.options.readPreference;

	  // Ensure we unpack a reference
	  if(finalReadPreference != null && typeof finalReadPreference == 'object' && finalReadPreference['_type'] == 'ReadPreference') {
	    // Validate if the object is using a valid mode
	    if(!finalReadPreference.isValid()) throw new Error("Illegal readPreference mode specified, " + finalReadPreference.mode);
	    // Set the tag
	    tags = finalReadPreference.tags;
	    readPreference = finalReadPreference.mode;
	  }

	  // Finalize the read preference setup
	  finalReadPreference = finalReadPreference == true ? ReadPreference.SECONDARY_PREFERRED : finalReadPreference;
	  finalReadPreference = finalReadPreference == null ? ReadPreference.PRIMARY : finalReadPreference;

	  // If we are reading from a primary
	  if(finalReadPreference == 'primary') {
	    // If we provide a tags set send an error
	    if(typeof tags == 'object' && tags != null) {
	      return new Error("PRIMARY cannot be combined with tags");
	    }

	    // If we provide a tags set send an error
	    if(this._state.master == null) {
	      return new Error("No replica set primary available for query with ReadPreference PRIMARY");
	    }

	    // Checkout a writer
	    return this.checkoutWriter();
	  }

	  // If we have specified to read from a secondary server grab a random one and read
	  // from it, otherwise just pass the primary connection
	  if((this.options.readSecondary || finalReadPreference == ReadPreference.SECONDARY_PREFERRED || finalReadPreference == ReadPreference.SECONDARY) && Object.keys(this._state.secondaries).length > 0) {
	    // If we have tags, look for servers matching the specific tag
	    if(this.strategyInstance != null) {
	      // Only pick from secondaries
	      var _secondaries = [];
	      for(var key in this._state.secondaries) {
	        _secondaries.push(this._state.secondaries[key]);
	      }

	      if(finalReadPreference == ReadPreference.SECONDARY) {
	        // Check out the nearest from only the secondaries
	        connection = this.strategyInstance.checkoutConnection(tags, _secondaries);
	      } else {
	        connection = this.strategyInstance.checkoutConnection(tags, _secondaries);
	        // No candidate servers that match the tags, error
	        if(connection == null || connection instanceof Error) {
	          // No secondary server avilable, attemp to checkout a primary server
	          connection = this.checkoutWriter();
	          // If no connection return an error
	          if(connection == null || connection instanceof Error) {
	            return new Error("No replica set members available for query");
	          }
	        }
	      }
	    } else if(tags != null && typeof tags == 'object') {
	      // Get connection
	      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {
	      // No candidate servers that match the tags, error
	      if(connection == null) {
	        return new Error("No replica set members available for query");
	      }
	    } else {
	      connection = _roundRobin(this, tags);
	    }
	  } else if(finalReadPreference == ReadPreference.PRIMARY_PREFERRED) {
	    // Check if there is a primary available and return that if possible
	    connection = this.checkoutWriter();
	    // If no connection available checkout a secondary
	    if(connection == null || connection instanceof Error) {
	      // If we have tags, look for servers matching the specific tag
	      if(tags != null && typeof tags == 'object') {
	        // Get connection
	        connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {
	        // No candidate servers that match the tags, error
	        if(connection == null) {
	          return new Error("No replica set members available for query");
	        }
	      } else {
	        connection = _roundRobin(this, tags);
	      }
	    }
	  } else if(finalReadPreference == ReadPreference.SECONDARY_PREFERRED) {
	    // If we have tags, look for servers matching the specific tag
	    if(this.strategyInstance != null) {
	      connection = this.strategyInstance.checkoutConnection(tags);
	      
	      // No candidate servers that match the tags, error
	      if(connection == null || connection instanceof Error) {
	        // No secondary server avilable, attemp to checkout a primary server
	        connection = this.checkoutWriter();
	        // If no connection return an error
	        if(connection == null || connection instanceof Error) {
	          var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;
	          return new Error("No replica set member available for query with ReadPreference " + preferenceName + " and tags " + JSON.stringify(tags));
	        }
	      }
	    } else if(tags != null && typeof tags == 'object') {
	      // Get connection
	      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {
	      // No candidate servers that match the tags, error
	      if(connection == null) {
	        // No secondary server avilable, attemp to checkout a primary server
	        connection = this.checkoutWriter();
	        // If no connection return an error
	        if(connection == null || connection instanceof Error) {
	          var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;
	          return new Error("No replica set member available for query with ReadPreference " + preferenceName + " and tags " + JSON.stringify(tags));
	        }
	      }
	    }
	  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance != null) {
	    connection = this.strategyInstance.checkoutConnection(tags);
	  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance == null) {
	    return new Error("A strategy for calculating nearness must be enabled such as ping or statistical");
	  } else if(finalReadPreference == ReadPreference.SECONDARY && Object.keys(this._state.secondaries).length == 0) {
	    if(tags != null && typeof tags == 'object') {
	      var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;
	      return new Error("No replica set member available for query with ReadPreference " + preferenceName + " and tags " + JSON.stringify(tags));
	    } else {
	      return new Error("No replica set secondary available for query with ReadPreference SECONDARY");
	    }
	  } else {
	    connection = this.checkoutWriter();
	  }

	  // Return the connection
	  return connection;
	}

	/**
	 * @ignore
	 */
	var _pickFromTags = function(self, tags) {
	  // If we have an array or single tag selection
	  var tagObjects = Array.isArray(tags) ? tags : [tags];
	  // Iterate over all tags until we find a candidate server
	  for(var _i = 0; _i < tagObjects.length; _i++) {
	    // Grab a tag object
	    var tagObject = tagObjects[_i];
	    // Matching keys
	    var matchingKeys = Object.keys(tagObject);
	    // Match all the servers that match the provdided tags
	    var keys = Object.keys(self._state.secondaries);
	    var candidateServers = [];

	    for(var i = 0; i < keys.length; i++) {
	      var server = self._state.secondaries[keys[i]];
	      // If we have tags match
	      if(server.tags != null) {
	        var matching = true;
	        // Ensure we have all the values
	        for(var j = 0; j < matchingKeys.length; j++) {
	          if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {
	            matching = false;
	            break;
	          }
	        }

	        // If we have a match add it to the list of matching servers
	        if(matching) {
	          candidateServers.push(server);
	        }
	      }
	    }

	    // If we have a candidate server return
	    if(candidateServers.length > 0) {
	      if(self.strategyInstance) return self.strategyInstance.checkoutConnection(tags, candidateServers);
	      // Set instance to return
	      return candidateServers[Math.floor(Math.random() * candidateServers.length)].checkoutReader();
	    }
	  }

	  // No connection found
	  return null;
	}

	/**
	 * Pick a secondary using round robin
	 *
	 * @ignore
	 */
	function _roundRobin (replset, tags) {
	  var keys = Object.keys(replset._state.secondaries);
	  // Update index
	  replset._currentServerChoice = replset._currentServerChoice + 1;
	  // Pick a server
	  var key = keys[replset._currentServerChoice % keys.length];

	  var conn = null != replset._state.secondaries[key]
	    ? replset._state.secondaries[key].checkoutReader()
	    : null;

	  // If connection is null fallback to first available secondary
	  if(null == conn) {
	    conn = pickFirstConnectedSecondary(replset, tags);
	  }

	  return conn;
	}

	/**
	 * @ignore
	 */
	var pickFirstConnectedSecondary = function pickFirstConnectedSecondary(self, tags) {
	  var keys = Object.keys(self._state.secondaries);
	  var connection;

	  // Find first available reader if any
	  for(var i = 0; i < keys.length; i++) {
	    connection = self._state.secondaries[keys[i]].checkoutReader();
	    if(connection) return connection;
	  }

	  // If we still have a null, read from primary if it's not secondary only
	  if(self._readPreference == ReadPreference.SECONDARY_PREFERRED) {
	    connection = self._state.master.checkoutReader();
	    if(connection) return connection;
	  }

	  var preferenceName = self._readPreference == ReadPreference.SECONDARY_PREFERRED
	    ? 'secondary'
	    : self._readPreference;

	  return new Error("No replica set member available for query with ReadPreference "
	                  + preferenceName + " and tags " + JSON.stringify(tags));
	}

	/**
	 * Get list of secondaries
	 * @ignore
	 */
	Object.defineProperty(ReplSet.prototype, "secondaries", {enumerable: true
	  , get: function() {
	      return utils.objectToArray(this._state.secondaries);
	    }
	});

	/**
	 * Get list of secondaries
	 * @ignore
	 */
	Object.defineProperty(ReplSet.prototype, "arbiters", {enumerable: true
	  , get: function() {
	      return utils.objectToArray(this._state.arbiters);
	    }
	});



/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var Server = __webpack_require__(345).Server
	  , format = __webpack_require__(267).format;

	// The ping strategy uses pings each server and records the
	// elapsed time for the server so it can pick a server based on lowest
	// return time for the db command {ping:true}
	var PingStrategy = exports.PingStrategy = function(replicaset, secondaryAcceptableLatencyMS) {
	  this.replicaset = replicaset;
	  this.secondaryAcceptableLatencyMS = secondaryAcceptableLatencyMS;
	  this.state = 'disconnected';
	  this.pingInterval = 5000;
	  // Class instance
	  this.Db = __webpack_require__(347).Db;
	  // Active db connections
	  this.dbs = {};
	  // Current server index
	  this.index = 0;
	  // Logger api
	  this.Logger = null;
	}

	// Starts any needed code
	PingStrategy.prototype.start = function(callback) {
	  // already running?
	  if ('connected' == this.state) return;

	  this.state = 'connected';

	  // Start ping server
	  this._pingServer(callback);
	}

	// Stops and kills any processes running
	PingStrategy.prototype.stop = function(callback) {
	  // Stop the ping process
	  this.state = 'disconnected';

	  // Stop all the server instances
	  for(var key in this.dbs) {
	    this.dbs[key].close();
	  }

	  // optional callback
	  callback && callback(null, null);
	}

	PingStrategy.prototype.checkoutConnection = function(tags, secondaryCandidates) {
	  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS
	  // Create a list of candidat servers, containing the primary if available
	  var candidateServers = [];
	  var self = this;

	  // If we have not provided a list of candidate servers use the default setup
	  if(!Array.isArray(secondaryCandidates)) {
	    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];
	    // Add all the secondaries
	    var keys = Object.keys(this.replicaset._state.secondaries);
	    for(var i = 0; i < keys.length; i++) {
	      candidateServers.push(this.replicaset._state.secondaries[keys[i]])
	    }
	  } else {
	    candidateServers = secondaryCandidates;
	  }

	  // Final list of eligable server
	  var finalCandidates = [];

	  // If we have tags filter by tags
	  if(tags != null && typeof tags == 'object') {
	    // If we have an array or single tag selection
	    var tagObjects = Array.isArray(tags) ? tags : [tags];
	    // Iterate over all tags until we find a candidate server
	    for(var _i = 0; _i < tagObjects.length; _i++) {
	      // Grab a tag object
	      var tagObject = tagObjects[_i];
	      // Matching keys
	      var matchingKeys = Object.keys(tagObject);
	      // Remove any that are not tagged correctly
	      for(var i = 0; i < candidateServers.length; i++) {
	        var server = candidateServers[i];
	        // If we have tags match
	        if(server.tags != null) {
	          var matching = true;

	          // Ensure we have all the values
	          for(var j = 0; j < matchingKeys.length; j++) {
	            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {
	              matching = false;
	              break;
	            }
	          }

	          // If we have a match add it to the list of matching servers
	          if(matching) {
	            finalCandidates.push(server);
	          }
	        }
	      }
	    }
	  } else {
	    // Final array candidates
	    var finalCandidates = candidateServers;
	  }

	  // Sort by ping time
	  finalCandidates.sort(function(a, b) {
	    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];
	  });

	  if(0 === finalCandidates.length)
	    return new Error("No replica set members available for query");

	  // find lowest server with a ping time
	  var lowest = finalCandidates.filter(function (server) {
	    return undefined != server.runtimeStats.pingMs;
	  })[0];

	  if(!lowest) {
	    lowest = finalCandidates[0];
	  }

	  // convert to integer
	  var lowestPing = lowest.runtimeStats.pingMs | 0;
	  
	  // determine acceptable latency
	  var acceptable = lowestPing + this.secondaryAcceptableLatencyMS;

	  // remove any server responding slower than acceptable
	  var len = finalCandidates.length;
	  while(len--) {
	    if(finalCandidates[len].runtimeStats['pingMs'] > acceptable) {
	      finalCandidates.splice(len, 1);
	    }
	  }

	  if(self.logger && self.logger.debug) {    
	    self.logger.debug("Ping strategy selection order for tags", tags);
	    finalCandidates.forEach(function(c) {
	      self.logger.debug(format("%s:%s = %s ms", c.host, c.port, c.runtimeStats['pingMs']), null);
	    })    
	  }

	  // If no candidates available return an error
	  if(finalCandidates.length == 0)
	    return new Error("No replica set members available for query");

	  // Ensure no we don't overflow
	  this.index = this.index % finalCandidates.length
	  // Pick a random acceptable server  
	  var connection = finalCandidates[this.index].checkoutReader();
	  // Point to next candidate (round robin style)
	  this.index = this.index + 1;

	  if(self.logger && self.logger.debug) {    
	    if(connection)
	      self.logger.debug("picked server %s:%s", connection.socketOptions.host, connection.socketOptions.port);
	  }

	  return connection;
	}

	PingStrategy.prototype._pingServer = function(callback) {
	  var self = this;

	  // Ping server function
	  var pingFunction = function() {
	    // Our state changed to disconnected or destroyed return
	    if(self.state == 'disconnected' || self.state == 'destroyed') return;
	    // If the replicaset is destroyed return
	    if(self.replicaset.isDestroyed() || self.replicaset._serverState == 'disconnected') return

	    // Create a list of all servers we can send the ismaster command to
	    var allServers = self.replicaset._state.master != null ? [self.replicaset._state.master] : [];

	    // Secondary keys
	    var keys = Object.keys(self.replicaset._state.secondaries);
	    // Add all secondaries
	    for(var i = 0; i < keys.length; i++) {
	      allServers.push(self.replicaset._state.secondaries[keys[i]]);
	    }

	    // Number of server entries
	    var numberOfEntries = allServers.length;

	    // We got keys
	    for(var i = 0; i < allServers.length; i++) {

	      // We got a server instance
	      var server = allServers[i];

	      // Create a new server object, avoid using internal connections as they might
	      // be in an illegal state
	      new function(serverInstance) {
	        var _db = self.dbs[serverInstance.host + ":" + serverInstance.port];
	        // If we have a db
	        if(_db != null) {
	          // Startup time of the command
	          var startTime = Date.now();

	          // Execute ping command in own scope
	          var _ping = function(__db, __serverInstance) {
	            // Execute ping on this connection
	            __db.executeDbCommand({ping:1}, {failFast:true}, function(err) {
	              if(err) {
	                delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                __db.close();
	                return done();
	              }

	              if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {
	                __serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;
	              }

	              __db.executeDbCommand({ismaster:1}, {failFast:true}, function(err, result) {
	                if(err) {
	                  delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                  __db.close();
	                  return done();
	                }

	                // Process the ismaster for the server
	                if(result && result.documents && self.replicaset.processIsMaster) {
	                  self.replicaset.processIsMaster(__serverInstance, result.documents[0]);
	                }

	                // Done with the pinging
	                done();
	              });
	            });            
	          };
	          // Ping
	          _ping(_db, serverInstance);
	        } else {
	          var connectTimeoutMS = self.replicaset.options.socketOptions 
	            ? self.replicaset.options.socketOptions.connectTimeoutMS : 0

	          // Create a new master connection
	          var _server = new Server(serverInstance.host, serverInstance.port, {
	            auto_reconnect: false,
	            returnIsMasterResults: true,
	            slaveOk: true,
	            poolSize: 1,
	            socketOptions: { connectTimeoutMS: connectTimeoutMS },
	            ssl: self.replicaset.ssl,
	            sslValidate: self.replicaset.sslValidate,
	            sslCA: self.replicaset.sslCA,
	            sslCert: self.replicaset.sslCert,
	            sslKey: self.replicaset.sslKey,
	            sslPass: self.replicaset.sslPass
	          });

	          // Create Db instance        
	          var _db = new self.Db('local', _server, { safe: true });
	          _db.on("close", function() {
	            delete self.dbs[this.serverConfig.host + ":" + this.serverConfig.port];
	          })

	          var _ping = function(__db, __serverInstance) {
	            if(self.state == 'disconnected') {
	              self.stop();
	              return;
	            }

	            __db.open(function(err, db) {              
	              if(self.state == 'disconnected' && __db != null) {
	                return __db.close();
	              }

	              if(err) {
	                delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                __db.close();
	                return done();
	              }

	              // Save instance
	              self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port] = __db;

	              // Startup time of the command
	              var startTime = Date.now();

	              // Execute ping on this connection
	              __db.executeDbCommand({ping:1}, {failFast:true}, function(err) {
	                if(err) {
	                  delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                  __db.close();
	                  return done();
	                }

	                if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {
	                  __serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;
	                }

	                __db.executeDbCommand({ismaster:1}, {failFast:true}, function(err, result) {
	                  if(err) {
	                    delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                    __db.close();
	                    return done();
	                  }
	    
	                  // Process the ismaster for the server
	                  if(result && result.documents && self.replicaset.processIsMaster) {
	                    self.replicaset.processIsMaster(__serverInstance, result.documents[0]);
	                  }

	                  // Done with the pinging
	                  done();
	                });
	              });
	            });            
	          };

	          // Ping the server
	          _ping(_db, serverInstance);
	        }

	        function done() {
	          // Adjust the number of checks
	          numberOfEntries--;

	          // If we are done with all results coming back trigger ping again
	          if(0 === numberOfEntries && 'connected' == self.state) {
	            setTimeout(pingFunction, self.pingInterval);
	          }
	        }
	      }(server);
	    }
	  }

	  // Start pingFunction
	  pingFunction();

	  callback && callback(null);
	}


/***/ },
/* 350 */
/***/ function(module, exports) {

	// The Statistics strategy uses the measure of each end-start time for each
	// query executed against the db to calculate the mean, variance and standard deviation
	// and pick the server which the lowest mean and deviation
	var StatisticsStrategy = exports.StatisticsStrategy = function(replicaset) {
	  this.replicaset = replicaset;
	  // Logger api
	  this.Logger = null;  
	}

	// Starts any needed code
	StatisticsStrategy.prototype.start = function(callback) {
	  callback && callback(null, null);
	}

	StatisticsStrategy.prototype.stop = function(callback) {
	  callback && callback(null, null);
	}

	StatisticsStrategy.prototype.checkoutConnection = function(tags, secondaryCandidates) {
	  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS
	  // Create a list of candidat servers, containing the primary if available
	  var candidateServers = [];

	  // If we have not provided a list of candidate servers use the default setup
	  if(!Array.isArray(secondaryCandidates)) {
	    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];
	    // Add all the secondaries
	    var keys = Object.keys(this.replicaset._state.secondaries);
	    for(var i = 0; i < keys.length; i++) {
	      candidateServers.push(this.replicaset._state.secondaries[keys[i]])
	    }
	  } else {
	    candidateServers = secondaryCandidates;
	  }

	  // Final list of eligable server
	  var finalCandidates = [];

	  // If we have tags filter by tags
	  if(tags != null && typeof tags == 'object') {
	    // If we have an array or single tag selection
	    var tagObjects = Array.isArray(tags) ? tags : [tags];
	    // Iterate over all tags until we find a candidate server
	    for(var _i = 0; _i < tagObjects.length; _i++) {
	      // Grab a tag object
	      var tagObject = tagObjects[_i];
	      // Matching keys
	      var matchingKeys = Object.keys(tagObject);
	      // Remove any that are not tagged correctly
	      for(var i = 0; i < candidateServers.length; i++) {
	        var server = candidateServers[i];
	        // If we have tags match
	        if(server.tags != null) {
	          var matching = true;

	          // Ensure we have all the values
	          for(var j = 0; j < matchingKeys.length; j++) {
	            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {
	              matching = false;
	              break;
	            }
	          }

	          // If we have a match add it to the list of matching servers
	          if(matching) {
	            finalCandidates.push(server);
	          }
	        }
	      }
	    }
	  } else {
	    // Final array candidates
	    var finalCandidates = candidateServers;
	  }

	  // If no candidates available return an error
	  if(finalCandidates.length == 0) return new Error("No replica set members available for query");
	  // Pick a random server
	  return finalCandidates[Math.round(Math.random(1000000) * (finalCandidates.length - 1))].checkoutReader();
	}


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	var PingStrategy = __webpack_require__(349).PingStrategy
	  , StatisticsStrategy = __webpack_require__(350).StatisticsStrategy
	  , ReadPreference = __webpack_require__(308).ReadPreference;

	var Options = function(options) {
	  options = options || {};
	  this._options = options;
	  this.ha = options.ha || true;
	  this.haInterval = options.haInterval || 2000;
	  this.reconnectWait = options.reconnectWait || 1000;
	  this.retries = options.retries || 30;
	  this.rs_name = options.rs_name;
	  this.socketOptions = options.socketOptions || {};
	  this.readPreference = options.readPreference;
	  this.readSecondary = options.read_secondary;
	  this.poolSize = options.poolSize == null ? 5 : options.poolSize;
	  this.strategy = options.strategy || 'ping';
	  this.secondaryAcceptableLatencyMS = options.secondaryAcceptableLatencyMS || 15;
	  this.connectArbiter = options.connectArbiter || false;
	  this.connectWithNoPrimary = options.connectWithNoPrimary || false;
	  this.logger = options.logger;
	  this.ssl = options.ssl || false;
	  this.sslValidate = options.sslValidate || false;
	  this.sslCA = options.sslCA;
	  this.sslCert = options.sslCert;
	  this.sslKey = options.sslKey;
	  this.sslPass = options.sslPass;
	  this.emitOpen = options.emitOpen || true;
	}

	Options.prototype.init = function() {
	  if(this.sslValidate && (!Array.isArray(this.sslCA) || this.sslCA.length == 0)) {
	    throw new Error("The driver expects an Array of CA certificates in the sslCA parameter when enabling sslValidate");
	  }  

	  // Make sure strategy is one of the two allowed
	  if(this.strategy != null && (this.strategy != 'ping' && this.strategy != 'statistical' && this.strategy != 'none')) 
	      throw new Error("Only ping or statistical strategies allowed");    
	  
	  if(this.strategy == null) this.strategy = 'ping';
	  
	  // Set logger if strategy exists
	  if(this.strategyInstance) this.strategyInstance.logger = this.logger;

	  // Unpack read Preference
	  var readPreference = this.readPreference;
	  // Validate correctness of Read preferences
	  if(readPreference != null) {
	    if(readPreference != ReadPreference.PRIMARY && readPreference != ReadPreference.PRIMARY_PREFERRED
	      && readPreference != ReadPreference.SECONDARY && readPreference != ReadPreference.SECONDARY_PREFERRED
	      && readPreference != ReadPreference.NEAREST && typeof readPreference != 'object' && readPreference['_type'] != 'ReadPreference') {
	      throw new Error("Illegal readPreference mode specified, " + readPreference);
	    }

	    this.readPreference = readPreference;
	  } else {
	    this.readPreference = null;
	  } 

	     // Ensure read_secondary is set correctly
	  if(this.readSecondary != null)
	    this.readSecondary = this.readPreference == ReadPreference.PRIMARY 
	        || this.readPreference == false  
	        || this.readPreference == null ? false : true;

	  // Ensure correct slave set
	  if(this.readSecondary) this.slaveOk = true;

	  // Set up logger if any set
	  this.logger = this.logger != null
	    && (typeof this.logger.debug == 'function')
	    && (typeof this.logger.error == 'function')
	    && (typeof this.logger.debug == 'function')
	      ? this.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};  

	  // Connection timeout
	  this.connectTimeoutMS = this.socketOptions.connectTimeoutMS
	    ? this.socketOptions.connectTimeoutMS
	    : 1000;

	  // Socket connection timeout
	  this.socketTimeoutMS = this.socketOptions.socketTimeoutMS
	    ? this.socketOptions.socketTimeoutMS
	    : 30000;
	}

	Options.prototype.decorateAndClean = function(servers, callBackStore) {
	  var self = this;

	  // var de duplicate list
	  var uniqueServers = {};
	  // De-duplicate any servers in the seed list
	  for(var i = 0; i < servers.length; i++) {
	    var server = servers[i];
	    // If server does not exist set it
	    if(uniqueServers[server.host + ":" + server.port] == null) {
	      uniqueServers[server.host + ":" + server.port] = server;
	    }
	  }

	  // Let's set the deduplicated list of servers
	  var finalServers = [];
	  // Add the servers
	  for(var key in uniqueServers) {
	    finalServers.push(uniqueServers[key]);
	  }

	  finalServers.forEach(function(server) {
	    // Ensure no server has reconnect on
	    server.options.auto_reconnect = false;
	    // Set up ssl options
	    server.ssl = self.ssl;
	    server.sslValidate = self.sslValidate;
	    server.sslCA = self.sslCA;
	    server.sslCert = self.sslCert;
	    server.sslKey = self.sslKey;
	    server.sslPass = self.sslPass;
	    server.poolSize = self.poolSize;
	    // Set callback store
	    server._callBackStore = callBackStore;
	  });

	  return finalServers;
	}

	exports.Options = Options;


/***/ },
/* 352 */
/***/ function(module, exports) {

	/**
	 * Interval state object constructor
	 *
	 * @ignore
	 */
	var ReplSetState = function ReplSetState () {
	  this.errorMessages = [];
	  this.secondaries = {};
	  this.addresses = {};
	  this.arbiters = {};
	  this.passives = {};
	  this.members = [];
	  this.errors = {};
	  this.setName = null;
	  this.master = null;
	}

	ReplSetState.prototype.hasValidServers = function() {
	  var validServers = [];
	  if(this.master && this.master.isConnected()) return true;

	  if(this.secondaries) {
	    var keys = Object.keys(this.secondaries)
	    for(var i = 0; i < keys.length; i++) {
	      if(this.secondaries[keys[i]].isConnected())
	        return true;
	    }
	  }

	  return false;
	}

	ReplSetState.prototype.getAllReadServers = function() {
	  var candidate_servers = [];
	  for(var name in this.addresses) {
	    candidate_servers.push(this.addresses[name]);
	  }

	  // Return all possible read candidates
	  return candidate_servers;
	}

	ReplSetState.prototype.addServer = function(server, master) {
	  server.name = master.me;

	  if(master.ismaster) {
	    this.master = server;
	    this.addresses[server.name] = server;
	  } else if(master.secondary) {
	    this.secondaries[server.name] = server;
	    this.addresses[server.name] = server;
	  } else if(master.arbiters) {
	    this.arbiters[server.name] = server;
	    this.addresses[server.name] = server;
	  }
	}

	ReplSetState.prototype.contains = function(host) {
	  return this.addresses[host] != null;
	}

	ReplSetState.prototype.isPrimary = function(server) {
	  return this.master && this.master.name == server.name;
	}

	ReplSetState.prototype.isSecondary = function(server) {
	  return this.secondaries[server.name] != null;
	}

	exports.ReplSetState = ReplSetState;


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Db = __webpack_require__(347).Db
	  , Server = __webpack_require__(345).Server
	  , Mongos = __webpack_require__(344).Mongos
	  , ReplSet = __webpack_require__(348).ReplSet
	  , ReadPreference = __webpack_require__(308).ReadPreference
	  , inherits = __webpack_require__(267).inherits
	  , EventEmitter = __webpack_require__(311).EventEmitter
	  , parse = __webpack_require__(354).parse;

	/**
	 * Create a new MongoClient instance.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **native_parser** {Boolean, default:false}, use c++ bson parser.
	 *  - **forceServerObjectId** {Boolean, default:false}, force server to create _id fields instead of client.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions.
	 *  - **raw** {Boolean, default:false}, peform operations using raw bson buffers.
	 *  - **recordQueryStats** {Boolean, default:false}, record query statistics during execution.
	 *  - **retryMiliSeconds** {Number, default:5000}, number of miliseconds between retries.
	 *  - **numberOfRetries** {Number, default:5}, number of retries off connection.
	 * 
	 * Deprecated Options 
	 *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.
	 *
	 * @class Represents a MongoClient
	 * @param {Object} serverConfig server config object.
	 * @param {Object} [options] additional options for the collection.
	 */
	function MongoClient(serverConfig, options) {
	  if(serverConfig != null) {
	    options = options == null ? {} : options;
	    // If no write concern is set set the default to w:1
	    if(options != null && !options.journal && !options.w && !options.fsync) {
	      options.w = 1;
	    }
	    
	    // The internal db instance we are wrapping
	    this._db = new Db('test', serverConfig, options);    
	  }
	}

	/**
	 * @ignore
	 */
	inherits(MongoClient, EventEmitter);

	/**
	 * Connect to MongoDB using a url as documented at
	 *
	 *  docs.mongodb.org/manual/reference/connection-string/
	 *
	 * Options
	 *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication
	 *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**
	 *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**
	 *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**
	 *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**
	 *
	 * @param {String} url connection url for MongoDB.
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the initialized db object or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.prototype.connect = function(url, options, callback) {
	  var self = this;

	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  MongoClient.connect(url, options, function(err, db) {
	    if(err) return callback(err, db);
	    // Store internal db instance reference
	    self._db = db;
	    // Emit open and perform callback
	    self.emit("open", err, db);
	    callback(err, db);
	  });
	}

	/**
	 * Initialize the database connection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the connected mongoclient or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.prototype.open = function(callback) {
	  // Self reference
	  var self = this;
	  // Open the db
	  this._db.open(function(err, db) {
	    if(err) return callback(err, null);
	    // Emit open event
	    self.emit("open", err, db);
	    // Callback
	    callback(null, self);
	  })
	}

	/**
	 * Close the current db connection, including all the child db instances. Emits close event if no callback is provided.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the close method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.prototype.close = function(callback) {
	  this._db.close(callback);
	}

	/**
	 * Create a new Db instance sharing the current socket connections.
	 *
	 * @param {String} dbName the name of the database we want to use.
	 * @return {Db} a db instance using the new database.
	 * @api public
	 */
	MongoClient.prototype.db = function(dbName) {
	  return this._db.db(dbName);
	}

	/**
	 * Connect to MongoDB using a url as documented at
	 *
	 *  docs.mongodb.org/manual/reference/connection-string/
	 *
	 * Options
	 *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication
	 *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**
	 *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**
	 *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**
	 *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**
	 *
	 * @param {String} url connection url for MongoDB.
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the initialized db object or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.connect = function(url, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;
	  options = args.length ? args.shift() : null;
	  options = options || {};

	  // Set default empty server options  
	  var serverOptions = options.server || {};
	  var mongosOptions = options.mongos || {};
	  var replSetServersOptions = options.replSet || options.replSetServers || {};
	  var dbOptions = options.db || {};

	  // If callback is null throw an exception
	  if(callback == null) 
	    throw new Error("no callback function provided");

	  // Parse the string
	  var object = parse(url, options);
	  // Merge in any options for db in options object
	  if(dbOptions) {
	    for(var name in dbOptions) object.db_options[name] = dbOptions[name];
	  }

	  // Added the url to the options
	  object.db_options.url = url;

	  // Merge in any options for server in options object
	  if(serverOptions) {
	    for(var name in serverOptions) object.server_options[name] = serverOptions[name];
	  }

	  // Merge in any replicaset server options
	  if(replSetServersOptions) {
	    for(var name in replSetServersOptions) object.rs_options[name] = replSetServersOptions[name];    
	  }

	  // Merge in any replicaset server options
	  if(mongosOptions) {
	    for(var name in mongosOptions) object.mongos_options[name] = mongosOptions[name];    
	  }

	  // We need to ensure that the list of servers are only either direct members or mongos
	  // they cannot be a mix of monogs and mongod's
	  var totalNumberOfServers = object.servers.length;
	  var totalNumberOfMongosServers = 0;
	  var totalNumberOfMongodServers = 0;
	  var serverConfig = null;
	  var errorServers = {};

	  // Failure modes
	  if(object.servers.length == 0) throw new Error("connection string must contain at least one seed host");

	  // If we have no db setting for the native parser try to set the c++ one first
	  object.db_options.native_parser = _setNativeParser(object.db_options);
	  // If no auto_reconnect is set, set it to true as default for single servers
	  if(typeof object.server_options.auto_reconnect != 'boolean') {
	    object.server_options.auto_reconnect = true;
	  }

	  // If we have more than a server, it could be replicaset or mongos list
	  // need to verify that it's one or the other and fail if it's a mix
	  // Connect to all servers and run ismaster
	  for(var i = 0; i < object.servers.length; i++) {
	    // Set up socket options
	    var _server_options = {poolSize:1, socketOptions:{connectTimeoutMS:1000}, auto_reconnect:false};

	    // Ensure we have ssl setup for the servers
	    if(object.rs_options.ssl) {
	      _server_options.ssl = object.rs_options.ssl;
	      _server_options.sslValidate = object.rs_options.sslValidate;
	      _server_options.sslCA = object.rs_options.sslCA;
	      _server_options.sslCert = object.rs_options.sslCert;
	      _server_options.sslKey = object.rs_options.sslKey;
	      _server_options.sslPass = object.rs_options.sslPass;
	    } else if(object.server_options.ssl) {
	      _server_options.ssl = object.server_options.ssl;
	      _server_options.sslValidate = object.server_options.sslValidate;
	      _server_options.sslCA = object.server_options.sslCA;
	      _server_options.sslCert = object.server_options.sslCert;
	      _server_options.sslKey = object.server_options.sslKey;
	      _server_options.sslPass = object.server_options.sslPass;
	    }

	    // Set up the Server object
	    var _server = object.servers[i].domain_socket 
	        ? new Server(object.servers[i].domain_socket, _server_options)
	        : new Server(object.servers[i].host, object.servers[i].port, _server_options);

	    var connectFunction = function(__server) { 
	      // Attempt connect
	      new Db(object.dbName, __server, {safe:false, native_parser:false}).open(function(err, db) {
	        // Update number of servers
	        totalNumberOfServers = totalNumberOfServers - 1;          
	        // If no error do the correct checks
	        if(!err) {
	          // Close the connection
	          db.close(true);
	          var isMasterDoc = db.serverConfig.isMasterDoc;
	          // Check what type of server we have
	          if(isMasterDoc.setName) totalNumberOfMongodServers++;
	          if(isMasterDoc.msg && isMasterDoc.msg == "isdbgrid") totalNumberOfMongosServers++;
	        } else {
	          errorServers[__server.host + ":" + __server.port] = __server;
	        }

	        if(totalNumberOfServers == 0) {
	          // If we have a mix of mongod and mongos, throw an error
	          if(totalNumberOfMongosServers > 0 && totalNumberOfMongodServers > 0) {
	            return process.nextTick(function() {
	              try {
	                callback(new Error("cannot combine a list of replicaset seeds and mongos seeds"));
	              } catch (err) {
	                if(db) db.close();
	                throw err
	              }              
	            })
	          }
	          
	          if(totalNumberOfMongodServers == 0 && object.servers.length == 1) {
	            var obj = object.servers[0];
	            serverConfig = obj.domain_socket ? 
	                new Server(obj.domain_socket, object.server_options)
	              : new Server(obj.host, obj.port, object.server_options);            
	          } else if(totalNumberOfMongodServers > 0 || totalNumberOfMongosServers > 0) {
	            var finalServers = object.servers
	              .filter(function(serverObj) {
	                return errorServers[serverObj.host + ":" + serverObj.port] == null;
	              })
	              .map(function(serverObj) {
	                  return new Server(serverObj.host, serverObj.port, object.server_options);
	              });
	            // Clean out any error servers
	            errorServers = {};
	            // Set up the final configuration
	            if(totalNumberOfMongodServers > 0) {
	              serverConfig = new ReplSet(finalServers, object.rs_options);                
	            } else {
	              serverConfig = new Mongos(finalServers, object.mongos_options);                         
	            }
	          }

	          if(serverConfig == null) {
	            return process.nextTick(function() {
	              try {
	                callback(new Error("Could not locate any valid servers in initial seed list"));
	              } catch (err) {
	                if(db) db.close();
	                throw err
	              }
	            });
	          }
	          // Ensure no firing off open event before we are ready
	          serverConfig.emitOpen = false;
	          // Set up all options etc and connect to the database
	          _finishConnecting(serverConfig, object, options, callback)
	        }
	      });        
	    }

	    // Wrap the context of the call
	    connectFunction(_server);    
	  }    
	}

	var _setNativeParser = function(db_options) {
	  if(typeof db_options.native_parser == 'boolean') return db_options.native_parser;

	  try {
	    __webpack_require__(256).BSONNative.BSON;
	    return true;
	  } catch(err) {
	    return false;
	  }
	}

	var _finishConnecting = function(serverConfig, object, options, callback) {
	  // Safe settings
	  var safe = {};
	  // Build the safe parameter if needed
	  if(object.db_options.journal) safe.j = object.db_options.journal;
	  if(object.db_options.w) safe.w = object.db_options.w;
	  if(object.db_options.fsync) safe.fsync = object.db_options.fsync;
	  if(object.db_options.wtimeoutMS) safe.wtimeout = object.db_options.wtimeoutMS;

	  // If we have a read Preference set
	  if(object.db_options.read_preference) {
	    var readPreference = new ReadPreference(object.db_options.read_preference);
	    // If we have the tags set up
	    if(object.db_options.read_preference_tags)
	      readPreference = new ReadPreference(object.db_options.read_preference, object.db_options.read_preference_tags);
	    // Add the read preference
	    object.db_options.readPreference = readPreference;
	  }

	  // No safe mode if no keys
	  if(Object.keys(safe).length == 0) safe = false;

	  // Add the safe object
	  object.db_options.safe = safe;

	  // Set up the db options
	  var db = new Db(object.dbName, serverConfig, object.db_options);
	  // Open the db
	  db.open(function(err, db){
	    if(err) {
	      return process.nextTick(function() {
	        try {
	          callback(err, null);
	        } catch (err) {
	          if(db) db.close();
	          throw err
	        }
	      });
	    }

	    if(db.options !== null && !db.options.safe && !db.options.journal 
	      && !db.options.w && !db.options.fsync && typeof db.options.w != 'number'
	      && (db.options.safe == false && object.db_options.url.indexOf("safe=") == -1)) {
	        db.options.w = 1;
	    }

	    if(err == null && object.auth){
	      // What db to authenticate against
	      var authentication_db = db;
	      if(object.db_options && object.db_options.authSource) {
	        authentication_db = db.db(object.db_options.authSource);
	      }

	      // Build options object
	      var options = {};
	      if(object.db_options.authMechanism) options.authMechanism = object.db_options.authMechanism;
	      if(object.db_options.gssapiServiceName) options.gssapiServiceName = object.db_options.gssapiServiceName;

	      // Authenticate
	      authentication_db.authenticate(object.auth.user, object.auth.password, options, function(err, success){
	        if(success){
	          process.nextTick(function() {
	            try {
	              callback(null, db);            
	            } catch (err) {
	              if(db) db.close();
	              throw err
	            }
	          });
	        } else {
	          if(db) db.close();
	          process.nextTick(function() {
	            try {
	              callback(err ? err : new Error('Could not authenticate user ' + auth[0]), null);
	            } catch (err) {
	              if(db) db.close();
	              throw err
	            }
	          });
	        }
	      });
	    } else {
	      process.nextTick(function() {
	        try {
	          callback(err, db);            
	        } catch (err) {
	          if(db) db.close();
	          throw err
	        }
	      })
	    }
	  });
	}


	exports.MongoClient = MongoClient;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  ReadPreference = __webpack_require__(308).ReadPreference;

	exports.parse = function(url, options) {
	  // Ensure we have a default options object if none set
	  options = options || {};
	  // Variables
	  var connection_part = '';
	  var auth_part = '';
	  var query_string_part = '';
	  var dbName = 'admin';

	  // Must start with mongodb
	  if(url.indexOf("mongodb://") != 0)
	    throw Error("URL must be in the format mongodb://user:pass@host:port/dbname");
	  // If we have a ? mark cut the query elements off
	  if(url.indexOf("?") != -1) {
	    query_string_part = url.substr(url.indexOf("?") + 1);
	    connection_part = url.substring("mongodb://".length, url.indexOf("?"))
	  } else {
	    connection_part = url.substring("mongodb://".length);
	  }

	  // Check if we have auth params
	  if(connection_part.indexOf("@") != -1) {
	    auth_part = connection_part.split("@")[0];
	    connection_part = connection_part.split("@")[1];
	  }

	  // Check if the connection string has a db
	  if(connection_part.indexOf(".sock") != -1) {
	    if(connection_part.indexOf(".sock/") != -1) {
	      dbName = connection_part.split(".sock/")[1];
	      connection_part = connection_part.split("/", connection_part.indexOf(".sock") + ".sock".length);
	    } 
	  } else if(connection_part.indexOf("/") != -1) {
	    dbName = connection_part.split("/")[1];
	    connection_part = connection_part.split("/")[0];
	  }

	  // Result object
	  var object = {};

	  // Pick apart the authentication part of the string
	  var authPart = auth_part || '';
	  var auth = authPart.split(':', 2);
	  if(options['uri_decode_auth']){
	    auth[0] = decodeURIComponent(auth[0]);
	    if(auth[1]){
	      auth[1] = decodeURIComponent(auth[1]);
	    }
	  }

	  // Add auth to final object if we have 2 elements
	  if(auth.length == 2) object.auth = {user: auth[0], password: auth[1]};

	  // Variables used for temporary storage
	  var hostPart;
	  var urlOptions;
	  var servers;
	  var serverOptions = {socketOptions: {}};
	  var dbOptions = {read_preference_tags: []};
	  var replSetServersOptions = {socketOptions: {}};
	  // Add server options to final object
	  object.server_options = serverOptions;
	  object.db_options = dbOptions;
	  object.rs_options = replSetServersOptions;
	  object.mongos_options = {};

	  // Let's check if we are using a domain socket
	  if(url.match(/\.sock/)) {
	    // Split out the socket part
	    var domainSocket = url.substring(
	        url.indexOf("mongodb://") + "mongodb://".length
	      , url.lastIndexOf(".sock") + ".sock".length);
	    // Clean out any auth stuff if any
	    if(domainSocket.indexOf("@") != -1) domainSocket = domainSocket.split("@")[1];
	    servers = [{domain_socket: domainSocket}];
	  } else {
	    // Split up the db
	    hostPart = connection_part;
	    // Parse all server results
	    servers = hostPart.split(',').map(function(h) {
	      var hostPort = h.split(':', 2);
	      var _host = hostPort[0] || 'localhost';
	      var _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017;
	      // Check for localhost?safe=true style case
	      if(_host.indexOf("?") != -1) _host = _host.split(/\?/)[0];

	      // Return the mapped object
	      return {host: _host, port: _port};
	    });
	  }

	  // Get the db name
	  object.dbName = dbName || 'admin';
	  // Split up all the options
	  urlOptions = (query_string_part || '').split(/[&;]/);    
	  // Ugh, we have to figure out which options go to which constructor manually.
	  urlOptions.forEach(function(opt) {
	    if(!opt) return;
	    var splitOpt = opt.split('='), name = splitOpt[0], value = splitOpt[1];
	    // Options implementations
	    switch(name) {
	      case 'slaveOk':
	      case 'slave_ok':
	        serverOptions.slave_ok = (value == 'true');
	        dbOptions.slaveOk = (value == 'true');
	        break;
	      case 'maxPoolSize':
	      case 'poolSize':
	        serverOptions.poolSize = parseInt(value, 10);
	        replSetServersOptions.poolSize = parseInt(value, 10);
	        break;
	      case 'autoReconnect':
	      case 'auto_reconnect':
	        serverOptions.auto_reconnect = (value == 'true');
	        break;
	      case 'minPoolSize':
	        throw new Error("minPoolSize not supported");
	      case 'maxIdleTimeMS':
	        throw new Error("maxIdleTimeMS not supported");
	      case 'waitQueueMultiple':
	        throw new Error("waitQueueMultiple not supported");
	      case 'waitQueueTimeoutMS':
	        throw new Error("waitQueueTimeoutMS not supported");
	      case 'uuidRepresentation':
	        throw new Error("uuidRepresentation not supported");
	      case 'ssl':
	        if(value == 'prefer') {
	          serverOptions.ssl = value;
	          replSetServersOptions.ssl = value;
	          break;
	        }
	        serverOptions.ssl = (value == 'true');
	        replSetServersOptions.ssl = (value == 'true');
	        break;
	      case 'replicaSet':
	      case 'rs_name':
	        replSetServersOptions.rs_name = value;
	        break;
	      case 'reconnectWait':
	        replSetServersOptions.reconnectWait = parseInt(value, 10);
	        break;
	      case 'retries':
	        replSetServersOptions.retries = parseInt(value, 10);
	        break;
	      case 'readSecondary':
	      case 'read_secondary':
	        replSetServersOptions.read_secondary = (value == 'true');
	        break;
	      case 'fsync':
	        dbOptions.fsync = (value == 'true');
	        break;
	      case 'journal':
	        dbOptions.journal = (value == 'true');
	        break;
	      case 'safe':
	        dbOptions.safe = (value == 'true');
	        break;
	      case 'nativeParser':
	      case 'native_parser':
	        dbOptions.native_parser = (value == 'true');
	        break;
	      case 'connectTimeoutMS':
	        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);
	        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);
	        break;
	      case 'socketTimeoutMS':
	        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);
	        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);
	        break;
	      case 'w':
	        dbOptions.w = parseInt(value, 10);
	        break;
	      case 'authSource':
	        dbOptions.authSource = value;
	        break;
	      case 'gssapiServiceName':
	        dbOptions.gssapiServiceName = value;
	        break;
	      case 'authMechanism':
	        if(value == 'GSSAPI') {
	          // If no password provided decode only the principal
	          if(object.auth == null) {
	            var urlDecodeAuthPart = decodeURIComponent(authPart);
	            if(urlDecodeAuthPart.indexOf("@") == -1) throw new Error("GSSAPI requires a provided principal");
	            object.auth = {user: urlDecodeAuthPart, password: null};
	          } else {
	            object.auth.user = decodeURIComponent(object.auth.user);
	          }
	        }
	        
	        // Only support GSSAPI or MONGODB-CR for now
	        if(value != 'GSSAPI' 
	          && value != 'MONGODB-CR'
	          && value != 'PLAIN') 
	            throw new Error("only GSSAPI, PLAIN or MONGODB-CR is supported by authMechanism");
	        
	        // Authentication mechanism
	        dbOptions.authMechanism = value;
	        break;
	      case 'wtimeoutMS':
	        dbOptions.wtimeoutMS = parseInt(value, 10);
	        break;
	      case 'readPreference':
	        if(!ReadPreference.isValid(value)) throw new Error("readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest");
	        dbOptions.read_preference = value;
	        break;
	      case 'readPreferenceTags':
	        // Contains the tag object
	        var tagObject = {};
	        if(value == null || value == '') {
	          dbOptions.read_preference_tags.push(tagObject);
	          break;
	        }

	        // Split up the tags
	        var tags = value.split(/\,/);
	        for(var i = 0; i < tags.length; i++) {
	          var parts = tags[i].trim().split(/\:/);
	          tagObject[parts[0]] = parts[1];
	        }

	        // Set the preferences tags
	        dbOptions.read_preference_tags.push(tagObject);
	        break;
	      default:
	        break;
	    }
	  });

	  // No tags: should be null (not [])
	  if(dbOptions.read_preference_tags.length === 0) {
	    dbOptions.read_preference_tags = null;
	  }

	  // Validate if there are an invalid write concern combinations
	  if((dbOptions.w == -1 || dbOptions.w == 0) && (
	      dbOptions.journal == true
	      || dbOptions.fsync == true
	      || dbOptions.safe == true)) throw new Error("w set to -1 or 0 cannot be combined with safe/w/journal/fsync")

	  // If no read preference set it to primary
	  if(!dbOptions.read_preference) dbOptions.read_preference = 'primary';

	  // Add servers to result
	  object.servers = servers;
	  // Returned parsed object
	  return object;
	}


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Binary = __webpack_require__(256).Binary,
	  ObjectID = __webpack_require__(256).ObjectID;

	/**
	 * Class for representing a single chunk in GridFS.
	 *
	 * @class
	 *
	 * @param file {GridStore} The {@link GridStore} object holding this chunk.
	 * @param mongoObject {object} The mongo object representation of this chunk.
	 *
	 * @throws Error when the type of data field for {@link mongoObject} is not
	 *     supported. Currently supported types for data field are instances of
	 *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}
	 *     from the bson module
	 *
	 * @see Chunk#buildMongoObject
	 */
	var Chunk = exports.Chunk = function(file, mongoObject, writeConcern) {
	  if(!(this instanceof Chunk)) return new Chunk(file, mongoObject);

	  this.file = file;
	  var self = this;
	  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;
	  this.writeConcern = writeConcern || {w:1};
	  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;
	  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;
	  this.data = new Binary();

	  if(mongoObjectFinal.data == null) {
	  } else if(typeof mongoObjectFinal.data == "string") {
	    var buffer = new Buffer(mongoObjectFinal.data.length);
	    buffer.write(mongoObjectFinal.data, 'binary', 0);
	    this.data = new Binary(buffer);
	  } else if(Array.isArray(mongoObjectFinal.data)) {
	    var buffer = new Buffer(mongoObjectFinal.data.length);
	    buffer.write(mongoObjectFinal.data.join(''), 'binary', 0);
	    this.data = new Binary(buffer);
	  } else if(mongoObjectFinal.data instanceof Binary || Object.prototype.toString.call(mongoObjectFinal.data) == "[object Binary]") {
	    this.data = mongoObjectFinal.data;
	  } else if(Buffer.isBuffer(mongoObjectFinal.data)) {
	  } else {
	    throw Error("Illegal chunk format");
	  }
	  // Update position
	  this.internalPosition = 0;
	};

	/**
	 * Writes a data to this object and advance the read/write head.
	 *
	 * @param data {string} the data to write 
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 */
	Chunk.prototype.write = function(data, callback) {
	  this.data.write(data, this.internalPosition);
	  this.internalPosition = this.data.length();
	  if(callback != null) return callback(null, this);
	  return this;
	};

	/**
	 * Reads data and advances the read/write head.
	 *
	 * @param length {number} The length of data to read.
	 *
	 * @return {string} The data read if the given length will not exceed the end of
	 *     the chunk. Returns an empty String otherwise.
	 */
	Chunk.prototype.read = function(length) {
	  // Default to full read if no index defined
	  length = length == null || length == 0 ? this.length() : length;

	  if(this.length() - this.internalPosition + 1 >= length) {
	    var data = this.data.read(this.internalPosition, length);
	    this.internalPosition = this.internalPosition + length;
	    return data;
	  } else {
	    return '';
	  }
	};

	Chunk.prototype.readSlice = function(length) {
	  if ((this.length() - this.internalPosition) >= length) {
	    var data = null;
	    if (this.data.buffer != null) { //Pure BSON
	      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);
	    } else { //Native BSON
	      data = new Buffer(length);
	      length = this.data.readInto(data, this.internalPosition);
	    }
	    this.internalPosition = this.internalPosition + length;
	    return data;
	  } else {
	    return null;
	  }
	};

	/**
	 * Checks if the read/write head is at the end.
	 *
	 * @return {boolean} Whether the read/write head has reached the end of this
	 *     chunk.
	 */
	Chunk.prototype.eof = function() {
	  return this.internalPosition == this.length() ? true : false;
	};

	/**
	 * Reads one character from the data of this chunk and advances the read/write
	 * head.
	 *
	 * @return {string} a single character data read if the the read/write head is
	 *     not at the end of the chunk. Returns an empty String otherwise.
	 */
	Chunk.prototype.getc = function() {
	  return this.read(1);
	};

	/**
	 * Clears the contents of the data in this chunk and resets the read/write head
	 * to the initial position.
	 */
	Chunk.prototype.rewind = function() {
	  this.internalPosition = 0;
	  this.data = new Binary();
	};

	/**
	 * Saves this chunk to the database. Also overwrites existing entries having the
	 * same id as this chunk.
	 *
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 */
	Chunk.prototype.save = function(callback) {
	  var self = this;

	  self.file.chunkCollection(function(err, collection) {
	    if(err) return callback(err);

	    collection.remove({'_id':self.objectId}, self.writeConcern, function(err, result) {
	      if(err) return callback(err);

	      if(self.data.length() > 0) {
	        self.buildMongoObject(function(mongoObject) {
	          var options = {forceServerObjectId:true};
	          for(var name in self.writeConcern) {
	            options[name] = self.writeConcern[name];
	          }

	          collection.insert(mongoObject, options, function(err, collection) {
	            callback(err, self);
	          });
	        });
	      } else {
	        callback(null, self);
	      }
	    });
	  });
	};

	/**
	 * Creates a mongoDB object representation of this chunk.
	 *
	 * @param callback {function(Object)} This will be called after executing this 
	 *     method. The object will be passed to the first parameter and will have
	 *     the structure:
	 *        
	 *        <pre><code>
	 *        {
	 *          '_id' : , // {number} id for this chunk
	 *          'files_id' : , // {number} foreign key to the file collection
	 *          'n' : , // {number} chunk number
	 *          'data' : , // {bson#Binary} the chunk data itself
	 *        }
	 *        </code></pre>
	 *
	 * @see <a href="http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}">MongoDB GridFS Chunk Object Structure</a>
	 */
	Chunk.prototype.buildMongoObject = function(callback) {
	  var mongoObject = {
	    'files_id': this.file.fileId,
	    'n': this.chunkNumber,
	    'data': this.data};
	  // If we are saving using a specific ObjectId
	  if(this.objectId != null) mongoObject._id = this.objectId;

	  callback(mongoObject);
	};

	/**
	 * @return {number} the length of the data
	 */
	Chunk.prototype.length = function() {
	  return this.data.length();
	};

	/**
	 * The position of the read/write head
	 * @name position
	 * @lends Chunk#
	 * @field
	 */
	Object.defineProperty(Chunk.prototype, "position", { enumerable: true
	  , get: function () {
	      return this.internalPosition;
	    }
	  , set: function(value) {
	      this.internalPosition = value;
	    }
	});

	/**
	 * The default chunk size
	 * @constant
	 */
	Chunk.DEFAULT_CHUNK_SIZE = 1024 * 256;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var GridStore = __webpack_require__(357).GridStore,
	  ObjectID = __webpack_require__(256).ObjectID;

	/**
	 * A class representation of a simple Grid interface.
	 *
	 * @class Represents the Grid.
	 * @param {Db} db A database instance to interact with.
	 * @param {String} [fsName] optional different root collection for GridFS.
	 * @return {Grid}
	 */
	function Grid(db, fsName) {

	  if(!(this instanceof Grid)) return new Grid(db, fsName);

	  this.db = db;
	  this.fsName = fsName == null ? GridStore.DEFAULT_ROOT_COLLECTION : fsName;
	}

	/**
	 * Puts binary data to the grid
	 *
	 * Options
	 *  - **_id** {Any}, unique id for this file
	 *  - **root** {String}, root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 *  - **content_type** {String}, mime type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.
	 *  - **chunk_size** {Number}, size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.
	 *  - **metadata** {Object}, arbitrary data the user wants to store.
	 *
	 * @param {Buffer} data buffer with Binary Data.
	 * @param {Object} [options] the options for the files.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	Grid.prototype.put = function(data, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() : {};
	  // If root is not defined add our default one
	  options['root'] = options['root'] == null ? this.fsName : options['root'];

	  // Return if we don't have a buffer object as data
	  if(!(Buffer.isBuffer(data))) return callback(new Error("Data object must be a buffer object"), null);
	  // Get filename if we are using it
	  var filename = options['filename'] || null;
	  // Get id if we are using it
	  var id = options['_id'] || null;
	  // Create gridstore
	  var gridStore = new GridStore(this.db, id, filename, "w", options);
	  gridStore.open(function(err, gridStore) {
	    if(err) return callback(err, null);

	    gridStore.write(data, function(err, result) {
	      if(err) return callback(err, null);

	      gridStore.close(function(err, result) {
	        if(err) return callback(err, null);
	        callback(null, result);
	      })
	    })
	  })
	}

	/**
	 * Get binary data to the grid
	 *
	 * @param {Any} id for file.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	Grid.prototype.get = function(id, callback) {
	  // Create gridstore
	  var gridStore = new GridStore(this.db, id, null, "r", {root:this.fsName});
	  gridStore.open(function(err, gridStore) {
	    if(err) return callback(err, null);

	    // Return the data
	    gridStore.read(function(err, data) {
	      return callback(err, data)
	    });
	  })
	}

	/**
	 * Delete file from grid
	 *
	 * @param {Any} id for file.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	Grid.prototype.delete = function(id, callback) {
	  // Create gridstore
	  GridStore.unlink(this.db, id, {root:this.fsName}, function(err, result) {
	    if(err) return callback(err, false);
	    return callback(null, true);
	  });
	}

	exports.Grid = Grid;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).Buffer))

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview GridFS is a tool for MongoDB to store files to the database.
	 * Because of the restrictions of the object size the database can hold, a
	 * facility to split a file into several chunks is needed. The {@link GridStore}
	 * class offers a simplified api to interact with files while managing the
	 * chunks of split files behind the scenes. More information about GridFS can be
	 * found <a href="http://www.mongodb.org/display/DOCS/GridFS">here</a>.
	 */
	var Chunk = __webpack_require__(355).Chunk,
	  DbCommand = __webpack_require__(287).DbCommand,
	  ObjectID = __webpack_require__(256).ObjectID,
	  Buffer = __webpack_require__(258).Buffer,
	  fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  timers = __webpack_require__(289),
	  util = __webpack_require__(267),
	  inherits = util.inherits,
	  ReadStream = __webpack_require__(358).ReadStream,
	  Stream = __webpack_require__(310);

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	var REFERENCE_BY_FILENAME = 0,
	  REFERENCE_BY_ID = 1;

	/**
	 * A class representation of a file stored in GridFS.
	 *
	 * Modes
	 *  - **"r"** - read only. This is the default mode.
	 *  - **"w"** - write in truncate mode. Existing data will be overwriten.
	 *  - **w+"** - write in edit mode.
	 *
	 * Options
	 *  - **root** {String}, root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 *  - **content_type** {String}, mime type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.
	 *  - **chunk_size** {Number}, size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.
	 *  - **metadata** {Object}, arbitrary data the user wants to store.
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning
	 *  - **journal**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @class Represents the GridStore.
	 * @param {Db} db A database instance to interact with.
	 * @param {Any} [id] optional unique id for this file
	 * @param {String} [filename] optional filename for this file, no unique constrain on the field
	 * @param {String} mode set the mode for this file.
	 * @param {Object} options optional properties to specify.
	 * @return {GridStore}
	 */
	var GridStore = function GridStore(db, id, filename, mode, options) {
	  if(!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);

	  var self = this;
	  this.db = db;

	  // Call stream constructor
	  if(typeof Stream == 'function') {
	    Stream.call(this);
	  } else {
	    // 0.4.X backward compatibility fix
	    Stream.Stream.call(this);
	  }

	  // Handle options
	  if(typeof options === 'undefined') options = {};
	  // Handle mode
	  if(typeof mode === 'undefined') {
	    mode = filename;
	    filename = undefined;
	  } else if(typeof mode == 'object') {
	    options = mode;
	    mode = filename;
	    filename = undefined;
	  }

	  if(id instanceof ObjectID) {
	    this.referenceBy = REFERENCE_BY_ID;
	    this.fileId = id;
	    this.filename = filename;
	  } else if(typeof filename == 'undefined') {
	    this.referenceBy = REFERENCE_BY_FILENAME;
	    this.filename = id;
	    if (mode.indexOf('w') != null) {
	      this.fileId = new ObjectID();
	    }
	  } else {
	    this.referenceBy = REFERENCE_BY_ID;
	    this.fileId = id;
	    this.filename = filename;
	  }

	  // Set up the rest
	  this.mode = mode == null ? "r" : mode;
	  this.options = options == null ? {w:1} : options;
	  
	  // If we have no write concerns set w:1 as default
	  if(this.options.w == null 
	    && this.options.j == null
	    && this.options.fsync == null) this.options.w = 1;

	  // Set the root if overridden
	  this.root = this.options['root'] == null ? exports.GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];
	  this.position = 0;
	  this.readPreference = this.options.readPreference || 'primary';
	  this.writeConcern =  _getWriteConcern(this, this.options);
	  // Set default chunk size
	  this.internalChunkSize = this.options['chunkSize'] == null ? Chunk.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];
	}

	/**
	 *  Code for the streaming capabilities of the gridstore object
	 *  Most code from Aaron heckmanns project https://github.com/aheckmann/gridfs-stream
	 *  Modified to work on the gridstore object itself
	 *  @ignore
	 */
	if(typeof Stream == 'function') {
	  GridStore.prototype = { __proto__: Stream.prototype }
	} else {
	  // Node 0.4.X compatibility code
	  GridStore.prototype = { __proto__: Stream.Stream.prototype }
	}

	// Move pipe to _pipe
	GridStore.prototype._pipe = GridStore.prototype.pipe;

	/**
	 * Opens the file from the database and initialize this object. Also creates a
	 * new one if file does not exist.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an **{Error}** object and the second parameter will be null if an error occured. Otherwise, the first parameter will be null and the second will contain the reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.open = function(callback) {
	  if( this.mode != "w" && this.mode != "w+" && this.mode != "r"){
	    callback(new Error("Illegal mode " + this.mode), null);
	    return;
	  }

	  var self = this;

	  if((self.mode == "w" || self.mode == "w+") && self.db.serverConfig.primary != null) {
	    // Get files collection
	    self.collection(function(err, collection) {
	      if(err) return callback(err);

	      // Put index on filename
	      collection.ensureIndex([['filename', 1]], function(err, index) {
	        if(err) return callback(err);

	        // Get chunk collection
	        self.chunkCollection(function(err, chunkCollection) {
	          if(err) return callback(err);

	          // Ensure index on chunk collection
	          chunkCollection.ensureIndex([['files_id', 1], ['n', 1]], function(err, index) {
	            if(err) return callback(err);
	            _open(self, callback);
	          });
	        });
	      });
	    });
	  } else {
	    // Open the gridstore
	    _open(self, callback);
	  }
	};

	/**
	 * Hidding the _open function
	 * @ignore
	 * @api private
	 */
	var _open = function(self, callback) {
	  self.collection(function(err, collection) {
	    if(err!==null) {
	      callback(new Error("at collection: "+err), null);
	      return;
	    }

	    // Create the query
	    var query = self.referenceBy == REFERENCE_BY_ID ? {_id:self.fileId} : {filename:self.filename};
	    query = null == self.fileId && this.filename == null ? null : query;

	    // Fetch the chunks
	    if(query != null) {
	      collection.find(query, {readPreference:self.readPreference}, function(err, cursor) {
	        if(err) return error(err);

	        // Fetch the file
	        cursor.nextObject(function(err, doc) {
	          if(err) return error(err);

	          // Check if the collection for the files exists otherwise prepare the new one
	          if(doc != null) {
	            self.fileId = doc._id;
	            self.filename = doc.filename;
	            self.contentType = doc.contentType;
	            self.internalChunkSize = doc.chunkSize;
	            self.uploadDate = doc.uploadDate;
	            self.aliases = doc.aliases;
	            self.length = doc.length;
	            self.metadata = doc.metadata;
	            self.internalMd5 = doc.md5;
	          } else if (self.mode != 'r') {
	            self.fileId = self.fileId == null ? new ObjectID() : self.fileId;
	            self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;
	            self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
	            self.length = 0;
	          } else {
	            self.length = 0;
	            var txtId = self.fileId instanceof ObjectID ? self.fileId.toHexString() : self.fileId;
	            return error(new Error((self.referenceBy == REFERENCE_BY_ID ? txtId : self.filename) + " does not exist", self));
	          }

	          // Process the mode of the object
	          if(self.mode == "r") {
	            nthChunk(self, 0, function(err, chunk) {
	              if(err) return error(err);
	              self.currentChunk = chunk;
	              self.position = 0;
	              callback(null, self);
	            });
	          } else if(self.mode == "w") {
	            // Delete any existing chunks
	            deleteChunks(self, function(err, result) {
	              if(err) return error(err);
	              self.currentChunk = new Chunk(self, {'n':0}, self.writeConcern);
	              self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];
	              self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
	              self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	              self.position = 0;
	              callback(null, self);
	            });
	          } else if(self.mode == "w+") {
	            nthChunk(self, lastChunkNumber(self), function(err, chunk) {
	              if(err) return error(err);
	              // Set the current chunk
	              self.currentChunk = chunk == null ? new Chunk(self, {'n':0}, self.writeConcern) : chunk;
	              self.currentChunk.position = self.currentChunk.data.length();
	              self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	              self.position = self.length;
	              callback(null, self);
	            });
	          }
	        });
	      });
	    } else {
	      // Write only mode
	      self.fileId = null == self.fileId ? new ObjectID() : self.fileId;
	      self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;
	      self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
	      self.length = 0;

	      self.chunkCollection(function(err, collection2) {
	        if(err) return error(err);

	        // No file exists set up write mode
	        if(self.mode == "w") {
	          // Delete any existing chunks
	          deleteChunks(self, function(err, result) {
	            if(err) return error(err);
	            self.currentChunk = new Chunk(self, {'n':0}, self.writeConcern);
	            self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];
	            self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
	            self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	            self.position = 0;
	            callback(null, self);
	          });
	        } else if(self.mode == "w+") {
	          nthChunk(self, lastChunkNumber(self), function(err, chunk) {
	            if(err) return error(err);
	            // Set the current chunk
	            self.currentChunk = chunk == null ? new Chunk(self, {'n':0}, self.writeConcern) : chunk;
	            self.currentChunk.position = self.currentChunk.data.length();
	            self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	            self.position = self.length;
	            callback(null, self);
	          });
	        }
	      });
	    }
	  });

	  // only pass error to callback once
	  function error (err) {
	    if(error.err) return;
	    callback(error.err = err);
	  }
	};

	/**
	 * Stores a file from the file system to the GridFS database.
	 *
	 * @param {String|Buffer|FileHandle} file the file to store.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will be null and the the second will contain the reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.writeFile = function (file, callback) {
	  var self = this;
	  if (typeof file === 'string') {
	    fs.open(file, 'r', function (err, fd) {
	      if(err) return callback(err);
	      self.writeFile(fd, callback);
	    });
	    return;
	  }

	  self.open(function (err, self) {
	    if(err) return callback(err, self);

	    fs.fstat(file, function (err, stats) {
	      if(err) return callback(err, self);

	      var offset = 0;
	      var index = 0;
	      var numberOfChunksLeft = Math.min(stats.size / self.chunkSize);

	      // Write a chunk
	      var writeChunk = function() {
	        fs.read(file, self.chunkSize, offset, 'binary', function(err, data, bytesRead) {
	          if(err) return callback(err, self);

	          offset = offset + bytesRead;

	          // Create a new chunk for the data
	          var chunk = new Chunk(self, {n:index++}, self.writeConcern);
	          chunk.write(data, function(err, chunk) {
	            if(err) return callback(err, self);

	            chunk.save(function(err, result) {
	              if(err) return callback(err, self);

	              self.position = self.position + data.length;

	              // Point to current chunk
	              self.currentChunk = chunk;

	              if(offset >= stats.size) {
	                fs.close(file);
	                self.close(function(err, result) {
	                  if(err) return callback(err, self);
	                  return callback(null, self);
	                });
	              } else {
	                return processor(writeChunk);
	              }
	            });
	          });
	        });
	      }

	      // Process the first write
	      processor(writeChunk);
	    });
	  });
	};

	/**
	 * Writes some data. This method will work properly only if initialized with mode
	 * "w" or "w+".
	 *
	 * @param string {string} The data to write.
	 * @param close {boolean=false} opt_argument Closes this file after writing if
	 *     true.
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 *
	 * @ignore
	 * @api private
	 */
	var writeBuffer = function(self, buffer, close, callback) {
	  if(typeof close === "function") { callback = close; close = null; }
	  var finalClose = (close == null) ? false : close;

	  if(self.mode[0] != "w") {
	    callback(new Error((self.referenceBy == REFERENCE_BY_ID ? self.toHexString() : self.filename) + " not opened for writing"), null);
	  } else {
	    if(self.currentChunk.position + buffer.length >= self.chunkSize) {
	      // Write out the current Chunk and then keep writing until we have less data left than a chunkSize left
	      // to a new chunk (recursively)
	      var previousChunkNumber = self.currentChunk.chunkNumber;
	      var leftOverDataSize = self.chunkSize - self.currentChunk.position;
	      var firstChunkData = buffer.slice(0, leftOverDataSize);
	      var leftOverData = buffer.slice(leftOverDataSize);
	      // A list of chunks to write out
	      var chunksToWrite = [self.currentChunk.write(firstChunkData)];
	      // If we have more data left than the chunk size let's keep writing new chunks
	      while(leftOverData.length >= self.chunkSize) {
	        // Create a new chunk and write to it
	        var newChunk = new Chunk(self, {'n': (previousChunkNumber + 1)}, self.writeConcern);
	        var firstChunkData = leftOverData.slice(0, self.chunkSize);
	        leftOverData = leftOverData.slice(self.chunkSize);
	        // Update chunk number
	        previousChunkNumber = previousChunkNumber + 1;
	        // Write data
	        newChunk.write(firstChunkData);
	        // Push chunk to save list
	        chunksToWrite.push(newChunk);
	      }

	      // Set current chunk with remaining data
	      self.currentChunk = new Chunk(self, {'n': (previousChunkNumber + 1)}, self.writeConcern);
	      // If we have left over data write it
	      if(leftOverData.length > 0) self.currentChunk.write(leftOverData);

	      // Update the position for the gridstore
	      self.position = self.position + buffer.length;
	      // Total number of chunks to write
	      var numberOfChunksToWrite = chunksToWrite.length;
	      // Write out all the chunks and then return
	      for(var i = 0; i < chunksToWrite.length; i++) {
	        var chunk = chunksToWrite[i];
	        chunk.save(function(err, result) {
	          if(err) return callback(err);

	          numberOfChunksToWrite = numberOfChunksToWrite - 1;

	          if(numberOfChunksToWrite <= 0) {
	            return callback(null, self);
	          }
	        })
	      }
	    } else {
	      // Update the position for the gridstore
	      self.position = self.position + buffer.length;
	      // We have less data than the chunk size just write it and callback
	      self.currentChunk.write(buffer);
	      callback(null, self);
	    }
	  }
	};

	/**
	 * Creates a mongoDB object representation of this object.
	 *
	 * @param callback {function(object)} This will be called after executing this
	 *     method. The object will be passed to the first parameter and will have
	 *     the structure:
	 *
	 *        <pre><code>
	 *        {
	 *          '_id' : , // {number} id for this file
	 *          'filename' : , // {string} name for this file
	 *          'contentType' : , // {string} mime type for this file
	 *          'length' : , // {number} size of this file?
	 *          'chunksize' : , // {number} chunk size used by this file
	 *          'uploadDate' : , // {Date}
	 *          'aliases' : , // {array of string}
	 *          'metadata' : , // {string}
	 *        }
	 *        </code></pre>
	 *
	 * @ignore
	 * @api private
	 */
	var buildMongoObject = function(self, callback) {
	  // // Keeps the final chunk number
	  // var chunkNumber = 0;
	  // var previousChunkSize = 0;
	  // // Get the correct chunk Number, if we have an empty chunk return the previous chunk number
	  // if(null != self.currentChunk && self.currentChunk.chunkNumber > 0 && self.currentChunk.position == 0) {
	  //   chunkNumber = self.currentChunk.chunkNumber - 1;
	  // } else {
	  //   chunkNumber = self.currentChunk.chunkNumber;
	  //   previousChunkSize = self.currentChunk.position;
	  // }

	  // // Calcuate the length
	  // var length = self.currentChunk != null ? (chunkNumber * self.chunkSize + previousChunkSize) : 0;
	  var mongoObject = {
	    '_id': self.fileId,
	    'filename': self.filename,
	    'contentType': self.contentType,
	    'length': self.position ? self.position : 0,
	    'chunkSize': self.chunkSize,
	    'uploadDate': self.uploadDate,
	    'aliases': self.aliases,
	    'metadata': self.metadata
	  };

	  var md5Command = {filemd5:self.fileId, root:self.root};
	  self.db.command(md5Command, function(err, results) {
	    mongoObject.md5 = results.md5;
	    callback(mongoObject);
	  });
	};

	/**
	 * Saves this file to the database. This will overwrite the old entry if it
	 * already exists. This will work properly only if mode was initialized to
	 * "w" or "w+".
	 *
	 * @param {Function} callback this will be called after executing this method. Passes an **{Error}** object to the first parameter and null to the second if an error occured. Otherwise, passes null to the first and a reference to this object to the second.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.close = function(callback) {
	  var self = this;

	  if(self.mode[0] == "w") {
	    if(self.currentChunk != null && self.currentChunk.position > 0) {
	      self.currentChunk.save(function(err, chunk) {
	        if(err && typeof callback == 'function') return callback(err);

	        self.collection(function(err, files) {
	          if(err && typeof callback == 'function') return callback(err);

	          // Build the mongo object
	          if(self.uploadDate != null) {
	            files.remove({'_id':self.fileId}, {safe:true}, function(err, collection) {
	              if(err && typeof callback == 'function') return callback(err);

	              buildMongoObject(self, function(mongoObject) {
	                files.save(mongoObject, self.writeConcern, function(err) {
	                  if(typeof callback == 'function')
	                    callback(err, mongoObject);
	                });
	              });
	            });
	          } else {
	            self.uploadDate = new Date();
	            buildMongoObject(self, function(mongoObject) {
	              files.save(mongoObject, self.writeConcern, function(err) {
	                if(typeof callback == 'function')
	                  callback(err, mongoObject);
	              });
	            });
	          }
	        });
	      });
	    } else {
	      self.collection(function(err, files) {
	        if(err && typeof callback == 'function') return callback(err);

	        self.uploadDate = new Date();
	        buildMongoObject(self, function(mongoObject) {
	          files.save(mongoObject, self.writeConcern, function(err) {
	            if(typeof callback == 'function')
	              callback(err, mongoObject);
	          });
	        });
	      });
	    }
	  } else if(self.mode[0] == "r") {
	    if(typeof callback == 'function')
	      callback(null, null);
	  } else {
	    if(typeof callback == 'function')
	      callback(new Error("Illegal mode " + self.mode), null);
	  }
	};

	/**
	 * Gets the nth chunk of this file.
	 *
	 * @param chunkNumber {number} The nth chunk to retrieve.
	 * @param callback {function(*, Chunk|object)} This will be called after
	 *     executing this method. null will be passed to the first parameter while
	 *     a new {@link Chunk} instance will be passed to the second parameter if
	 *     the chunk was found or an empty object {} if not.
	 *
	 * @ignore
	 * @api private
	 */
	var nthChunk = function(self, chunkNumber, callback) {
	  self.chunkCollection(function(err, collection) {
	    if(err) return callback(err);

	    collection.find({'files_id':self.fileId, 'n':chunkNumber}, {readPreference: self.readPreference}, function(err, cursor) {
	      if(err) return callback(err);

	      cursor.nextObject(function(err, chunk) {
	        if(err) return callback(err);

	        var finalChunk = chunk == null ? {} : chunk;
	        callback(null, new Chunk(self, finalChunk, self.writeConcern));
	      });
	    });
	  });
	};

	/**
	 *
	 * @ignore
	 * @api private
	 */
	GridStore.prototype._nthChunk = function(chunkNumber, callback) {
	  nthChunk(this, chunkNumber, callback);
	}

	/**
	 * @return {Number} The last chunk number of this file.
	 *
	 * @ignore
	 * @api private
	 */
	var lastChunkNumber = function(self) {
	  return Math.floor(self.length/self.chunkSize);
	};

	/**
	 * Retrieve this file's chunks collection.
	 *
	 * @param {Function} callback this will be called after executing this method. An exception object will be passed to the first parameter when an error occured or null otherwise. A new **{Collection}** object will be passed to the second parameter if no error occured.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.chunkCollection = function(callback) {
	  this.db.collection((this.root + ".chunks"), callback);
	};

	/**
	 * Deletes all the chunks of this file in the database.
	 *
	 * @param callback {function(*, boolean)} This will be called after this method
	 *     executes. Passes null to the first and true to the second argument.
	 *
	 * @ignore
	 * @api private
	 */
	var deleteChunks = function(self, callback) {
	  if(self.fileId != null) {
	    self.chunkCollection(function(err, collection) {
	      if(err) return callback(err, false);
	      collection.remove({'files_id':self.fileId}, {safe:true}, function(err, result) {
	        if(err) return callback(err, false);
	        callback(null, true);
	      });
	    });
	  } else {
	    callback(null, true);
	  }
	};

	/**
	 * Deletes all the chunks of this file in the database.
	 *
	 * @param {Function} callback this will be called after this method executes. Passes null to the first and true to the second argument.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.unlink = function(callback) {
	  var self = this;
	  deleteChunks(this, function(err) {
	    if(err!==null) {
	      err.message = "at deleteChunks: " + err.message;
	      return callback(err);
	    }

	    self.collection(function(err, collection) {
	      if(err!==null) {
	        err.message = "at collection: " + err.message;
	        return callback(err);
	      }

	      collection.remove({'_id':self.fileId}, {safe:true}, function(err) {
	        callback(err, self);
	      });
	    });
	  });
	};

	/**
	 * Retrieves the file collection associated with this object.
	 *
	 * @param {Function} callback this will be called after executing this method. An exception object will be passed to the first parameter when an error occured or null otherwise. A new **{Collection}** object will be passed to the second parameter if no error occured.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.collection = function(callback) {
	  this.db.collection(this.root + ".files", callback);
	};

	/**
	 * Reads the data of this file.
	 *
	 * @param {String} [separator] the character to be recognized as the newline separator.
	 * @param {Function} callback This will be called after this method is executed. The first parameter will be null and the second parameter will contain an array of strings representing the entire data, each element representing a line including the separator character.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.readlines = function(separator, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  separator = args.length ? args.shift() : "\n";

	  this.read(function(err, data) {
	    if(err) return callback(err);

	    var items = data.toString().split(separator);
	    items = items.length > 0 ? items.splice(0, items.length - 1) : [];
	    for(var i = 0; i < items.length; i++) {
	      items[i] = items[i] + separator;
	    }

	    callback(null, items);
	  });
	};

	/**
	 * Deletes all the chunks of this file in the database if mode was set to "w" or
	 * "w+" and resets the read/write head to the initial position.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.rewind = function(callback) {
	  var self = this;

	  if(this.currentChunk.chunkNumber != 0) {
	    if(this.mode[0] == "w") {
	      deleteChunks(self, function(err, gridStore) {
	        if(err) return callback(err);
	        self.currentChunk = new Chunk(self, {'n': 0}, self.writeConcern);
	        self.position = 0;
	        callback(null, self);
	      });
	    } else {
	      self.currentChunk(0, function(err, chunk) {
	        if(err) return callback(err);
	        self.currentChunk = chunk;
	        self.currentChunk.rewind();
	        self.position = 0;
	        callback(null, self);
	      });
	    }
	  } else {
	    self.currentChunk.rewind();
	    self.position = 0;
	    callback(null, self);
	  }
	};

	/**
	 * Retrieves the contents of this file and advances the read/write head. Works with Buffers only.
	 *
	 * There are 3 signatures for this method:
	 *
	 * (callback)
	 * (length, callback)
	 * (length, buffer, callback)
	 *
	 * @param {Number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.
	 * @param {String|Buffer} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.
	 * @param {Function} callback this will be called after this method is executed. null will be passed to the first parameter and a string containing the contents of the buffer concatenated with the contents read from this file will be passed to the second.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.read = function(length, buffer, callback) {
	  var self = this;

	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  length = args.length ? args.shift() : null;
	  buffer = args.length ? args.shift() : null;

	  // The data is a c-terminated string and thus the length - 1
	  var finalLength = length == null ? self.length - self.position : length;
	  var finalBuffer = buffer == null ? new Buffer(finalLength) : buffer;
	  // Add a index to buffer to keep track of writing position or apply current index
	  finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;

	  if((self.currentChunk.length() - self.currentChunk.position + finalBuffer._index) >= finalLength) {
	    var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);
	    // Copy content to final buffer
	    slice.copy(finalBuffer, finalBuffer._index);
	    // Update internal position
	    self.position = self.position + finalBuffer.length;
	    // Check if we don't have a file at all
	    if(finalLength == 0 && finalBuffer.length == 0) return callback(new Error("File does not exist"), null);
	    // Else return data
	    callback(null, finalBuffer);
	  } else {
	    var slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);
	    // Copy content to final buffer
	    slice.copy(finalBuffer, finalBuffer._index);
	    // Update index position
	    finalBuffer._index += slice.length;

	    // Load next chunk and read more
	    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
	      if(err) return callback(err);

	      if(chunk.length() > 0) {
	        self.currentChunk = chunk;
	        self.read(length, finalBuffer, callback);
	      } else {
	        if (finalBuffer._index > 0) {
	          callback(null, finalBuffer)
	        } else {
	          callback(new Error("no chunks found for file, possibly corrupt"), null);
	        }
	      }
	    });
	  }
	}

	/**
	 * Retrieves the position of the read/write head of this file.
	 *
	 * @param {Function} callback This gets called after this method terminates. null is passed to the first parameter and the position is passed to the second.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.tell = function(callback) {
	  callback(null, this.position);
	};

	/**
	 * Moves the read/write head to a new location.
	 *
	 * There are 3 signatures for this method
	 *
	 * Seek Location Modes
	 *  - **GridStore.IO_SEEK_SET**, **(default)** set the position from the start of the file.
	 *  - **GridStore.IO_SEEK_CUR**, set the position from the current position in the file.
	 *  - **GridStore.IO_SEEK_END**, set the position from the end of the file.
	 *
	 * @param {Number} [position] the position to seek to
	 * @param {Number} [seekLocation] seek mode. Use one of the Seek Location modes.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.seek = function(position, seekLocation, callback) {
	  var self = this;

	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  seekLocation = args.length ? args.shift() : null;

	  var seekLocationFinal = seekLocation == null ? exports.GridStore.IO_SEEK_SET : seekLocation;
	  var finalPosition = position;
	  var targetPosition = 0;

	  // Calculate the position
	  if(seekLocationFinal == exports.GridStore.IO_SEEK_CUR) {
	    targetPosition = self.position + finalPosition;
	  } else if(seekLocationFinal == exports.GridStore.IO_SEEK_END) {
	    targetPosition = self.length + finalPosition;
	  } else {
	    targetPosition = finalPosition;
	  }

	  // Get the chunk
	  var newChunkNumber = Math.floor(targetPosition/self.chunkSize);
	  if(newChunkNumber != self.currentChunk.chunkNumber) {
	    var seekChunk = function() {
	      nthChunk(self, newChunkNumber, function(err, chunk) {
	        self.currentChunk = chunk;
	        self.position = targetPosition;
	        self.currentChunk.position = (self.position % self.chunkSize);
	        callback(err, self);
	      });
	    };

	    if(self.mode[0] == 'w') {
	      self.currentChunk.save(function(err) {
	        if(err) return callback(err);
	        seekChunk();
	      });
	    } else {
	      seekChunk();
	    }
	  } else {
	    self.position = targetPosition;
	    self.currentChunk.position = (self.position % self.chunkSize);
	    callback(null, self);
	  }
	};

	/**
	 * Verify if the file is at EOF.
	 *
	 * @return {Boolean} true if the read/write head is at the end of this file.
	 * @api public
	 */
	GridStore.prototype.eof = function() {
	  return this.position == this.length ? true : false;
	};

	/**
	 * Retrieves a single character from this file.
	 *
	 * @param {Function} callback this gets called after this method is executed. Passes null to the first parameter and the character read to the second or null to the second if the read/write head is at the end of the file.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.getc = function(callback) {
	  var self = this;

	  if(self.eof()) {
	    callback(null, null);
	  } else if(self.currentChunk.eof()) {
	    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
	      self.currentChunk = chunk;
	      self.position = self.position + 1;
	      callback(err, self.currentChunk.getc());
	    });
	  } else {
	    self.position = self.position + 1;
	    callback(null, self.currentChunk.getc());
	  }
	};

	/**
	 * Writes a string to the file with a newline character appended at the end if
	 * the given string does not have one.
	 *
	 * @param {String} string the string to write.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.puts = function(string, callback) {
	  var finalString = string.match(/\n$/) == null ? string + "\n" : string;
	  this.write(finalString, callback);
	};

	/**
	 * Returns read stream based on this GridStore file
	 *
	 * Events
	 *  - **data** {function(item) {}} the data event triggers when a document is ready.
	 *  - **end** {function() {}} the end event triggers when there is no more documents available.
	 *  - **close** {function() {}} the close event triggers when the stream is closed.
	 *  - **error** {function(err) {}} the error event triggers if an error happens.
	 *
	 * @param {Boolean} autoclose if true current GridStore will be closed when EOF and 'close' event will be fired
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.stream = function(autoclose) {
	  return new ReadStream(autoclose, this);
	};

	/**
	* The collection to be used for holding the files and chunks collection.
	*
	* @classconstant DEFAULT_ROOT_COLLECTION
	**/
	GridStore.DEFAULT_ROOT_COLLECTION = 'fs';

	/**
	* Default file mime type
	*
	* @classconstant DEFAULT_CONTENT_TYPE
	**/
	GridStore.DEFAULT_CONTENT_TYPE = 'binary/octet-stream';

	/**
	* Seek mode where the given length is absolute.
	*
	* @classconstant IO_SEEK_SET
	**/
	GridStore.IO_SEEK_SET = 0;

	/**
	* Seek mode where the given length is an offset to the current read/write head.
	*
	* @classconstant IO_SEEK_CUR
	**/
	GridStore.IO_SEEK_CUR = 1;

	/**
	* Seek mode where the given length is an offset to the end of the file.
	*
	* @classconstant IO_SEEK_END
	**/
	GridStore.IO_SEEK_END = 2;

	/**
	 * Checks if a file exists in the database.
	 *
	 * Options
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Db} db the database to query.
	 * @param {String} name the name of the file to look for.
	 * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 * @param {Function} callback this will be called after this method executes. Passes null to the first and passes true to the second if the file exists and false otherwise.
	 * @return {null}
	 * @api public
	 */
	GridStore.exist = function(db, fileIdObject, rootCollection, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  rootCollection = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : {};

	  // Establish read preference
	  var readPreference = options.readPreference || 'primary';
	  // Fetch collection
	  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
	  db.collection(rootCollectionFinal + ".files", function(err, collection) {
	    if(err) return callback(err);

	    // Build query
	    var query = (typeof fileIdObject == 'string' || Object.prototype.toString.call(fileIdObject) == '[object RegExp]' )
	      ? {'filename':fileIdObject}
	      : {'_id':fileIdObject};    // Attempt to locate file

	    collection.find(query, {readPreference:readPreference}, function(err, cursor) {
	      if(err) return callback(err);

	      cursor.nextObject(function(err, item) {
	        if(err) return callback(err);
	        callback(null, item == null ? false : true);
	      });
	    });
	  });
	};

	/**
	 * Gets the list of files stored in the GridFS.
	 *
	 * @param {Db} db the database to query.
	 * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 * @param {Function} callback this will be called after this method executes. Passes null to the first and passes an array of strings containing the names of the files.
	 * @return {null}
	 * @api public
	 */
	GridStore.list = function(db, rootCollection, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  rootCollection = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : {};

	  // Ensure we have correct values
	  if(rootCollection != null && typeof rootCollection == 'object') {
	    options = rootCollection;
	    rootCollection = null;
	  }

	  // Establish read preference
	  var readPreference = options.readPreference || 'primary';
	  // Check if we are returning by id not filename
	  var byId = options['id'] != null ? options['id'] : false;
	  // Fetch item
	  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
	  var items = [];
	  db.collection((rootCollectionFinal + ".files"), function(err, collection) {
	    if(err) return callback(err);

	    collection.find({}, {readPreference:readPreference}, function(err, cursor) {
	      if(err) return callback(err);

	      cursor.each(function(err, item) {
	        if(item != null) {
	          items.push(byId ? item._id : item.filename);
	        } else {
	          callback(err, items);
	        }
	      });
	    });
	  });
	};

	/**
	 * Reads the contents of a file.
	 *
	 * This method has the following signatures
	 *
	 * (db, name, callback)
	 * (db, name, length, callback)
	 * (db, name, length, offset, callback)
	 * (db, name, length, offset, options, callback)
	 *
	 * @param {Db} db the database to query.
	 * @param {String} name the name of the file.
	 * @param {Number} [length] the size of data to read.
	 * @param {Number} [offset] the offset from the head of the file of which to start reading from.
	 * @param {Object} [options] the options for the file.
	 * @param {Function} callback this will be called after this method executes. A string with an error message will be passed to the first parameter when the length and offset combination exceeds the length of the file while an Error object will be passed if other forms of error occured, otherwise, a string is passed. The second parameter will contain the data read if successful or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	GridStore.read = function(db, name, length, offset, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  length = args.length ? args.shift() : null;
	  offset = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : null;

	  new GridStore(db, name, "r", options).open(function(err, gridStore) {
	    if(err) return callback(err);
	    // Make sure we are not reading out of bounds
	    if(offset && offset >= gridStore.length) return callback("offset larger than size of file", null);
	    if(length && length > gridStore.length) return callback("length is larger than the size of the file", null);
	    if(offset && length && (offset + length) > gridStore.length) return callback("offset and length is larger than the size of the file", null);

	    if(offset != null) {
	      gridStore.seek(offset, function(err, gridStore) {
	        if(err) return callback(err);
	        gridStore.read(length, callback);
	      });
	    } else {
	      gridStore.read(length, callback);
	    }
	  });
	};

	/**
	 * Reads the data of this file.
	 *
	 * @param {Db} db the database to query.
	 * @param {String} name the name of the file.
	 * @param {String} [separator] the character to be recognized as the newline separator.
	 * @param {Object} [options] file options.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will be null and the second parameter will contain an array of strings representing the entire data, each element representing a line including the separator character.
	 * @return {null}
	 * @api public
	 */
	GridStore.readlines = function(db, name, separator, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  separator = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : null;

	  var finalSeperator = separator == null ? "\n" : separator;
	  new GridStore(db, name, "r", options).open(function(err, gridStore) {
	    if(err) return callback(err);
	    gridStore.readlines(finalSeperator, callback);
	  });
	};

	/**
	 * Deletes the chunks and metadata information of a file from GridFS.
	 *
	 * @param {Db} db the database to interact with.
	 * @param {String|Array} names the name/names of the files to delete.
	 * @param {Object} [options] the options for the files.
	 * @callback {Function} this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.unlink = function(db, names, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() : null;

	  if(names.constructor == Array) {
	    var tc = 0;
	    for(var i = 0; i < names.length; i++) {
	      ++tc;
	      self.unlink(db, names[i], options, function(result) {
	        if(--tc == 0) {
	            callback(null, self);
	        }
	      });
	    }
	  } else {
	    new GridStore(db, names, "w", options).open(function(err, gridStore) {
	      if(err) return callback(err);
	      deleteChunks(gridStore, function(err, result) {
	        if(err) return callback(err);
	        gridStore.collection(function(err, collection) {
	          if(err) return callback(err);
	          collection.remove({'_id':gridStore.fileId}, {safe:true}, function(err, collection) {
	            callback(err, self);
	          });
	        });
	      });
	    });
	  }
	};

	/**
	 * Returns the current chunksize of the file.
	 *
	 * @field chunkSize
	 * @type {Number}
	 * @getter
	 * @setter
	 * @property return number of bytes in the current chunkSize.
	 */
	Object.defineProperty(GridStore.prototype, "chunkSize", { enumerable: true
	 , get: function () {
	     return this.internalChunkSize;
	   }
	 , set: function(value) {
	     if(!(this.mode[0] == "w" && this.position == 0 && this.uploadDate == null)) {
	       this.internalChunkSize = this.internalChunkSize;
	     } else {
	       this.internalChunkSize = value;
	     }
	   }
	});

	/**
	 * The md5 checksum for this file.
	 *
	 * @field md5
	 * @type {Number}
	 * @getter
	 * @setter
	 * @property return this files md5 checksum.
	 */
	Object.defineProperty(GridStore.prototype, "md5", { enumerable: true
	 , get: function () {
	     return this.internalMd5;
	   }
	});

	/**
	 *  GridStore Streaming methods
	 *  Handles the correct return of the writeable stream status
	 *  @ignore
	 */
	Object.defineProperty(GridStore.prototype, "writable", { enumerable: true
	 , get: function () {
	    if(this._writeable == null) {
	      this._writeable = this.mode != null && this.mode.indexOf("w") != -1;
	    }
	    // Return the _writeable
	    return this._writeable;
	  }
	 , set: function(value) {
	    this._writeable = value;
	  }
	});

	/**
	 *  Handles the correct return of the readable stream status
	 *  @ignore
	 */
	Object.defineProperty(GridStore.prototype, "readable", { enumerable: true
	 , get: function () {
	    if(this._readable == null) {
	      this._readable = this.mode != null && this.mode.indexOf("r") != -1;
	    }
	    return this._readable;
	  }
	 , set: function(value) {
	    this._readable = value;
	  }
	});

	GridStore.prototype.paused;

	/**
	 *  Handles the correct setting of encoding for the stream
	 *  @ignore
	 */
	GridStore.prototype.setEncoding = fs.ReadStream.prototype.setEncoding;

	/**
	 *  Handles the end events
	 *  @ignore
	 */
	GridStore.prototype.end = function end(data) {
	  var self = this;
	  // allow queued data to write before closing
	  if(!this.writable) return;
	  this.writable = false;

	  if(data) {
	    this._q.push(data);
	  }

	  this.on('drain', function () {
	    self.close(function (err) {
	      if (err) return _error(self, err);
	      self.emit('close');
	    });
	  });

	  _flush(self);
	}

	/**
	 *  Handles the normal writes to gridstore
	 *  @ignore
	 */
	var _writeNormal = function(self, data, close, callback) {
	  // If we have a buffer write it using the writeBuffer method
	  if(Buffer.isBuffer(data)) {
	    return writeBuffer(self, data, close, callback);
	  } else {
	    // Wrap the string in a buffer and write
	    return writeBuffer(self, new Buffer(data, 'binary'), close, callback);
	  }
	}

	/**
	 * Writes some data. This method will work properly only if initialized with mode "w" or "w+".
	 *
	 * @param {String|Buffer} data the data to write.
	 * @param {Boolean} [close] closes this file after writing if set to true.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.write = function write(data, close, callback) {
	  // If it's a normal write delegate the call
	  if(typeof close == 'function' || typeof callback == 'function') {
	    return _writeNormal(this, data, close, callback);
	  }

	  // Otherwise it's a stream write
	  var self = this;
	  if (!this.writable) {
	    throw new Error('GridWriteStream is not writable');
	  }

	  // queue data until we open.
	  if (!this._opened) {
	    // Set up a queue to save data until gridstore object is ready
	    this._q = [];
	    _openStream(self);
	    this._q.push(data);
	    return false;
	  }

	  // Push data to queue
	  this._q.push(data);
	  _flush(this);
	  // Return write successful
	  return true;
	}

	/**
	 *  Handles the destroy part of a stream
	 *  @ignore
	 */
	GridStore.prototype.destroy = function destroy() {
	  // close and do not emit any more events. queued data is not sent.
	  if(!this.writable) return;
	  this.readable = false;
	  if(this.writable) {
	    this.writable = false;
	    this._q.length = 0;
	    this.emit('close');
	  }
	}

	/**
	 *  Handles the destroySoon part of a stream
	 *  @ignore
	 */
	GridStore.prototype.destroySoon = function destroySoon() {
	  // as soon as write queue is drained, destroy.
	  // may call destroy immediately if no data is queued.
	  if(!this._q.length) {
	    return this.destroy();
	  }
	  this._destroying = true;
	}

	/**
	 *  Handles the pipe part of the stream
	 *  @ignore
	 */
	GridStore.prototype.pipe = function(destination, options) {
	  var self = this;
	  // Open the gridstore
	  this.open(function(err, result) {
	    if(err) _errorRead(self, err);
	    if(!self.readable) return;
	    // Set up the pipe
	    self._pipe(destination, options);
	    // Emit the stream is open
	    self.emit('open');
	    // Read from the stream
	    _read(self);
	  })
	}

	/**
	 *  Internal module methods
	 *  @ignore
	 */
	var _read = function _read(self) {
	  if (!self.readable || self.paused || self.reading) {
	    return;
	  }

	  self.reading = true;
	  var stream = self._stream = self.stream();
	  stream.paused = self.paused;

	  stream.on('data', function (data) {
	    if (self._decoder) {
	      var str = self._decoder.write(data);
	      if (str.length) self.emit('data', str);
	    } else {
	      self.emit('data', data);
	    }
	  });

	  stream.on('end', function (data) {
	    self.emit('end', data);
	  });

	  stream.on('error', function (data) {
	    _errorRead(self, data);
	  });

	  stream.on('close', function (data) {
	    self.emit('close', data);
	  });

	  self.pause = function () {
	    // native doesn't always pause.
	    // bypass its pause() method to hack it
	    self.paused = stream.paused = true;
	  }

	  self.resume = function () {
	    if(!self.paused) return;

	    self.paused = false;
	    stream.resume();
	    self.readable = stream.readable;
	  }

	  self.destroy = function () {
	    self.readable = false;
	    stream.destroy();
	  }
	}

	/**
	 * pause
	 * @ignore
	 */
	GridStore.prototype.pause = function pause () {
	  // Overridden when the GridStore opens.
	  this.paused = true;
	}

	/**
	 * resume
	 * @ignore
	 */
	GridStore.prototype.resume = function resume () {
	  // Overridden when the GridStore opens.
	  this.paused = false;
	}

	/**
	 *  Internal module methods
	 *  @ignore
	 */
	var _flush = function _flush(self, _force) {
	  if (!self._opened) return;
	  if (!_force && self._flushing) return;
	  self._flushing = true;

	  // write the entire q to gridfs
	  if (!self._q.length) {
	    self._flushing = false;
	    self.emit('drain');

	    if(self._destroying) {
	      self.destroy();
	    }
	    return;
	  }

	  self.write(self._q.shift(), function (err, store) {
	    if (err) return _error(self, err);
	    self.emit('progress', store.position);
	    _flush(self, true);
	  });
	}

	var _openStream = function _openStream (self) {
	  if(self._opening == true) return;
	  self._opening = true;

	  // Open the store
	  self.open(function (err, gridstore) {
	    if (err) return _error(self, err);
	    self._opened = true;
	    self.emit('open');
	    _flush(self);
	  });
	}

	var _error = function _error(self, err) {
	  self.destroy();
	  self.emit('error', err);
	}

	var _errorRead = function _errorRead (self, err) {
	  self.readable = false;
	  self.emit('error', err);
	}

	/**
	 * @ignore
	 */
	var _hasWriteConcern = function(errorOptions) {
	  return errorOptions == true
	    || errorOptions.w > 0
	    || errorOptions.w == 'majority'
	    || errorOptions.j == true
	    || errorOptions.journal == true
	    || errorOptions.fsync == true
	}

	/**
	 * @ignore
	 */
	var _setWriteConcernHash = function(options) {
	  var finalOptions = {};
	  if(options.w != null) finalOptions.w = options.w;  
	  if(options.journal == true) finalOptions.j = options.journal;
	  if(options.j == true) finalOptions.j = options.j;
	  if(options.fsync == true) finalOptions.fsync = options.fsync;
	  if(options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;  
	  return finalOptions;
	}

	/**
	 * @ignore
	 */
	var _getWriteConcern = function(self, options, callback) {
	  // Final options
	  var finalOptions = {w:1};
	  options = options || {};
	  // Local options verification
	  if(options.w != null || typeof options.j == 'boolean' || typeof options.journal == 'boolean' || typeof options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(options);
	  } else if(typeof options.safe == "boolean") {
	    finalOptions = {w: (options.safe ? 1 : 0)};
	  } else if(options.safe != null && typeof options.safe == 'object') {
	    finalOptions = _setWriteConcernHash(options.safe);
	  } else if(self.db.safe.w != null || typeof self.db.safe.j == 'boolean' || typeof self.db.safe.journal == 'boolean' || typeof self.db.safe.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.db.safe);
	  } else if(self.db.options.w != null || typeof self.db.options.j == 'boolean' || typeof self.db.options.journal == 'boolean' || typeof self.db.options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.db.options);
	  } else if(typeof self.db.safe == "boolean") {
	    finalOptions = {w: (self.db.safe ? 1 : 0)};
	  }

	  // Ensure we don't have an invalid combination of write concerns
	  if(finalOptions.w < 1 
	    && (finalOptions.journal == true || finalOptions.j == true || finalOptions.fsync == true)) throw new Error("No acknowlegement using w < 1 cannot be combined with journal:true or fsync:true");

	  // Return the options
	  return finalOptions;
	}

	/**
	 * @ignore
	 * @api private
	 */
	exports.GridStore = GridStore;


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(310).Stream,
	  timers = __webpack_require__(289),
	  util = __webpack_require__(267);

	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(288).processor();

	/**
	 * ReadStream
	 *
	 * Returns a stream interface for the **file**.
	 *
	 * Events
	 *  - **data** {function(item) {}} the data event triggers when a document is ready.
	 *  - **end** {function() {}} the end event triggers when there is no more documents available.
	 *  - **close** {function() {}} the close event triggers when the stream is closed.
	 *  - **error** {function(err) {}} the error event triggers if an error happens.
	 *
	 * @class Represents a GridFS File Stream.
	 * @param {Boolean} autoclose automatically close file when the stream reaches the end.
	 * @param {GridStore} cursor a cursor object that the stream wraps.
	 * @return {ReadStream}
	 */
	function ReadStream(autoclose, gstore) {
	  if (!(this instanceof ReadStream)) return new ReadStream(autoclose, gstore);
	  Stream.call(this);

	  this.autoclose = !!autoclose;
	  this.gstore = gstore;

	  this.finalLength = gstore.length - gstore.position;
	  this.completedLength = 0;
	  this.currentChunkNumber = gstore.currentChunk.chunkNumber;

	  this.paused = false;
	  this.readable = true;
	  this.pendingChunk = null;
	  this.executing = false;  
	  
	  // Calculate the number of chunks
	  this.numberOfChunks = Math.ceil(gstore.length/gstore.chunkSize);

	  // This seek start position inside the current chunk
	  this.seekStartPosition = gstore.position - (this.currentChunkNumber * gstore.chunkSize);
	  
	  var self = this;
	  processor(function() {
	    self._execute();
	  });
	};

	/**
	 * Inherit from Stream
	 * @ignore
	 * @api private
	 */
	ReadStream.prototype.__proto__ = Stream.prototype;

	/**
	 * Flag stating whether or not this stream is readable.
	 */
	ReadStream.prototype.readable;

	/**
	 * Flag stating whether or not this stream is paused.
	 */
	ReadStream.prototype.paused;

	/**
	 * @ignore
	 * @api private
	 */
	ReadStream.prototype._execute = function() {
	  if(this.paused === true || this.readable === false) {
	    return;
	  }

	  var gstore = this.gstore;
	  var self = this;
	  // Set that we are executing
	  this.executing = true;

	  var last = false;
	  var toRead = 0;

	  if(gstore.currentChunk.chunkNumber >= (this.numberOfChunks - 1)) {
	    self.executing = false;    
	    last = true;    
	  }

	  // Data setup
	  var data = null;

	  // Read a slice (with seek set if none)
	  if(this.seekStartPosition > 0 && (gstore.currentChunk.length() - this.seekStartPosition) > 0) {
	    data = gstore.currentChunk.readSlice(gstore.currentChunk.length() - this.seekStartPosition);
	    this.seekStartPosition = 0;
	  } else {
	    data = gstore.currentChunk.readSlice(gstore.currentChunk.length());
	  }

	  // Return the data
	  if(data != null && gstore.currentChunk.chunkNumber == self.currentChunkNumber) {
	    self.currentChunkNumber = self.currentChunkNumber + 1;
	    self.completedLength += data.length;
	    self.pendingChunk = null;
	    self.emit("data", data);
	  }

	  if(last === true) {
	    self.readable = false;
	    self.emit("end");
	    
	    if(self.autoclose === true) {
	      if(gstore.mode[0] == "w") {
	        gstore.close(function(err, doc) {
	          if (err) {
	            self.emit("error", err);
	            return;
	          }
	          self.readable = false;          
	          self.emit("close", doc);
	        });
	      } else {
	        self.readable = false;
	        self.emit("close");
	      }
	    }
	  } else {
	    gstore._nthChunk(gstore.currentChunk.chunkNumber + 1, function(err, chunk) {
	      if(err) {
	        self.readable = false;
	        self.emit("error", err);
	        self.executing = false;
	        return;
	      }

	      self.pendingChunk = chunk;
	      if(self.paused === true) {
	        self.executing = false;
	        return;
	      }

	      gstore.currentChunk = self.pendingChunk;
	      self._execute();        
	    });
	  }
	};

	/**
	 * Pauses this stream, then no farther events will be fired.
	 *
	 * @ignore
	 * @api public
	 */
	ReadStream.prototype.pause = function() {
	  if(!this.executing) {
	    this.paused = true;    
	  }
	};

	/**
	 * Destroys the stream, then no farther events will be fired.
	 *
	 * @ignore
	 * @api public
	 */
	ReadStream.prototype.destroy = function() {
	  this.readable = false;
	  // Emit close event
	  this.emit("close");
	};

	/**
	 * Resumes this stream.
	 *
	 * @ignore
	 * @api public
	 */
	ReadStream.prototype.resume = function() {
	  if(this.paused === false || !this.readable) {
	    return;
	  }
	    
	  this.paused = false;
	  var self = this;
	  processor(function() {
	    self._execute();
	  });
	};

	exports.ReadStream = ReadStream;


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - server.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	var mongodb = __webpack_require__(255);
	var Db = mongodb.Db;
	var Server = mongodb.Server;
	var SkinDb = __webpack_require__(360).SkinDb;

	/**
	 * Construct SkinServer with native Server
	 *
	 * @param {Server} server
	 * @constructor
	 * @api public
	 */
	var SkinServer = exports.SkinServer = function (server) {
	  this.server = server;
	  this._cache_ = {};
	};

	/**
	 * Create SkinDb from a SkinServer
	 *
	 * @param {String} name database name
	 * @param {Object} [options]
	 * @return {SkinDb}
	 * @api public
	 */
	SkinServer.prototype.db = function (name, options) {
	  options = options || {};
	  var username = options.username || '';
	  var key = username + '@' + name;
	  var skinDb = this._cache_[key];
	  if (!skinDb || skinDb.fail) {
	    var password = options.password;
	    if (!options.native_parser) {
	      options.native_parser = !! mongodb.BSONNative;
	    }
	    var db = new Db(name, this.server, options);
	    skinDb = new SkinDb(db, username, password);
	    this._cache_[key] = skinDb;
	  }
	  return skinDb;
	};


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - db.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	var __slice = Array.prototype.slice;
	var mongodb = __webpack_require__(255);
	var utils = __webpack_require__(361);
	var SkinAdmin = __webpack_require__(363).SkinAdmin;
	var SkinCollection = __webpack_require__(364).SkinCollection;
	var SkinGridStore = __webpack_require__(366).SkinGridStore;
	var Db = mongodb.Db;
	var constant = __webpack_require__(362);
	var STATE_CLOSE = constant.STATE_CLOSE;
	var STATE_OPENNING = constant.STATE_OPENNING;
	var STATE_OPEN = constant.STATE_OPEN;

	/**
	 * SkinDb
	 * 
	 * @param {Db} dbconn, mongodb.Db instance
	 * @param {String} [username]
	 * @param {String} [password]
	 * @constructor
	 * @api public
	 */
	var SkinDb = exports.SkinDb = function (dbconn, username, password) {
	  utils.SkinObject.call(this);
	  this.emitter.setMaxListeners(100);

	  this._dbconn = dbconn;
	  this.db = null;
	  this.username = username;
	  this.password = password;
	  this.admin = new SkinAdmin(this);
	  this._collections = {};
	  this.bson_serializer = dbconn.bson_serializer;
	  this.ObjectID = mongodb.ObjectID /* 0.9.7-3-2 */ || dbconn.bson_serializer.ObjectID /* <= 0.9.7 */;
	};

	utils.inherits(SkinDb, utils.SkinObject);

	/**
	 * Convert to ObjectID.
	 * 
	 * @param {String} hex
	 * @return {ObjectID}
	 */
	SkinDb.prototype.toObjectID = SkinDb.prototype.toId = function (hex) {
	  if (hex instanceof this.ObjectID) {
	    return hex;
	  }
	  if (!hex || hex.length !== 24) {
	    return hex;
	  }
	  return this.ObjectID.createFromHexString(hex);
	};


	/**
	 * Open the database connection.
	 *
	 * @param {Function(err, nativeDb)} [callback]
	 * @return {SkinDb} this
	 * @api public
	 */
	SkinDb.prototype.open = function (callback) {
	  switch (this.state) {
	    case STATE_OPEN:
	      callback && callback(null, this.db);
	      break;
	    case STATE_OPENNING:
	      // if call 'open' method multi times before opened
	      callback && this.emitter.once('open', callback);
	      break;
	    // case STATE_CLOSE:
	    default:
	      var onDbOpen = function (err, db) {
	        if (!err && db) {
	          this.db = db;
	          this.state = STATE_OPEN;
	        } else {
	          db && db.close();
	          // close the openning connection.
	          this._dbconn.close();
	          this.db = null;
	          this.state = STATE_CLOSE;
	        }
	        this.emitter.emit('open', err, this.db);
	      }.bind(this);
	      callback && this.emitter.once('open', callback);
	      this.state = STATE_OPENNING;
	      this._dbconn.open(function (err, db) {
	        if (db && this.username) {
	          // do authenticate
	          db.authenticate(this.username, this.password, function (err) {
	            onDbOpen(err, db);
	          });
	        } else {
	          onDbOpen(err, db);
	        }
	      }.bind(this));
	      break;
	  }
	  return this;
	};

	/**
	 * Close the database connection.
	 * 
	 * @param {Function(err)} [callback]
	 * @return {SkinDb} this
	 * @api public
	 */
	SkinDb.prototype.close = function (callback) {
	  if (this.state === STATE_CLOSE) {
	    callback && callback();
	  } else if (this.state === STATE_OPEN) {
	    this.state = STATE_CLOSE;
	    this.db.close(callback);
	  } else if (this.state === STATE_OPENNING) {
	    var that = this;
	    this.emitter.once('open', function (err, db) {
	      that.state = STATE_CLOSE;
	      db ? db.close(callback) : callback && callback(err);
	    });
	  }
	  return this;
	};

	/**
	 * Create or retrieval skin collection
	 *
	 * @param {String} name, the collection name.
	 * @param {Object} [options] collection options.
	 * @return {SkinCollection}
	 * @api public
	 */
	SkinDb.prototype.collection = function (name, options) {
	  var collection = this._collections[name];
	  if (!collection) {
	    this._collections[name] = collection = new SkinCollection(this, name, options);
	  }
	  return collection;
	};

	/**
	 * gridfs
	 *
	 * @return {SkinGridStore}
	 * @api public
	 */
	SkinDb.prototype.gridfs = function () {
	  return this.skinGridStore || (this.skinGridStore = new SkinGridStore(this));
	};

	/**
	 * bind additional method to SkinCollection
	 *
	 * 1. collectionName
	 * 2. collectionName, extends1, extends2,... extendsn
	 * 3. collectionName, SkinCollection
	 * 
	 * @param {String} collectionName
	 * @param {Object|SkinCollection} [options]
	 * @return {SkinCollection}
	 * @api public
	 */
	SkinDb.prototype.bind = function (collectionName, options) {
	  var args = __slice.call(arguments);
	  var name = args[0];

	  if (typeof name !== 'string' || !name.trim()) {
	    throw new Error('Must provide collection name to bind.');
	  }
	  if (args.length === 1) {
	    return this.bind(name, this.collection(name));
	  }
	  if (args.length === 2 && args[1].constructor === SkinCollection) {
	    this._collections[name] = args[1];
	    Object.defineProperty(this, name, {
	      value: args[1],
	      writable: false,
	      enumerable: true
	    });
	    // support bind for system.js
	    var names = name.split('.');
	    if (names.length > 1){
	      var prev = this, next;
	      for (var i = 0; i < names.length - 1; i++) {
	        next = prev[names[i]];
	        if (!next) {
	          next = {};
	          Object.defineProperty(prev, names[i], {
	            value: next, 
	            writable: false, 
	            enumerable : true
	          });
	        }
	        prev = next;
	      }
	      Object.defineProperty(prev, names[names.length - 1], {
	        value: args[1], 
	        writable: false, 
	        enumerable : true
	      });
	    }
	    return args[1];
	  }

	  var isOptions = false;
	  var argsIndex = 1;
	  if (options && typeof options === 'object') {
	    isOptions = true;
	    argsIndex = 2;
	    for (var k in options) {
	      if (typeof options[k] === 'function') {
	        isOptions = false;
	        argsIndex = 1;
	        break;
	      }
	    }
	  }
	  var collection = this.collection(name, isOptions ? options : null);
	  for (var len = args.length; argsIndex < len; argsIndex++) {
	    var extend = args[argsIndex];
	    if (typeof extend !== 'object') {
	      throw new Error('the args[' + argsIndex + '] should be object, but is `' + extend + '`');
	    }
	    utils.extend(collection, extend);
	  }
	  return this.bind(name, collection);
	};

	var IGNORE_NAMES = [
	  'bind', 'open', 'close', 'collection', 'admin', 'state'
	];
	// bind method of mongodb.Db to SkinDb
	for (var key in Db.prototype) {
	  if (!key || key[0] === '_' || IGNORE_NAMES.indexOf(key) >= 0) {
	    continue;
	  }
	  var method = Db.prototype[key];
	  utils.bindSkin('SkinDb', SkinDb, 'db', key, method);
	}


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - utils.js
	 * 
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	var __slice = Array.prototype.slice;
	var EventEmitter = __webpack_require__(311).EventEmitter;
	var constant = __webpack_require__(362);
	var STATE_OPEN = constant.STATE_OPEN;
	var STATE_OPENNING = constant.STATE_OPENNING;
	var STATE_CLOSE = constant.STATE_CLOSE;

	exports.inherits = __webpack_require__(267).inherits;

	exports.error = function (err, args, name) {
	  var cb = args.pop();
	  if (cb && typeof cb === 'function') {
	    cb(err);
	  } else {
	    console.error("Error occured with no callback to handle it while calling " + name,  err);
	  }
	};

	/**
	 * SkinObject
	 *
	 * @constructor
	 * @api public
	 */
	exports.SkinObject = function () {
	  this.emitter = new EventEmitter();
	  this.state = STATE_CLOSE;
	};

	/**
	 * Skin method binding.
	 * 
	 * @param {String} objName
	 * @param {Function} obj
	 * @param {String} nativeObjName
	 * @param {String} methodName
	 * @param {Function} method
	 * @return {Function}
	 */
	exports.bindSkin = function (objName, obj, nativeObjName, methodName, method) {
	  if (typeof method !== 'function') {
	    return;
	  }
	  return obj.prototype[methodName] = function () {
	    var args = __slice.call(arguments);
	    if (this.state === STATE_OPEN) {
	      method.apply(this[nativeObjName], args);
	      return this;
	    }
	    this.open(function (err, nativeObj) {
	      if (err) {
	        exports.error(err, args, objName + '.' + methodName);
	      } else {
	        return method.apply(nativeObj, args);
	      }
	    });
	    return this;
	  };
	};

	exports.extend = function (destination, source) {
	  for (var property in source) {
	    destination[property] = source[property];
	  }
	  return destination;
	};

	exports.noop = function () {};

/***/ },
/* 362 */
/***/ function(module, exports) {

	/*!
	 * mongoskin - constant.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>
	 * MIT Licensed
	 */

	"use strict";

	exports.DEFAULT_PORT = 27017;

	exports.STATE_CLOSE = 0;
	exports.STATE_OPENNING = 1;
	exports.STATE_OPEN = 2;

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - admin.js
	 * 
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	var Admin = __webpack_require__(255).Admin;
	var utils = __webpack_require__(361);
	var constant = __webpack_require__(362);

	/**
	 * SkinAdmin
	 * 
	 * @param {SkinDb} skinDb
	 * @constructor
	 * @api public
	 */
	var SkinAdmin = exports.SkinAdmin = function (skinDb) {
	  utils.SkinObject.call(this);
	  this.skinDb = skinDb;
	  this.admin = null;
	};

	utils.inherits(SkinAdmin, utils.SkinObject);

	/**
	 * Retrieve mongodb.Admin instance.
	 * 
	 * @param {Function(err, admin)} callback
	 * @return {SkinAdmin} this
	 * @api public
	 */
	SkinAdmin.prototype.open = function (callback) {
	  if (this.state === constant.STATE_OPEN) {
	    callback(null, this.admin);
	    return this;
	  }
	  this.emitter.once('open', callback);
	  if (this.state === constant.STATE_OPENNING) {
	    return this;
	  }
	  this.state = constant.STATE_OPENNING;
	  this.skinDb.open(function (err, db) {
	    if (err) {
	      this.admin = null;
	      this.state = constant.STATE_CLOSE;
	    } else {
	      this.admin = new Admin(db);
	      this.state = constant.STATE_OPEN;
	    }
	    this.emitter.emit('open', err, this.admin);
	  }.bind(this));
	  return this;
	};

	for (var key in Admin.prototype) {
	  var method = Admin.prototype[key];
	  utils.bindSkin('SkinAdmin', SkinAdmin, 'admin', key, method);
	}

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - collection.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	/**
	  bind these methods from Collection.prototype to Provider

	  methods:
	    insert
	    checkCollectionName
	    remove
	    rename
	    save
	    update
	    distinct
	    count
	    drop
	    findAndModify
	    find
	    normalizeHintField
	    findOne
	    createIndex
	    ensureIndex
	    indexInformation
	    dropIndex
	    dropIndexes
	    mapReduce
	    group
	    options
	*/
	var __slice = Array.prototype.slice;
	var events = __webpack_require__(311);
	var Collection = __webpack_require__(255).Collection;
	var SkinCursor = __webpack_require__(365).SkinCursor;
	var utils = __webpack_require__(361);
	var constant = __webpack_require__(362);
	var STATE_CLOSE = constant.STATE_CLOSE;
	var STATE_OPENNING = constant.STATE_OPENNING;
	var STATE_OPEN = constant.STATE_OPEN;

	/**
	 * Construct SkinCollection from SkinDb and collectionName
	 * use skinDb.collection('name') usually
	 *
	 * @param {SkinDb} skinDb
	 * @param {String} collectionName
	 * @param {Object} [options] collection options
	 * @constructor
	 * @api public
	 */
	var SkinCollection = exports.SkinCollection = function (skinDb, collectionName, options) {
	  utils.SkinObject.call(this);
	  this.emitter.setMaxListeners(50);
	  
	  this.options = options;
	  this.skinDb = skinDb;
	  this.ObjectID = this.skinDb.ObjectID;
	  this.collectionName = collectionName;
	  this.collection = null;
	  this.internalHint = null;
	  this.__defineGetter__('hint', function () {
	    return this.internalHint;
	  });
	  this.__defineSetter__('hint', function (value) {
	    this.internalHint = value;
	    this.open(function (err, collection) {
	      collection.hint = value;
	      this.internalHint = collection.hint;
	    }.bind(this));
	  });
	};

	utils.inherits(SkinCollection, utils.SkinObject);

	for (var _name in Collection.prototype) {
	  var method = Collection.prototype[_name];
	  utils.bindSkin('SkinCollection', SkinCollection, 'collection', _name, method);
	}

	/*
	 * find is a special method, because it could return a SkinCursor instance
	 */
	SkinCollection.prototype._find = SkinCollection.prototype.find;

	/**
	 * Retrieve mongodb.Collection
	 * 
	 * @param {Function(err, collection)} callback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.open = function (callback) {
	  switch (this.state) {
	    case STATE_OPEN:
	      callback(null, this.collection);
	      break;
	    case STATE_OPENNING:
	      this.emitter.once('open', callback);
	      break;
	    // case STATE_CLOSE:
	    default:
	      this.emitter.once('open', callback);
	      this.state = STATE_OPENNING;
	      this.skinDb.open(function (err, db) {
	        if (err) {
	          this.state = STATE_CLOSE;
	          return this.emitter.emit('open', err, null);
	        }
	        db.collection(this.collectionName, this.options, function (err, collection) {
	          if (err) {
	            this.state = STATE_CLOSE;
	          } else {
	            this.state = STATE_OPEN;
	            this.collection = collection;
	            if (this.hint) {
	              this.collection.hint = this.hint;
	            }
	          }
	          this.emitter.emit('open', err, collection);
	        }.bind(this));
	      }.bind(this));
	      break;
	  }
	  return this;
	};

	/**
	 * Close current collection.
	 * 
	 * @param {Function(err)} callback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.close = function (callback) {
	  this.collection = null;
	  this.state = STATE_CLOSE;
	  return this;
	};

	/**
	 * Drop current collection.
	 * 
	 * @param {Function(err)} callback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.drop = function (callback) {
	  this.skinDb.dropCollection(this.collectionName, callback);
	  this.close();
	  return this;
	};

	/**
	 * same args as find, but use Array as callback result but not use Cursor
	 *
	 * findItems(args, function (err, items) {});
	 *
	 * same as
	 *
	 * find(args).toArray(function (err, items) {});
	 * 
	 * or using `mongodb.collection.find()`
	 *
	 * find(args, function (err, cursor) {
	 *   cursor.toArray(function (err, items) {
	 *   });
	 * });
	 *
	 * @param {Object} [query]
	 * @param {Object} [options]
	 * @param {Function(err, docs)} callback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.findItems = function (query, options, callback) {
	  var args = __slice.call(arguments);
	  var fn = args[args.length - 1];
	  args[args.length - 1] = function (err, cursor) {
	    if (err) {
	      return fn(err);
	    }
	    cursor.toArray(fn);
	  };
	  this.find.apply(this, args);
	  return this;
	};

	/**
	 * find and cursor.each(fn).
	 * 
	 * @param {Object} [query]
	 * @param {Object} [options]
	 * @param {Function(err, item)} eachCallback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.findEach = function (query, options, eachCallback) {
	  var args = __slice.call(arguments);
	  var fn = args[args.length - 1];
	  args[args.length - 1] = function (err, cursor) {
	    if (err) {
	      return fn(err);
	    }
	    cursor.each(fn);
	  };
	  this.find.apply(this, args);
	  return this;
	};

	/**
	 * @deprecated use `SkinDb.toId` instead
	 *
	 * @param {String} hex
	 * @return {ObjectID|String}
	 * @api public
	 */
	SkinCollection.prototype.id = function (hex) {
	  return this.skinDb.toId(hex);
	};

	/**
	 * Operate by object.`_id`
	 * 
	 * @param {String} methodName
	 * @param {String|ObjectID|Number} id
	 * @param {Arguments|Array} args
	 * @return {SkinCollection} this
	 * @api private
	 */
	SkinCollection.prototype._operateById = function (methodName, id, args) {
	  args = __slice.call(args);
	  args[0] = {_id: this.skinDb.toId(id)};
	  this[methodName].apply(this, args);
	  return this;
	};

	/**
	 * Find one object by _id.
	 * 
	 * @param {String|ObjectID|Number} id, doc primary key `_id`
	 * @param {Function(err, doc)} callback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.findById = function (id, callback) {
	  return this._operateById('findOne', id, arguments);
	};

	/**
	 * Update doc by _id.
	 * @param {String|ObjectID|Number} id, doc primary key `_id`
	 * @param {Object} doc
	 * @param {Function(err)} callback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.updateById = function (id, doc, callback) {
	  return this._operateById('update', id, arguments);
	};

	/**
	 * Remove doc by _id.
	 * @param {String|ObjectID|Number} id, doc primary key `_id`
	 * @param {Function(err)} callback
	 * @return {SkinCollection} this
	 * @api public
	 */
	SkinCollection.prototype.removeById = function (id, callback) {
	  return this._operateById('remove', id, arguments);
	};

	/**
	 * Creates a cursor for a query that can be used to iterate over results from MongoDB.
	 * 
	 * @param {Object} query
	 * @param {Object} options
	 * @param {Function(err, docs)} callback
	 * @return {SkinCursor|SkinCollection} if last argument is not a function, then returns a SkinCursor, 
	 *   otherise return this
	 * @api public
	 */
	SkinCollection.prototype.find = function (query, options, callback) {
	  var args = __slice.call(arguments);
	  if (args.length > 0 && typeof args[args.length - 1] === 'function') {
	    this._find.apply(this, args);
	    return this;
	  } else {
	    return new SkinCursor(null, this, args);
	  }
	};


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - cursor.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	var EventEmitter = __webpack_require__(311).EventEmitter;
	var Cursor = __webpack_require__(255).Cursor;
	var utils = __webpack_require__(361);
	var constant = __webpack_require__(362);
	var STATE_CLOSE = constant.STATE_CLOSE;
	var STATE_OPENNING = constant.STATE_OPENNING;
	var STATE_OPEN = constant.STATE_OPEN;

	var SkinCursor = exports.SkinCursor = function (cursor, skinCollection, args) {
	  utils.SkinObject.call(this);

	  this.cursor = cursor;
	  this.skinCollection = skinCollection;
	  this.args = args || [];
	  this.emitter = new EventEmitter();
	  if (cursor) {
	    this.state = STATE_OPEN;
	  }
	};

	utils.inherits(SkinCursor, utils.SkinObject);

	/**
	 * Retrieve mongodb.Cursor instance.
	 * 
	 * @param {Function(err, cursor)} callback
	 * @return {SkinCursor} this
	 * @api public
	 */
	SkinCursor.prototype.open = function (callback) {
	  switch (this.state) {
	    case STATE_OPEN:
	      callback(null, this.cursor);
	      break;
	    case STATE_OPENNING:
	      this.emitter.once('open', callback);
	      break;
	    // case STATE_CLOSE:
	    default:
	      this.emitter.once('open', callback);
	      this.state = STATE_OPENNING;
	      this.skinCollection.open(function (err, collection) {
	        if (err) {
	          this.state = STATE_CLOSE;
	          this.emitter.emit('open', err);
	          return;
	        }
	        // copy args
	        var args = this.args.slice();
	        args.push(function (err, cursor) {
	          if (cursor) {
	            this.state = STATE_OPEN;
	            this.cursor = cursor;
	          }
	          this.emitter.emit('open', err, cursor);
	        }.bind(this));
	        collection.find.apply(collection, args);
	      }.bind(this));
	      break;
	  }
	  return this;
	};

	[
	  // callbacks
	  'toArray', 'each', 'count', 'nextObject', 'getMore', 'explain', 
	  // self return
	  'sort', 'limit', 'skip', 'batchSize',
	  // unsupported
	  //'rewind', 'close' ,...
	].forEach(function (name) {
	  var method = Cursor.prototype[name];
	  utils.bindSkin('SkinCursor', SkinCursor, 'cursor', name, method);
	});


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mongoskin - gridfs.js
	 *
	 * Copyright(c) 2011 - 2012 kissjs.org
	 * MIT Licensed
	 */

	"use strict";

	/**
	 * Module dependencies.
	 */

	var GridStore = __webpack_require__(255).GridStore;
	var utils = __webpack_require__(361);

	/**
	 * @param filename:  filename or ObjectId
	 */
	var SkinGridStore = exports.SkinGridStore = function (skinDb) {
	  utils.SkinObject.call(this);
	  this.skinDb = skinDb;
	};

	utils.inherits(SkinGridStore, utils.SkinObject);

	/**
	 * @param id
	 * @param filename
	 * @param mode
	 * @param options
	 * @param callback
	 *  callback(err, gridStoreObject)
	 */
	SkinGridStore.prototype.open = function (id, filename, mode, options, callback) {
	  var args = Array.prototype.slice.call(arguments);
	  callback = args.pop();
	  this.skinDb.open(function (err, db) {
	    var gs = new GridStore(db, args[0], args[1], args[2], args[3]);
	    var props = {
	      length: gs.length,
	      contentType: gs.contentType,
	      uploadDate: gs.uploadDate,
	      metadata: gs.metadata,
	      chunkSize: gs.chunkSize
	    };
	    
	    gs.open(function (error, reply) {
	      callback(error, reply, props);
	    });
	  });
	};

	/**
	 * @param filename: filename or ObjectId
	 */
	SkinGridStore.prototype.unlink = SkinGridStore.prototype.remove = function (filename, callback) {
	  this.skinDb.open(function (err, db) {
	    GridStore.unlink(db, filename, callback);
	  });
	};

	SkinGridStore.prototype.exist = function (filename, rootCollection, callback) {
	  this.skinDb.open(function (err, db) {
	    GridStore.exist(db, filename, rootCollection, callback);
	  });
	};

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./admin": 363,
		"./admin.js": 363,
		"./collection": 364,
		"./collection.js": 364,
		"./constant": 362,
		"./constant.js": 362,
		"./cursor": 365,
		"./cursor.js": 365,
		"./db": 360,
		"./db.js": 360,
		"./gridfs": 366,
		"./gridfs.js": 366,
		"./index": 247,
		"./index.js": 247,
		"./router": 254,
		"./router.js": 254,
		"./server": 359,
		"./server.js": 359,
		"./utils": 361,
		"./utils.js": 361
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 367;


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Dispatcher = __webpack_require__(369);
	var ProductConstants = __webpack_require__(373);

	var SurveyActions = {
	    selectCategory: function selectCategory(categoryId) {
	        Dispatcher.dispatch({
	            actionType: ProductConstants.SELECT_CATEGORY,
	            categoryId: categoryId
	        });
	    }
	};

	module.exports = SurveyActions;

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Dispatcher = __webpack_require__(370).Dispatcher;
	var ProductDispatcher = new Dispatcher();
	var ProductStore = __webpack_require__(229);
	var ProductConstants = __webpack_require__(373);

	ProductDispatcher.register(function (action) {
	  switch (action.actionType) {
	    case ProductConstants.SELECT_CATEGORY:
	      ProductStore.emitChange();
	      break;
	    default:
	    // no op
	  }
	});

	module.exports = ProductDispatcher;

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	module.exports.Dispatcher = __webpack_require__(371)


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Dispatcher
	 * @typechecks
	 */

	"use strict";

	var invariant = __webpack_require__(372);

	var _lastID = 1;
	var _prefix = 'ID_';

	/**
	 * Dispatcher is used to broadcast payloads to registered callbacks. This is
	 * different from generic pub-sub systems in two ways:
	 *
	 *   1) Callbacks are not subscribed to particular events. Every payload is
	 *      dispatched to every registered callback.
	 *   2) Callbacks can be deferred in whole or part until other callbacks have
	 *      been executed.
	 *
	 * For example, consider this hypothetical flight destination form, which
	 * selects a default city when a country is selected:
	 *
	 *   var flightDispatcher = new Dispatcher();
	 *
	 *   // Keeps track of which country is selected
	 *   var CountryStore = {country: null};
	 *
	 *   // Keeps track of which city is selected
	 *   var CityStore = {city: null};
	 *
	 *   // Keeps track of the base flight price of the selected city
	 *   var FlightPriceStore = {price: null}
	 *
	 * When a user changes the selected city, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'city-update',
	 *     selectedCity: 'paris'
	 *   });
	 *
	 * This payload is digested by `CityStore`:
	 *
	 *   flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'city-update') {
	 *       CityStore.city = payload.selectedCity;
	 *     }
	 *   });
	 *
	 * When the user selects a country, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'country-update',
	 *     selectedCountry: 'australia'
	 *   });
	 *
	 * This payload is digested by both stores:
	 *
	 *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       CountryStore.country = payload.selectedCountry;
	 *     }
	 *   });
	 *
	 * When the callback to update `CountryStore` is registered, we save a reference
	 * to the returned token. Using this token with `waitFor()`, we can guarantee
	 * that `CountryStore` is updated before the callback that updates `CityStore`
	 * needs to query its data.
	 *
	 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       // `CountryStore.country` may not be updated.
	 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
	 *       // `CountryStore.country` is now guaranteed to be updated.
	 *
	 *       // Select the default city for the new country
	 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
	 *     }
	 *   });
	 *
	 * The usage of `waitFor()` can be chained, for example:
	 *
	 *   FlightPriceStore.dispatchToken =
	 *     flightDispatcher.register(function(payload) {
	 *       switch (payload.actionType) {
	 *         case 'country-update':
	 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
	 *           FlightPriceStore.price =
	 *             getFlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *
	 *         case 'city-update':
	 *           FlightPriceStore.price =
	 *             FlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *     }
	 *   });
	 *
	 * The `country-update` payload will be guaranteed to invoke the stores'
	 * registered callbacks in order: `CountryStore`, `CityStore`, then
	 * `FlightPriceStore`.
	 */

	  function Dispatcher() {
	    this.$Dispatcher_callbacks = {};
	    this.$Dispatcher_isPending = {};
	    this.$Dispatcher_isHandled = {};
	    this.$Dispatcher_isDispatching = false;
	    this.$Dispatcher_pendingPayload = null;
	  }

	  /**
	   * Registers a callback to be invoked with every dispatched payload. Returns
	   * a token that can be used with `waitFor()`.
	   *
	   * @param {function} callback
	   * @return {string}
	   */
	  Dispatcher.prototype.register=function(callback) {
	    var id = _prefix + _lastID++;
	    this.$Dispatcher_callbacks[id] = callback;
	    return id;
	  };

	  /**
	   * Removes a callback based on its token.
	   *
	   * @param {string} id
	   */
	  Dispatcher.prototype.unregister=function(id) {
	    invariant(
	      this.$Dispatcher_callbacks[id],
	      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',
	      id
	    );
	    delete this.$Dispatcher_callbacks[id];
	  };

	  /**
	   * Waits for the callbacks specified to be invoked before continuing execution
	   * of the current callback. This method should only be used by a callback in
	   * response to a dispatched payload.
	   *
	   * @param {array<string>} ids
	   */
	  Dispatcher.prototype.waitFor=function(ids) {
	    invariant(
	      this.$Dispatcher_isDispatching,
	      'Dispatcher.waitFor(...): Must be invoked while dispatching.'
	    );
	    for (var ii = 0; ii < ids.length; ii++) {
	      var id = ids[ii];
	      if (this.$Dispatcher_isPending[id]) {
	        invariant(
	          this.$Dispatcher_isHandled[id],
	          'Dispatcher.waitFor(...): Circular dependency detected while ' +
	          'waiting for `%s`.',
	          id
	        );
	        continue;
	      }
	      invariant(
	        this.$Dispatcher_callbacks[id],
	        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',
	        id
	      );
	      this.$Dispatcher_invokeCallback(id);
	    }
	  };

	  /**
	   * Dispatches a payload to all registered callbacks.
	   *
	   * @param {object} payload
	   */
	  Dispatcher.prototype.dispatch=function(payload) {
	    invariant(
	      !this.$Dispatcher_isDispatching,
	      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'
	    );
	    this.$Dispatcher_startDispatching(payload);
	    try {
	      for (var id in this.$Dispatcher_callbacks) {
	        if (this.$Dispatcher_isPending[id]) {
	          continue;
	        }
	        this.$Dispatcher_invokeCallback(id);
	      }
	    } finally {
	      this.$Dispatcher_stopDispatching();
	    }
	  };

	  /**
	   * Is this Dispatcher currently dispatching.
	   *
	   * @return {boolean}
	   */
	  Dispatcher.prototype.isDispatching=function() {
	    return this.$Dispatcher_isDispatching;
	  };

	  /**
	   * Call the callback stored with the given id. Also do some internal
	   * bookkeeping.
	   *
	   * @param {string} id
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_invokeCallback=function(id) {
	    this.$Dispatcher_isPending[id] = true;
	    this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload);
	    this.$Dispatcher_isHandled[id] = true;
	  };

	  /**
	   * Set up bookkeeping needed when dispatching.
	   *
	   * @param {object} payload
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_startDispatching=function(payload) {
	    for (var id in this.$Dispatcher_callbacks) {
	      this.$Dispatcher_isPending[id] = false;
	      this.$Dispatcher_isHandled[id] = false;
	    }
	    this.$Dispatcher_pendingPayload = payload;
	    this.$Dispatcher_isDispatching = true;
	  };

	  /**
	   * Clear bookkeeping used for dispatching.
	   *
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_stopDispatching=function() {
	    this.$Dispatcher_pendingPayload = null;
	    this.$Dispatcher_isDispatching = false;
	  };


	module.exports = Dispatcher;


/***/ },
/* 372 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 373 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  SELECT_CATEGORY: "selectCategory"
	};

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(164);

	var NotFound = React.createClass({
	  displayName: 'NotFound',

	  render: function render() {
	    return React.createElement(
	      'div',
	      null,
	      React.createElement(
	        'h1',
	        null,
	        '404'
	      ),
	      React.createElement(
	        'p',
	        null,
	        'The Page you were looking for isn\'t here!'
	      )
	    );
	  }
	});

	module.exports = NotFound;

/***/ }
]);